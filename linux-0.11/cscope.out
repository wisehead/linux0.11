cscope 15 $HOME/github/linux0.11/linux-0.11 -q 0000001990 0000212709
	@fs/bitmap.c

8 
	~<°rög.h
>

10 
	~<löux/sched.h
>

11 
	~<löux/kî√l.h
>

13 
	#˛ór_block
(
addr
) \

14 
	`__asm__
("cld\n\t" \

17 ::"a" (0),"c" (
BLOCK_SIZE
/4),"D" ((Ë(
addr
)):"cx","di")

	)

19 
	#£t_bô
(
ƒ
,
addr
) ({\

20 
ªs
 
	`__asm__
("ax"); \

21 
__asm__
 
	`__vﬁ©ûe__
("btsl %2,%3\n\tsetb %%al": \

22 "˜" (
ªs
):"0" (0),"r" (
ƒ
),"m" (*(
addr
))); \

23 
ªs
;})

	)

25 
	#˛ór_bô
(
ƒ
,
addr
) ({\

26 
ªs
 
	`__asm__
("ax"); \

27 
__asm__
 
	`__vﬁ©ûe__
("btrl %2,%3\n\tsetnb %%al": \

28 "˜" (
ªs
):"0" (0),"r" (
ƒ
),"m" (*(
addr
))); \

29 
ªs
;})

	)

31 
	#föd_fú°_zîo
(
addr
) ({ \

32 
__ªs
; \

33 
	`__asm__
("cld\n" \

44 :"=c" (
__ªs
):"c" (0),"S" (
addr
):"ax","dx","si"); \

45 
__ªs
;})

	)

47 
	$‰ì_block
(
dev
, 
block
)

49 
su≥r_block
 * 
sb
;

50 
buf„r_hód
 * 
bh
;

52 i‡(!(
sb
 = 
	`gë_su≥r
(
dev
)))

53 
	`∑nic
("tryingÅo free block onÇonexistent device");

54 i‡(
block
 < 
sb
->
s_fú°d©az⁄e
 || block >sb->
s_nz⁄es
)

55 
	`∑nic
("tryingÅo free blockÇot in datazone");

56 
bh
 = 
	`gë_hash_èbÀ
(
dev
,
block
);

57 i‡(
bh
) {

58 i‡(
bh
->
b_cou¡
 != 1) {

59 
	`¥ötk
("tryingÅo free block (%04x:%d), count=%d\n",

60 
dev
,
block
,
bh
->
b_cou¡
);

63 
bh
->
b_dút
=0;

64 
bh
->
b_u±od©e
=0;

65 
	`bªl£
(
bh
);

67 
block
 -
sb
->
s_fú°d©az⁄e
 - 1 ;

68 i‡(
	`˛ór_bô
(
block
&8191,
sb
->
s_zm≠
[block/8192]->
b_d©a
)) {

69 
	`¥ötk
("block (%04x:%dË",
dev
,
block
+
sb
->
s_fú°d©az⁄e
-1);

70 
	`∑nic
("free_block: bitálready cleared");

72 
sb
->
s_zm≠
[
block
/8192]->
b_dút
 = 1;

73 
	}
}

75 
	$√w_block
(
dev
)

77 
buf„r_hód
 * 
bh
;

78 
su≥r_block
 * 
sb
;

79 
i
,
j
;

81 i‡(!(
sb
 = 
	`gë_su≥r
(
dev
)))

82 
	`∑nic
("tryingÅo getÇew block fromÇonexistant device");

83 
j
 = 8192;

84 
i
=0 ; i<8 ; i++)

85 i‡(
bh
=
sb
->
s_zm≠
[
i
])

86 i‡((
j
=
	`föd_fú°_zîo
(
bh
->
b_d©a
))<8192)

88 i‡(
i
>=8 || !
bh
 || 
j
>=8192)

90 i‡(
	`£t_bô
(
j
,
bh
->
b_d©a
))

91 
	`∑nic
("new_block: bitálready set");

92 
bh
->
b_dút
 = 1;

93 
j
 +
i
*8192 + 
sb
->
s_fú°d©az⁄e
-1;

94 i‡(
j
 >
sb
->
s_nz⁄es
)

96 i‡(!(
bh
=
	`gëblk
(
dev
,
j
)))

97 
	`∑nic
("new_block: cannot get block");

98 i‡(
bh
->
b_cou¡
 != 1)

99 
	`∑nic
("new block: count is != 1");

100 
	`˛ór_block
(
bh
->
b_d©a
);

101 
bh
->
b_u±od©e
 = 1;

102 
bh
->
b_dút
 = 1;

103 
	`bªl£
(
bh
);

104  
j
;

105 
	}
}

107 
	$‰ì_öode
(
m_öode
 * 
öode
)

109 
su≥r_block
 * 
sb
;

110 
buf„r_hód
 * 
bh
;

112 i‡(!
öode
)

114 i‡(!
öode
->
i_dev
) {

115 
	`mem£t
(
öode
,0,(*inode));

118 i‡(
öode
->
i_cou¡
>1) {

119 
	`¥ötk
("åyögÅÿ‰ì inodêwôh cou¡=%d\n",
öode
->
i_cou¡
);

120 
	`∑nic
("free_inode");

122 i‡(
öode
->
i_∆öks
)

123 
	`∑nic
("tryingÅo free inode withÜinks");

124 i‡(!(
sb
 = 
	`gë_su≥r
(
öode
->
i_dev
)))

125 
	`∑nic
("tryingÅo free inode onÇonexistent device");

126 i‡(
öode
->
i_num
 < 1 || inode->i_num > 
sb
->
s_nöodes
)

127 
	`∑nic
("tryingÅo free inode 0 orÇonexistant inode");

128 i‡(!(
bh
=
sb
->
s_im≠
[
öode
->
i_num
>>13]))

129 
	`∑nic
("nonexistent imap in superblock");

130 i‡(
	`˛ór_bô
(
öode
->
i_num
&8191,
bh
->
b_d©a
))

131 
	`¥ötk
("free_inode: bitálready cleared.\n\r");

132 
bh
->
b_dút
 = 1;

133 
	`mem£t
(
öode
,0,(*inode));

134 
	}
}

136 
m_öode
 * 
	$√w_öode
(
dev
)

138 
m_öode
 * 
öode
;

139 
su≥r_block
 * 
sb
;

140 
buf„r_hód
 * 
bh
;

141 
i
,
j
;

143 i‡(!(
öode
=
	`gë_em±y_öode
()))

144  
NULL
;

145 i‡(!(
sb
 = 
	`gë_su≥r
(
dev
)))

146 
	`∑nic
("new_inode with unknown device");

147 
j
 = 8192;

148 
i
=0 ; i<8 ; i++)

149 i‡(
bh
=
sb
->
s_im≠
[
i
])

150 i‡((
j
=
	`föd_fú°_zîo
(
bh
->
b_d©a
))<8192)

152 i‡(!
bh
 || 
j
 >8192 || j+
i
*8192 > 
sb
->
s_nöodes
) {

153 
	`ùut
(
öode
);

154  
NULL
;

156 i‡(
	`£t_bô
(
j
,
bh
->
b_d©a
))

157 
	`∑nic
("new_inode: bitálready set");

158 
bh
->
b_dút
 = 1;

159 
öode
->
i_cou¡
=1;

160 
öode
->
i_∆öks
=1;

161 
öode
->
i_dev
=
dev
;

162 
öode
->
i_uid
=
cuºít
->
euid
;

163 
öode
->
i_gid
=
cuºít
->
egid
;

164 
öode
->
i_dút
=1;

165 
öode
->
i_num
 = 
j
 + 
i
*8192;

166 
öode
->
i_mtime
 = inode->
i_©ime
 = inode->
i_˘ime
 = 
CURRENT_TIME
;

167  
öode
;

168 
	}
}

	@fs/block_dev.c

7 
	~<î∫o.h
>

9 
	~<löux/sched.h
>

10 
	~<löux/kî√l.h
>

11 
	~<asm/£gmít.h
>

12 
	~<asm/sy°em.h
>

14 
	$block_wrôe
(
dev
, * 
pos
, * 
buf
, 
cou¡
)

16 
block
 = *
pos
 >> 
BLOCK_SIZE_BITS
;

17 
off£t
 = *
pos
 & (
BLOCK_SIZE
-1);

18 
ch¨s
;

19 
wrôãn
 = 0;

20 
buf„r_hód
 * 
bh
;

21 * 
p
;

23 
cou¡
>0) {

24 
ch¨s
 = 
BLOCK_SIZE
 - 
off£t
;

25 i‡(
ch¨s
 > 
cou¡
)

26 
ch¨s
=
cou¡
;

27 i‡(
ch¨s
 =
BLOCK_SIZE
)

28 
bh
 = 
	`gëblk
(
dev
,
block
);

30 
bh
 = 
	`bªada
(
dev
,
block
,block+1,block+2,-1);

31 
block
++;

32 i‡(!
bh
)

33  
wrôãn
?wrôãn:-
EIO
;

34 
p
 = 
off£t
 + 
bh
->
b_d©a
;

35 
off£t
 = 0;

36 *
pos
 +
ch¨s
;

37 
wrôãn
 +
ch¨s
;

38 
cou¡
 -
ch¨s
;

39 
ch¨s
-->0)

40 *(
p
++Ë
	`gë_fs_byã
(
buf
++);

41 
bh
->
b_dút
 = 1;

42 
	`bªl£
(
bh
);

44  
wrôãn
;

45 
	}
}

47 
	$block_ªad
(
dev
, * 
pos
, * 
buf
, 
cou¡
)

49 
block
 = *
pos
 >> 
BLOCK_SIZE_BITS
;

50 
off£t
 = *
pos
 & (
BLOCK_SIZE
-1);

51 
ch¨s
;

52 
ªad
 = 0;

53 
buf„r_hód
 * 
bh
;

54 * 
p
;

56 
cou¡
>0) {

57 
ch¨s
 = 
BLOCK_SIZE
-
off£t
;

58 i‡(
ch¨s
 > 
cou¡
)

59 
ch¨s
 = 
cou¡
;

60 i‡(!(
bh
 = 
	`bªada
(
dev
,
block
,block+1,block+2,-1)))

61  
ªad
?ªad:-
EIO
;

62 
block
++;

63 
p
 = 
off£t
 + 
bh
->
b_d©a
;

64 
off£t
 = 0;

65 *
pos
 +
ch¨s
;

66 
ªad
 +
ch¨s
;

67 
cou¡
 -
ch¨s
;

68 
ch¨s
-->0)

69 
	`put_fs_byã
(*(
p
++),
buf
++);

70 
	`bªl£
(
bh
);

72  
ªad
;

73 
	}
}

	@fs/buffer.c

21 
	~<°d¨g.h
>

23 
	~<löux/c⁄fig.h
>

24 
	~<löux/sched.h
>

25 
	~<löux/kî√l.h
>

26 
	~<asm/sy°em.h
>

27 
	~<asm/io.h
>

29 
íd
;

30 
buf„r_hód
 * 
	g°¨t_buf„r
 = (buf„r_hód *Ë&
íd
;

31 
buf„r_hód
 * 
	ghash_èbÀ
[
NR_HASH
];

32 
buf„r_hód
 * 
	g‰ì_li°
;

33 
èsk_°ru˘
 * 
	gbuf„r_waô
 = 
NULL
;

34 
	gNR_BUFFERS
 = 0;

36 
ölöe
 
	$waô_⁄_buf„r
(
buf„r_hód
 * 
bh
)

38 
	`˛i
();

39 
bh
->
b_lock
)

40 
	`¶ìp_⁄
(&
bh
->
b_waô
);

41 
	`°i
();

42 
	}
}

44 
	$sys_sync
()

46 
i
;

47 
buf„r_hód
 * 
bh
;

49 
	`sync_öodes
();

50 
bh
 = 
°¨t_buf„r
;

51 
i
=0 ; i<
NR_BUFFERS
 ; i++,
bh
++) {

52 
	`waô_⁄_buf„r
(
bh
);

53 i‡(
bh
->
b_dút
)

54 
	`Œ_rw_block
(
WRITE
,
bh
);

57 
	}
}

59 
	$sync_dev
(
dev
)

61 
i
;

62 
buf„r_hód
 * 
bh
;

64 
bh
 = 
°¨t_buf„r
;

65 
i
=0 ; i<
NR_BUFFERS
 ; i++,
bh
++) {

66 i‡(
bh
->
b_dev
 !
dev
)

68 
	`waô_⁄_buf„r
(
bh
);

69 i‡(
bh
->
b_dev
 =
dev
 && bh->
b_dút
)

70 
	`Œ_rw_block
(
WRITE
,
bh
);

72 
	`sync_öodes
();

73 
bh
 = 
°¨t_buf„r
;

74 
i
=0 ; i<
NR_BUFFERS
 ; i++,
bh
++) {

75 i‡(
bh
->
b_dev
 !
dev
)

77 
	`waô_⁄_buf„r
(
bh
);

78 i‡(
bh
->
b_dev
 =
dev
 && bh->
b_dút
)

79 
	`Œ_rw_block
(
WRITE
,
bh
);

82 
	}
}

84 
ölöe
 
	$övÆid©e_buf„rs
(
dev
)

86 
i
;

87 
buf„r_hód
 * 
bh
;

89 
bh
 = 
°¨t_buf„r
;

90 
i
=0 ; i<
NR_BUFFERS
 ; i++,
bh
++) {

91 i‡(
bh
->
b_dev
 !
dev
)

93 
	`waô_⁄_buf„r
(
bh
);

94 i‡(
bh
->
b_dev
 =
dev
)

95 
bh
->
b_u±od©e
 = bh->
b_dút
 = 0;

97 
	}
}

113 
	$check_disk_ch™ge
(
dev
)

115 
i
;

117 i‡(
	`MAJOR
(
dev
) != 2)

119 i‡(!
	`Ê›py_ch™ge
(
dev
 & 0x03))

121 
i
=0 ; i<
NR_SUPER
 ; i++)

122 i‡(
su≥r_block
[
i
].
s_dev
 =
dev
)

123 
	`put_su≥r
(
su≥r_block
[
i
].
s_dev
);

124 
	`övÆid©e_öodes
(
dev
);

125 
	`övÆid©e_buf„rs
(
dev
);

126 
	}
}

128 
	#_hash‚
(
dev
,
block
Ë((()(dev^block))%
NR_HASH
)

	)

129 
	#hash
(
dev
,
block
Ë
hash_èbÀ
[
	`_hash‚
(dev,block)]

	)

131 
ölöe
 
	$ªmove_‰om_queues
(
buf„r_hód
 * 
bh
)

134 i‡(
bh
->
b_√xt
)

135 
bh
->
b_√xt
->
b_¥ev
 = bh->b_prev;

136 i‡(
bh
->
b_¥ev
)

137 
bh
->
b_¥ev
->
b_√xt
 = bh->b_next;

138 i‡(
	`hash
(
bh
->
b_dev
,bh->
b_blockƒ
) == bh)

139 
	`hash
(
bh
->
b_dev
,bh->
b_blockƒ
Ëbh->
b_√xt
;

141 i‡(!(
bh
->
b_¥ev_‰ì
Ë|| !(bh->
b_√xt_‰ì
))

142 
	`∑nic
("Free blockÜist corrupted");

143 
bh
->
b_¥ev_‰ì
->
b_√xt_‰ì
 = bh->b_next_free;

144 
bh
->
b_√xt_‰ì
->
b_¥ev_‰ì
 = bh->b_prev_free;

145 i‡(
‰ì_li°
 =
bh
)

146 
‰ì_li°
 = 
bh
->
b_√xt_‰ì
;

147 
	}
}

149 
ölöe
 
	$ö£π_öto_queues
(
buf„r_hód
 * 
bh
)

152 
bh
->
b_√xt_‰ì
 = 
‰ì_li°
;

153 
bh
->
b_¥ev_‰ì
 = 
‰ì_li°
->b_prev_free;

154 
‰ì_li°
->
b_¥ev_‰ì
->
b_√xt_‰ì
 = 
bh
;

155 
‰ì_li°
->
b_¥ev_‰ì
 = 
bh
;

157 
bh
->
b_¥ev
 = 
NULL
;

158 
bh
->
b_√xt
 = 
NULL
;

159 i‡(!
bh
->
b_dev
)

161 
bh
->
b_√xt
 = 
	`hash
(bh->
b_dev
,bh->
b_blockƒ
);

162 
	`hash
(
bh
->
b_dev
,bh->
b_blockƒ
) = bh;

163 
bh
->
b_√xt
->
b_¥ev
 = bh;

164 
	}
}

166 
buf„r_hód
 * 
	$föd_buf„r
(
dev
, 
block
)

168 
buf„r_hód
 * 
tmp
;

170 
tmp
 = 
	`hash
(
dev
,
block
Ë;Åm∞!
NULL
 ;Åm∞tmp->
b_√xt
)

171 i‡(
tmp
->
b_dev
==
dev
 &&Åmp->
b_blockƒ
==
block
)

172  
tmp
;

173  
NULL
;

174 
	}
}

183 
buf„r_hód
 * 
	$gë_hash_èbÀ
(
dev
, 
block
)

185 
buf„r_hód
 * 
bh
;

188 i‡(!(
bh
=
	`föd_buf„r
(
dev
,
block
)))

189  
NULL
;

190 
bh
->
b_cou¡
++;

191 
	`waô_⁄_buf„r
(
bh
);

192 i‡(
bh
->
b_dev
 =
dev
 && bh->
b_blockƒ
 =
block
)

193  
bh
;

194 
bh
->
b_cou¡
--;

196 
	}
}

205 
	#BADNESS
(
bh
Ë(((bh)->
b_dút
<<1)+(bh)->
b_lock
)

	)

206 
buf„r_hód
 * 
	$gëblk
(
dev
,
block
)

208 
buf„r_hód
 * 
tmp
, * 
bh
;

210 
ª≥©
:

211 i‡(
bh
 = 
	`gë_hash_èbÀ
(
dev
,
block
))

212  
bh
;

213 
tmp
 = 
‰ì_li°
;

215 i‡(
tmp
->
b_cou¡
)

217 i‡(!
bh
 || 
	`BADNESS
(
tmp
)<BADNESS(bh)) {

218 
bh
 = 
tmp
;

219 i‡(!
	`BADNESS
(
tmp
))

223 } (
tmp
 =Åmp->
b_√xt_‰ì
Ë!
‰ì_li°
);

224 i‡(!
bh
) {

225 
	`¶ìp_⁄
(&
buf„r_waô
);

226 
ª≥©
;

228 
	`waô_⁄_buf„r
(
bh
);

229 i‡(
bh
->
b_cou¡
)

230 
ª≥©
;

231 
bh
->
b_dút
) {

232 
	`sync_dev
(
bh
->
b_dev
);

233 
	`waô_⁄_buf„r
(
bh
);

234 i‡(
bh
->
b_cou¡
)

235 
ª≥©
;

239 i‡(
	`föd_buf„r
(
dev
,
block
))

240 
ª≥©
;

243 
bh
->
b_cou¡
=1;

244 
bh
->
b_dút
=0;

245 
bh
->
b_u±od©e
=0;

246 
	`ªmove_‰om_queues
(
bh
);

247 
bh
->
b_dev
=
dev
;

248 
bh
->
b_blockƒ
=
block
;

249 
	`ö£π_öto_queues
(
bh
);

250  
bh
;

251 
	}
}

253 
	$bªl£
(
buf„r_hód
 * 
buf
)

255 i‡(!
buf
)

257 
	`waô_⁄_buf„r
(
buf
);

258 i‡(!(
buf
->
b_cou¡
--))

259 
	`∑nic
("TryingÅo free free buffer");

260 
	`wake_up
(&
buf„r_waô
);

261 
	}
}

267 
buf„r_hód
 * 
	$bªad
(
dev
,
block
)

269 
buf„r_hód
 * 
bh
;

271 i‡(!(
bh
=
	`gëblk
(
dev
,
block
)))

272 
	`∑nic
("bread: getblkÑeturned NULL\n");

273 i‡(
bh
->
b_u±od©e
)

274  
bh
;

275 
	`Œ_rw_block
(
READ
,
bh
);

276 
	`waô_⁄_buf„r
(
bh
);

277 i‡(
bh
->
b_u±od©e
)

278  
bh
;

279 
	`bªl£
(
bh
);

280  
NULL
;

281 
	}
}

283 
	#COPYBLK
(
‰om
,
to
) \

284 
	`__asm__
("cld\n\t" \

287 ::"c" (
BLOCK_SIZE
/4),"S" (
‰om
),"D" (
to
) \

288 :"cx","di","si")

	)

296 
	$bªad_∑ge
(
addªss
,
dev
,
b
[4])

298 
buf„r_hód
 * 
bh
[4];

299 
i
;

301 
i
=0 ; i<4 ; i++)

302 i‡(
b
[
i
]) {

303 i‡(
bh
[
i
] = 
	`gëblk
(
dev
,
b
[i]))

304 i‡(!
bh
[
i
]->
b_u±od©e
)

305 
	`Œ_rw_block
(
READ
,
bh
[
i
]);

307 
bh
[
i
] = 
NULL
;

308 
i
=0 ; i<4 ; i++,
addªss
 +
BLOCK_SIZE
)

309 i‡(
bh
[
i
]) {

310 
	`waô_⁄_buf„r
(
bh
[
i
]);

311 i‡(
bh
[
i
]->
b_u±od©e
)

312 
	`COPYBLK
((Ë
bh
[
i
]->
b_d©a
,
addªss
);

313 
	`bªl£
(
bh
[
i
]);

315 
	}
}

322 
buf„r_hód
 * 
	$bªada
(
dev
,
fú°
, ...)

324 
va_li°
 
¨gs
;

325 
buf„r_hód
 * 
bh
, *
tmp
;

327 
	`va_°¨t
(
¨gs
,
fú°
);

328 i‡(!(
bh
=
	`gëblk
(
dev
,
fú°
)))

329 
	`∑nic
("bread: getblkÑeturned NULL\n");

330 i‡(!
bh
->
b_u±od©e
)

331 
	`Œ_rw_block
(
READ
,
bh
);

332 (
fú°
=
	`va_¨g
(
¨gs
,))>=0) {

333 
tmp
=
	`gëblk
(
dev
,
fú°
);

334 i‡(
tmp
) {

335 i‡(!
tmp
->
b_u±od©e
)

336 
	`Œ_rw_block
(
READA
,
bh
);

337 
tmp
->
b_cou¡
--;

340 
	`va_íd
(
¨gs
);

341 
	`waô_⁄_buf„r
(
bh
);

342 i‡(
bh
->
b_u±od©e
)

343  
bh
;

344 
	`bªl£
(
bh
);

345  (
NULL
);

346 
	}
}

348 
	$buf„r_öô
(
buf„r_íd
)

350 
buf„r_hód
 * 
h
 = 
°¨t_buf„r
;

351 * 
b
;

352 
i
;

354 i‡(
buf„r_íd
 == 1<<20)

355 
b
 = (*) (640*1024);

357 
b
 = (*Ë
buf„r_íd
;

358  (
b
 -
BLOCK_SIZE
Ë>((*Ë(
h
+1)) ) {

359 
h
->
b_dev
 = 0;

360 
h
->
b_dút
 = 0;

361 
h
->
b_cou¡
 = 0;

362 
h
->
b_lock
 = 0;

363 
h
->
b_u±od©e
 = 0;

364 
h
->
b_waô
 = 
NULL
;

365 
h
->
b_√xt
 = 
NULL
;

366 
h
->
b_¥ev
 = 
NULL
;

367 
h
->
b_d©a
 = (*Ë
b
;

368 
h
->
b_¥ev_‰ì
 = h-1;

369 
h
->
b_√xt_‰ì
 = h+1;

370 
h
++;

371 
NR_BUFFERS
++;

372 i‡(
b
 == (*) 0x100000)

373 
b
 = (*) 0xA0000;

375 
h
--;

376 
‰ì_li°
 = 
°¨t_buf„r
;

377 
‰ì_li°
->
b_¥ev_‰ì
 = 
h
;

378 
h
->
b_√xt_‰ì
 = 
‰ì_li°
;

379 
i
=0;i<
NR_HASH
;i++)

380 
hash_èbÀ
[
i
]=
NULL
;

381 
	}
}

	@fs/char_dev.c

7 
	~<î∫o.h
>

8 
	~<sys/ty≥s.h
>

10 
	~<löux/sched.h
>

11 
	~<löux/kî√l.h
>

13 
	~<asm/£gmít.h
>

14 
	~<asm/io.h
>

16 
ây_ªad
(
mö‹
,* 
buf
,
cou¡
);

17 
ây_wrôe
(
mö‹
,* 
buf
,
cou¡
);

19 (*
¸w_±r
)(
	trw
,
	tmö‹
,* 
	tbuf
,
	tcou¡
,
	toff_t
 * 
	tpos
);

21 
	$rw_âyx
(
rw
,
mö‹
,* 
buf
,
cou¡
,
off_t
 * 
pos
)

23  ((
rw
==
READ
)?
	`ây_ªad
(
mö‹
,
buf
,
cou¡
):

24 
	`ây_wrôe
(
mö‹
,
buf
,
cou¡
));

25 
	}
}

27 
	$rw_ây
(
rw
,
mö‹
,* 
buf
,
cou¡
, 
off_t
 * 
pos
)

29 i‡(
cuºít
->
ây
<0)

30  -
EPERM
;

31  
	`rw_âyx
(
rw
,
cuºít
->
ây
,
buf
,
cou¡
,
pos
);

32 
	}
}

34 
	$rw_øm
(
rw
,* 
buf
, 
cou¡
, 
off_t
 *
pos
)

36  -
EIO
;

37 
	}
}

39 
	$rw_mem
(
rw
,* 
buf
, 
cou¡
, 
off_t
 * 
pos
)

41  -
EIO
;

42 
	}
}

44 
	$rw_kmem
(
rw
,* 
buf
, 
cou¡
, 
off_t
 * 
pos
)

46  -
EIO
;

47 
	}
}

49 
	$rw_p‹t
(
rw
,* 
buf
, 
cou¡
, 
off_t
 * 
pos
)

51 
i
=*
pos
;

53 
cou¡
-->0 && 
i
<65536) {

54 i‡(
rw
==
READ
)

55 
	`put_fs_byã
(
	`öb
(
i
),
buf
++);

57 
	`outb
(
	`gë_fs_byã
(
buf
++),
i
);

58 
i
++;

60 
i
 -*
pos
;

61 *
pos
 +
i
;

62  
i
;

63 
	}
}

65 
	$rw_mem‹y
(
rw
, 
mö‹
, * 
buf
, 
cou¡
, 
off_t
 * 
pos
)

67 
mö‹
) {

69  
	`rw_øm
(
rw
,
buf
,
cou¡
,
pos
);

71  
	`rw_mem
(
rw
,
buf
,
cou¡
,
pos
);

73  
	`rw_kmem
(
rw
,
buf
,
cou¡
,
pos
);

75  (
rw
==
READ
)?0:
cou¡
;

77  
	`rw_p‹t
(
rw
,
buf
,
cou¡
,
pos
);

79  -
EIO
;

81 
	}
}

83 
	#NRDEVS
 (( (
¸w_èbÀ
))/( (
¸w_±r
)))

	)

85 
¸w_±r
 
	g¸w_èbÀ
[]={

86 
NULL
,

87 
rw_mem‹y
,

88 
NULL
,

89 
NULL
,

90 
rw_âyx
,

91 
rw_ây
,

92 
NULL
,

93 
NULL
};

95 
	$rw_ch¨
(
rw
,
dev
, * 
buf
, 
cou¡
, 
off_t
 * 
pos
)

97 
¸w_±r
 
ˇŒ_addr
;

99 i‡(
	`MAJOR
(
dev
)>=
NRDEVS
)

100  -
ENODEV
;

101 i‡(!(
ˇŒ_addr
=
¸w_èbÀ
[
	`MAJOR
(
dev
)]))

102  -
ENODEV
;

103  
	`ˇŒ_addr
(
rw
,
	`MINOR
(
dev
),
buf
,
cou¡
,
pos
);

104 
	}
}

	@fs/exec.c

20 
	~<î∫o.h
>

21 
	~<°rög.h
>

22 
	~<sys/°©.h
>

23 
	~<a.out.h
>

25 
	~<löux/fs.h
>

26 
	~<löux/sched.h
>

27 
	~<löux/kî√l.h
>

28 
	~<löux/mm.h
>

29 
	~<asm/£gmít.h
>

31 
sys_exô
(
exô_code
);

32 
sys_˛o£
(
fd
);

39 
	#MAX_ARG_PAGES
 32

	)

46 * 
	$¸óã_èbÀs
(* 
p
,
¨gc
,
ívc
)

48 *
¨gv
,*
ívp
;

49 * 
•
;

51 
•
 = (*Ë(0xfffffff¯& (Ë
p
);

52 
•
 -
ívc
+1;

53 
ívp
 = 
•
;

54 
•
 -
¨gc
+1;

55 
¨gv
 = 
•
;

56 
	`put_fs_l⁄g
(()
ívp
,--
•
);

57 
	`put_fs_l⁄g
(()
¨gv
,--
•
);

58 
	`put_fs_l⁄g
(()
¨gc
,--
•
);

59 
¨gc
-->0) {

60 
	`put_fs_l⁄g
((Ë
p
,
¨gv
++);

61 
	`gë_fs_byã
(
p
++)) ;

63 
	`put_fs_l⁄g
(0,
¨gv
);

64 
ívc
-->0) {

65 
	`put_fs_l⁄g
((Ë
p
,
ívp
++);

66 
	`gë_fs_byã
(
p
++)) ;

68 
	`put_fs_l⁄g
(0,
ívp
);

69  
•
;

70 
	}
}

75 
	$cou¡
(** 
¨gv
)

77 
i
=0;

78 ** 
tmp
;

80 i‡(
tmp
 = 
¨gv
)

81 
	`gë_fs_l⁄g
((*Ë(
tmp
++)))

82 
i
++;

84  
i
;

85 
	}
}

104 
	$c›y_°rögs
(
¨gc
,** 
¨gv
,*
∑ge
,

105 
p
, 
‰om_kmem
)

107 *
tmp
, *
∑g
;

108 
Àn
, 
off£t
 = 0;

109 
ﬁd_fs
, 
√w_fs
;

111 i‡(!
p
)

113 
√w_fs
 = 
	`gë_ds
();

114 
ﬁd_fs
 = 
	`gë_fs
();

115 i‡(
‰om_kmem
==2)

116 
	`£t_fs
(
√w_fs
);

117 
¨gc
-- > 0) {

118 i‡(
‰om_kmem
 == 1)

119 
	`£t_fs
(
√w_fs
);

120 i‡(!(
tmp
 = (*)
	`gë_fs_l⁄g
(((*)
¨gv
)+
¨gc
)))

121 
	`∑nic
("argc is wrong");

122 i‡(
‰om_kmem
 == 1)

123 
	`£t_fs
(
ﬁd_fs
);

124 
Àn
=0;

126 
Àn
++;

127 } 
	`gë_fs_byã
(
tmp
++));

128 i‡(
p
-
Àn
 < 0) {

129 
	`£t_fs
(
ﬁd_fs
);

132 
Àn
) {

133 --
p
; --
tmp
; --
Àn
;

134 i‡(--
off£t
 < 0) {

135 
off£t
 = 
p
 % 
PAGE_SIZE
;

136 i‡(
‰om_kmem
==2)

137 
	`£t_fs
(
ﬁd_fs
);

138 i‡(!(
∑g
 = (*Ë
∑ge
[
p
/
PAGE_SIZE
]) &&

139 !(
∑g
 = (*Ë
∑ge
[
p
/
PAGE_SIZE
] =

140 (*Ë
	`gë_‰ì_∑ge
()))

142 i‡(
‰om_kmem
==2)

143 
	`£t_fs
(
√w_fs
);

146 *(
∑g
 + 
off£t
Ë
	`gë_fs_byã
(
tmp
);

149 i‡(
‰om_kmem
==2)

150 
	`£t_fs
(
ﬁd_fs
);

151  
p
;

152 
	}
}

154 
	$ch™ge_ldt
(
ãxt_size
,* 
∑ge
)

156 
code_limô
,
d©a_limô
,
code_ba£
,
d©a_ba£
;

157 
i
;

159 
code_limô
 = 
ãxt_size
+
PAGE_SIZE
 -1;

160 
code_limô
 &= 0xFFFFF000;

161 
d©a_limô
 = 0x4000000;

162 
code_ba£
 = 
	`gë_ba£
(
cuºít
->
ldt
[1]);

163 
d©a_ba£
 = 
code_ba£
;

164 
	`£t_ba£
(
cuºít
->
ldt
[1],
code_ba£
);

165 
	`£t_limô
(
cuºít
->
ldt
[1],
code_limô
);

166 
	`£t_ba£
(
cuºít
->
ldt
[2],
d©a_ba£
);

167 
	`£t_limô
(
cuºít
->
ldt
[2],
d©a_limô
);

169 
	`__asm__
("pushl $0x17\n\tpop %%fs"::);

170 
d©a_ba£
 +
d©a_limô
;

171 
i
=
MAX_ARG_PAGES
-1 ; i>=0 ; i--) {

172 
d©a_ba£
 -
PAGE_SIZE
;

173 i‡(
∑ge
[
i
])

174 
	`put_∑ge
(
∑ge
[
i
],
d©a_ba£
);

176  
d©a_limô
;

177 
	}
}

182 
	$do_execve
(* 
eù
,
tmp
,* 
fûíame
,

183 ** 
¨gv
, ** 
ívp
)

185 
m_öode
 * 
öode
;

186 
buf„r_hód
 * 
bh
;

187 
exec
 
ex
;

188 
∑ge
[
MAX_ARG_PAGES
];

189 
i
,
¨gc
,
ívc
;

190 
e_uid
, 
e_gid
;

191 
ªtvÆ
;

192 
sh_b™g
 = 0;

193 
p
=
PAGE_SIZE
*
MAX_ARG_PAGES
-4;

195 i‡((0xfff‡& 
eù
[1]) != 0x000f)

196 
	`∑nic
("execve called from supervisor mode");

197 
i
=0 ; i<
MAX_ARG_PAGES
 ; i++)

198 
∑ge
[
i
]=0;

199 i‡(!(
öode
=
	`«mei
(
fûíame
)))

200  -
ENOENT
;

201 
¨gc
 = 
	`cou¡
(
¨gv
);

202 
ívc
 = 
	`cou¡
(
ívp
);

204 
ª°¨t_öãΩ
:

205 i‡(!
	`S_ISREG
(
öode
->
i_mode
)) {

206 
ªtvÆ
 = -
EACCES
;

207 
exec_îr‹2
;

209 
i
 = 
öode
->
i_mode
;

210 
e_uid
 = (
i
 & 
S_ISUID
Ë? 
öode
->
i_uid
 : 
cuºít
->
euid
;

211 
e_gid
 = (
i
 & 
S_ISGID
Ë? 
öode
->
i_gid
 : 
cuºít
->
egid
;

212 i‡(
cuºít
->
euid
 =
öode
->
i_uid
)

213 
i
 >>= 6;

214 i‡(
cuºít
->
egid
 =
öode
->
i_gid
)

215 
i
 >>= 3;

216 i‡(!(
i
 & 1) &&

217 !((
öode
->
i_mode
 & 0111Ë&& 
	`su£r
())) {

218 
ªtvÆ
 = -
ENOEXEC
;

219 
exec_îr‹2
;

221 i‡(!(
bh
 = 
	`bªad
(
öode
->
i_dev
,öode->
i_z⁄e
[0]))) {

222 
ªtvÆ
 = -
EACCES
;

223 
exec_îr‹2
;

225 
ex
 = *((
exec
 *Ë
bh
->
b_d©a
);

226 i‡((
bh
->
b_d©a
[0] ='#'Ë&& (bh->b_d©a[1] ='!'Ë&& (!
sh_b™g
)) {

232 
buf
[1023], *
˝
, *
öãΩ
, *
i_«me
, *
i_¨g
;

233 
ﬁd_fs
;

235 
	`°∫˝y
(
buf
, 
bh
->
b_d©a
+2, 1022);

236 
	`bªl£
(
bh
);

237 
	`ùut
(
öode
);

238 
buf
[1022] = '\0';

239 i‡(
˝
 = 
	`°rchr
(
buf
, '\n')) {

240 *
˝
 = '\0';

241 
˝
 = 
buf
; (*cp == ' ') || (*cp == '\t'); cp++);

243 i‡(!
˝
 || *cp == '\0') {

244 
ªtvÆ
 = -
ENOEXEC
;

245 
exec_îr‹1
;

247 
öãΩ
 = 
i_«me
 = 
˝
;

248 
i_¨g
 = 0;

249  ; *
˝
 && (*cp != ' ') && (*cp != '\t'); cp++) {

250 i‡(*
˝
 == '/')

251 
i_«me
 = 
˝
+1;

253 i‡(*
˝
) {

254 *
˝
++ = '\0';

255 
i_¨g
 = 
˝
;

261 i‡(
sh_b™g
++ == 0) {

262 
p
 = 
	`c›y_°rögs
(
ívc
, 
ívp
, 
∑ge
,Ö, 0);

263 
p
 = 
	`c›y_°rögs
(--
¨gc
, 
¨gv
+1, 
∑ge
,Ö, 0);

273 
p
 = 
	`c›y_°rögs
(1, &
fûíame
, 
∑ge
,Ö, 1);

274 
¨gc
++;

275 i‡(
i_¨g
) {

276 
p
 = 
	`c›y_°rögs
(1, &
i_¨g
, 
∑ge
,Ö, 2);

277 
¨gc
++;

279 
p
 = 
	`c›y_°rögs
(1, &
i_«me
, 
∑ge
,Ö, 2);

280 
¨gc
++;

281 i‡(!
p
) {

282 
ªtvÆ
 = -
ENOMEM
;

283 
exec_îr‹1
;

288 
ﬁd_fs
 = 
	`gë_fs
();

289 
	`£t_fs
(
	`gë_ds
());

290 i‡(!(
öode
=
	`«mei
(
öãΩ
))) {

291 
	`£t_fs
(
ﬁd_fs
);

292 
ªtvÆ
 = -
ENOENT
;

293 
exec_îr‹1
;

295 
	`£t_fs
(
ﬁd_fs
);

296 
ª°¨t_öãΩ
;

298 
	`bªl£
(
bh
);

299 i‡(
	`N_MAGIC
(
ex
Ë!
ZMAGIC
 ||Éx.
a_åsize
 ||Éx.
a_drsize
 ||

300 
ex
.
a_ãxt
+ex.
a_d©a
+ex.
a_bss
>0x3000000 ||

301 
öode
->
i_size
 < 
ex
.
a_ãxt
+ex.
a_d©a
+ex.
a_syms
+
	`N_TXTOFF
(ex)) {

302 
ªtvÆ
 = -
ENOEXEC
;

303 
exec_îr‹2
;

305 i‡(
	`N_TXTOFF
(
ex
Ë!
BLOCK_SIZE
) {

306 
	`¥ötk
("%s: N_TXTOFF !BLOCK_SIZE. Sìá.out.h.", 
fûíame
);

307 
ªtvÆ
 = -
ENOEXEC
;

308 
exec_îr‹2
;

310 i‡(!
sh_b™g
) {

311 
p
 = 
	`c›y_°rögs
(
ívc
,
ívp
,
∑ge
,p,0);

312 
p
 = 
	`c›y_°rögs
(
¨gc
,
¨gv
,
∑ge
,p,0);

313 i‡(!
p
) {

314 
ªtvÆ
 = -
ENOMEM
;

315 
exec_îr‹2
;

319 i‡(
cuºít
->
execuèbÀ
)

320 
	`ùut
(
cuºít
->
execuèbÀ
);

321 
cuºít
->
execuèbÀ
 = 
öode
;

322 
i
=0 ; i<32 ; i++)

323 
cuºít
->
siga˘i⁄
[
i
].
ß_h™dÀr
 = 
NULL
;

324 
i
=0 ; i<
NR_OPEN
 ; i++)

325 i‡((
cuºít
->
˛o£_⁄_exec
>>
i
)&1)

326 
	`sys_˛o£
(
i
);

327 
cuºít
->
˛o£_⁄_exec
 = 0;

328 
	`‰ì_∑ge_èbÀs
(
	`gë_ba£
(
cuºít
->
ldt
[1]),
	`gë_limô
(0x0f));

329 
	`‰ì_∑ge_èbÀs
(
	`gë_ba£
(
cuºít
->
ldt
[2]),
	`gë_limô
(0x17));

330 i‡(
œ°_èsk_u£d_m©h
 =
cuºít
)

331 
œ°_èsk_u£d_m©h
 = 
NULL
;

332 
cuºít
->
u£d_m©h
 = 0;

333 
p
 +
	`ch™ge_ldt
(
ex
.
a_ãxt
,
∑ge
)-
MAX_ARG_PAGES
*
PAGE_SIZE
;

334 
p
 = (Ë
	`¸óã_èbÀs
((*Ì,
¨gc
,
ívc
);

335 
cuºít
->
brk
 = 
ex
.
a_bss
 +

336 (
cuºít
->
íd_d©a
 = 
ex
.
a_d©a
 +

337 (
cuºít
->
íd_code
 = 
ex
.
a_ãxt
));

338 
cuºít
->
°¨t_°ack
 = 
p
 & 0xfffff000;

339 
cuºít
->
euid
 = 
e_uid
;

340 
cuºít
->
egid
 = 
e_gid
;

341 
i
 = 
ex
.
a_ãxt
+ex.
a_d©a
;

342 
i
&0xfff)

343 
	`put_fs_byã
(0,(*Ë(
i
++));

344 
eù
[0] = 
ex
.
a_íåy
;

345 
eù
[3] = 
p
;

347 
exec_îr‹2
:

348 
	`ùut
(
öode
);

349 
exec_îr‹1
:

350 
i
=0 ; i<
MAX_ARG_PAGES
 ; i++)

351 
	`‰ì_∑ge
(
∑ge
[
i
]);

352 (
ªtvÆ
);

353 
	}
}

	@fs/fcntl.c

7 
	~<°rög.h
>

8 
	~<î∫o.h
>

9 
	~<löux/sched.h
>

10 
	~<löux/kî√l.h
>

11 
	~<asm/£gmít.h
>

13 
	~<f˙é.h
>

14 
	~<sys/°©.h
>

16 
sys_˛o£
(
fd
);

18 
	$dupfd
(
fd
, 
¨g
)

20 i‡(
fd
 >
NR_OPEN
 || !
cuºít
->
fûp
[fd])

21  -
EBADF
;

22 i‡(
¨g
 >
NR_OPEN
)

23  -
EINVAL
;

24 
¨g
 < 
NR_OPEN
)

25 i‡(
cuºít
->
fûp
[
¨g
])

26 
¨g
++;

29 i‡(
¨g
 >
NR_OPEN
)

30  -
EMFILE
;

31 
cuºít
->
˛o£_⁄_exec
 &~(1<<
¨g
);

32 (
cuºít
->
fûp
[
¨g
] = cuºít->fûp[
fd
])->
f_cou¡
++;

33  
¨g
;

34 
	}
}

36 
	$sys_dup2
(
ﬁdfd
, 
√wfd
)

38 
	`sys_˛o£
(
√wfd
);

39  
	`dupfd
(
ﬁdfd
,
√wfd
);

40 
	}
}

42 
	$sys_dup
(
fûdes
)

44  
	`dupfd
(
fûdes
,0);

45 
	}
}

47 
	$sys_f˙é
(
fd
, 
cmd
, 
¨g
)

49 
fûe
 * 
fûp
;

51 i‡(
fd
 >
NR_OPEN
 || !(
fûp
 = 
cuºít
->filp[fd]))

52  -
EBADF
;

53 
cmd
) {

54 
F_DUPFD
:

55  
	`dupfd
(
fd
,
¨g
);

56 
F_GETFD
:

57  (
cuºít
->
˛o£_⁄_exec
>>
fd
)&1;

58 
F_SETFD
:

59 i‡(
¨g
&1)

60 
cuºít
->
˛o£_⁄_exec
 |(1<<
fd
);

62 
cuºít
->
˛o£_⁄_exec
 &~(1<<
fd
);

64 
F_GETFL
:

65  
fûp
->
f_Êags
;

66 
F_SETFL
:

67 
fûp
->
f_Êags
 &~(
O_APPEND
 | 
O_NONBLOCK
);

68 
fûp
->
f_Êags
 |
¨g
 & (
O_APPEND
 | 
O_NONBLOCK
);

70 
F_GETLK
: 
F_SETLK
: 
F_SETLKW
:

75 
	}
}

	@fs/file_dev.c

7 
	~<î∫o.h
>

8 
	~<f˙é.h
>

10 
	~<löux/sched.h
>

11 
	~<löux/kî√l.h
>

12 
	~<asm/£gmít.h
>

14 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

15 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

17 
	$fûe_ªad
(
m_öode
 * 
öode
, 
fûe
 * 
fûp
, * 
buf
, 
cou¡
)

19 
À·
,
ch¨s
,
ƒ
;

20 
buf„r_hód
 * 
bh
;

22 i‡((
À·
=
cou¡
)<=0)

24 
À·
) {

25 i‡(
ƒ
 = 
	`bm≠
(
öode
,(
fûp
->
f_pos
)/
BLOCK_SIZE
)) {

26 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,
ƒ
)))

29 
bh
 = 
NULL
;

30 
ƒ
 = 
fûp
->
f_pos
 % 
BLOCK_SIZE
;

31 
ch¨s
 = 
	`MIN
–
BLOCK_SIZE
-
ƒ
 , 
À·
 );

32 
fûp
->
f_pos
 +
ch¨s
;

33 
À·
 -
ch¨s
;

34 i‡(
bh
) {

35 * 
p
 = 
ƒ
 + 
bh
->
b_d©a
;

36 
ch¨s
-->0)

37 
	`put_fs_byã
(*(
p
++),
buf
++);

38 
	`bªl£
(
bh
);

40 
ch¨s
-->0)

41 
	`put_fs_byã
(0,
buf
++);

44 
öode
->
i_©ime
 = 
CURRENT_TIME
;

45  (
cou¡
-
À·
)?(cou¡-À·):-
ERROR
;

46 
	}
}

48 
	$fûe_wrôe
(
m_öode
 * 
öode
, 
fûe
 * 
fûp
, * 
buf
, 
cou¡
)

50 
off_t
 
pos
;

51 
block
,
c
;

52 
buf„r_hód
 * 
bh
;

53 * 
p
;

54 
i
=0;

60 i‡(
fûp
->
f_Êags
 & 
O_APPEND
)

61 
pos
 = 
öode
->
i_size
;

63 
pos
 = 
fûp
->
f_pos
;

64 
i
<
cou¡
) {

65 i‡(!(
block
 = 
	`¸óã_block
(
öode
,
pos
/
BLOCK_SIZE
)))

67 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,
block
)))

69 
c
 = 
pos
 % 
BLOCK_SIZE
;

70 
p
 = 
c
 + 
bh
->
b_d©a
;

71 
bh
->
b_dút
 = 1;

72 
c
 = 
BLOCK_SIZE
-c;

73 i‡(
c
 > 
cou¡
-
i
) c = count-i;

74 
pos
 +
c
;

75 i‡(
pos
 > 
öode
->
i_size
) {

76 
öode
->
i_size
 = 
pos
;

77 
öode
->
i_dút
 = 1;

79 
i
 +
c
;

80 
c
-->0)

81 *(
p
++Ë
	`gë_fs_byã
(
buf
++);

82 
	`bªl£
(
bh
);

84 
öode
->
i_mtime
 = 
CURRENT_TIME
;

85 i‡(!(
fûp
->
f_Êags
 & 
O_APPEND
)) {

86 
fûp
->
f_pos
 = 
pos
;

87 
öode
->
i_˘ime
 = 
CURRENT_TIME
;

89  (
i
?i:-1);

90 
	}
}

	@fs/file_table.c

7 
	~<löux/fs.h
>

9 
fûe
 
	gfûe_èbÀ
[
NR_FILE
];

	@fs/inode.c

7 
	~<°rög.h
>

8 
	~<sys/°©.h
>

10 
	~<löux/sched.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/mm.h
>

13 
	~<asm/sy°em.h
>

15 
m_öode
 
	göode_èbÀ
[
NR_INODE
]={{0,},};

17 
ªad_öode
(
m_öode
 * 
öode
);

18 
wrôe_öode
(
m_öode
 * 
öode
);

20 
ölöe
 
	$waô_⁄_öode
(
m_öode
 * 
öode
)

22 
	`˛i
();

23 
öode
->
i_lock
)

24 
	`¶ìp_⁄
(&
öode
->
i_waô
);

25 
	`°i
();

26 
	}
}

28 
ölöe
 
	$lock_öode
(
m_öode
 * 
öode
)

30 
	`˛i
();

31 
öode
->
i_lock
)

32 
	`¶ìp_⁄
(&
öode
->
i_waô
);

33 
öode
->
i_lock
=1;

34 
	`°i
();

35 
	}
}

37 
ölöe
 
	$u∆ock_öode
(
m_öode
 * 
öode
)

39 
öode
->
i_lock
=0;

40 
	`wake_up
(&
öode
->
i_waô
);

41 
	}
}

43 
	$övÆid©e_öodes
(
dev
)

45 
i
;

46 
m_öode
 * 
öode
;

48 
öode
 = 0+
öode_èbÀ
;

49 
i
=0 ; i<
NR_INODE
 ; i++,
öode
++) {

50 
	`waô_⁄_öode
(
öode
);

51 i‡(
öode
->
i_dev
 =
dev
) {

52 i‡(
öode
->
i_cou¡
)

53 
	`¥ötk
("inode in use onÑemoved disk\n\r");

54 
öode
->
i_dev
 = inode->
i_dút
 = 0;

57 
	}
}

59 
	$sync_öodes
()

61 
i
;

62 
m_öode
 * 
öode
;

64 
öode
 = 0+
öode_èbÀ
;

65 
i
=0 ; i<
NR_INODE
 ; i++,
öode
++) {

66 
	`waô_⁄_öode
(
öode
);

67 i‡(
öode
->
i_dút
 && !öode->
i_pùe
)

68 
	`wrôe_öode
(
öode
);

70 
	}
}

72 
	$_bm≠
(
m_öode
 * 
öode
,
block
,
¸óã
)

74 
buf„r_hód
 * 
bh
;

75 
i
;

77 i‡(
block
<0)

78 
	`∑nic
("_bmap: block<0");

79 i‡(
block
 >= 7+512+512*512)

80 
	`∑nic
("_bmap: block>big");

81 i‡(
block
<7) {

82 i‡(
¸óã
 && !
öode
->
i_z⁄e
[
block
])

83 i‡(
öode
->
i_z⁄e
[
block
]=
	`√w_block
(öode->
i_dev
)) {

84 
öode
->
i_˘ime
=
CURRENT_TIME
;

85 
öode
->
i_dút
=1;

87  
öode
->
i_z⁄e
[
block
];

89 
block
 -= 7;

90 i‡(
block
<512) {

91 i‡(
¸óã
 && !
öode
->
i_z⁄e
[7])

92 i‡(
öode
->
i_z⁄e
[7]=
	`√w_block
(öode->
i_dev
)) {

93 
öode
->
i_dút
=1;

94 
öode
->
i_˘ime
=
CURRENT_TIME
;

96 i‡(!
öode
->
i_z⁄e
[7])

98 i‡(!(
bh
 = 
	`bªad
(
öode
->
i_dev
,öode->
i_z⁄e
[7])))

100 
i
 = ((*Ë(
bh
->
b_d©a
))[
block
];

101 i‡(
¸óã
 && !
i
)

102 i‡(
i
=
	`√w_block
(
öode
->
i_dev
)) {

103 ((*Ë(
bh
->
b_d©a
))[
block
]=
i
;

104 
bh
->
b_dút
=1;

106 
	`bªl£
(
bh
);

107  
i
;

109 
block
 -= 512;

110 i‡(
¸óã
 && !
öode
->
i_z⁄e
[8])

111 i‡(
öode
->
i_z⁄e
[8]=
	`√w_block
(öode->
i_dev
)) {

112 
öode
->
i_dút
=1;

113 
öode
->
i_˘ime
=
CURRENT_TIME
;

115 i‡(!
öode
->
i_z⁄e
[8])

117 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,öode->
i_z⁄e
[8])))

119 
i
 = ((*)
bh
->
b_d©a
)[
block
>>9];

120 i‡(
¸óã
 && !
i
)

121 i‡(
i
=
	`√w_block
(
öode
->
i_dev
)) {

122 ((*Ë(
bh
->
b_d©a
))[
block
>>9]=
i
;

123 
bh
->
b_dút
=1;

125 
	`bªl£
(
bh
);

126 i‡(!
i
)

128 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,
i
)))

130 
i
 = ((*)
bh
->
b_d©a
)[
block
&511];

131 i‡(
¸óã
 && !
i
)

132 i‡(
i
=
	`√w_block
(
öode
->
i_dev
)) {

133 ((*Ë(
bh
->
b_d©a
))[
block
&511]=
i
;

134 
bh
->
b_dút
=1;

136 
	`bªl£
(
bh
);

137  
i
;

138 
	}
}

140 
	$bm≠
(
m_öode
 * 
öode
,
block
)

142  
	`_bm≠
(
öode
,
block
,0);

143 
	}
}

145 
	$¸óã_block
(
m_öode
 * 
öode
, 
block
)

147  
	`_bm≠
(
öode
,
block
,1);

148 
	}
}

150 
	$ùut
(
m_öode
 * 
öode
)

152 i‡(!
öode
)

154 
	`waô_⁄_öode
(
öode
);

155 i‡(!
öode
->
i_cou¡
)

156 
	`∑nic
("iput:ÅryingÅo free free inode");

157 i‡(
öode
->
i_pùe
) {

158 
	`wake_up
(&
öode
->
i_waô
);

159 i‡(--
öode
->
i_cou¡
)

161 
	`‰ì_∑ge
(
öode
->
i_size
);

162 
öode
->
i_cou¡
=0;

163 
öode
->
i_dút
=0;

164 
öode
->
i_pùe
=0;

167 i‡(!
öode
->
i_dev
) {

168 
öode
->
i_cou¡
--;

171 i‡(
	`S_ISBLK
(
öode
->
i_mode
)) {

172 
	`sync_dev
(
öode
->
i_z⁄e
[0]);

173 
	`waô_⁄_öode
(
öode
);

175 
ª≥©
:

176 i‡(
öode
->
i_cou¡
>1) {

177 
öode
->
i_cou¡
--;

180 i‡(!
öode
->
i_∆öks
) {

181 
	`åunˇã
(
öode
);

182 
	`‰ì_öode
(
öode
);

185 i‡(
öode
->
i_dút
) {

186 
	`wrôe_öode
(
öode
);

187 
	`waô_⁄_öode
(
öode
);

188 
ª≥©
;

190 
öode
->
i_cou¡
--;

192 
	}
}

194 
m_öode
 * 
	$gë_em±y_öode
()

196 
m_öode
 * 
öode
;

197 
m_öode
 * 
œ°_öode
 = 
öode_èbÀ
;

198 
i
;

201 
öode
 = 
NULL
;

202 
i
 = 
NR_INODE
; i ; i--) {

203 i‡(++
œ°_öode
 >
öode_èbÀ
 + 
NR_INODE
)

204 
œ°_öode
 = 
öode_èbÀ
;

205 i‡(!
œ°_öode
->
i_cou¡
) {

206 
öode
 = 
œ°_öode
;

207 i‡(!
öode
->
i_dút
 && !öode->
i_lock
)

211 i‡(!
öode
) {

212 
i
=0 ; i<
NR_INODE
 ; i++)

213 
	`¥ötk
("%04x: %6d\t",
öode_èbÀ
[
i
].
i_dev
,

214 
öode_èbÀ
[
i
].
i_num
);

215 
	`∑nic
("No free inodes in mem");

217 
	`waô_⁄_öode
(
öode
);

218 
öode
->
i_dút
) {

219 
	`wrôe_öode
(
öode
);

220 
	`waô_⁄_öode
(
öode
);

222 } 
öode
->
i_cou¡
);

223 
	`mem£t
(
öode
,0,(*inode));

224 
öode
->
i_cou¡
 = 1;

225  
öode
;

226 
	}
}

228 
m_öode
 * 
	$gë_pùe_öode
()

230 
m_öode
 * 
öode
;

232 i‡(!(
öode
 = 
	`gë_em±y_öode
()))

233  
NULL
;

234 i‡(!(
öode
->
i_size
=
	`gë_‰ì_∑ge
())) {

235 
öode
->
i_cou¡
 = 0;

236  
NULL
;

238 
öode
->
i_cou¡
 = 2;

239 
	`PIPE_HEAD
(*
öode
Ë
	`PIPE_TAIL
(*inode) = 0;

240 
öode
->
i_pùe
 = 1;

241  
öode
;

242 
	}
}

244 
m_öode
 * 
	$igë
(
dev
,
ƒ
)

246 
m_öode
 * 
öode
, * 
em±y
;

248 i‡(!
dev
)

249 
	`∑nic
("iget with dev==0");

250 
em±y
 = 
	`gë_em±y_öode
();

251 
öode
 = 
öode_èbÀ
;

252 
öode
 < 
NR_INODE
+
öode_èbÀ
) {

253 i‡(
öode
->
i_dev
 !
dev
 || inode->
i_num
 !
ƒ
) {

254 
öode
++;

257 
	`waô_⁄_öode
(
öode
);

258 i‡(
öode
->
i_dev
 !
dev
 || inode->
i_num
 !
ƒ
) {

259 
öode
 = 
öode_èbÀ
;

262 
öode
->
i_cou¡
++;

263 i‡(
öode
->
i_mou¡
) {

264 
i
;

266 
i
 = 0 ; i<
NR_SUPER
 ; i++)

267 i‡(
su≥r_block
[
i
].
s_imou¡
==
öode
)

269 i‡(
i
 >
NR_SUPER
) {

270 
	`¥ötk
("Mounted inode hasn't got sb\n");

271 i‡(
em±y
)

272 
	`ùut
(
em±y
);

273  
öode
;

275 
	`ùut
(
öode
);

276 
dev
 = 
su≥r_block
[
i
].
s_dev
;

277 
ƒ
 = 
ROOT_INO
;

278 
öode
 = 
öode_èbÀ
;

281 i‡(
em±y
)

282 
	`ùut
(
em±y
);

283  
öode
;

285 i‡(!
em±y
)

286  (
NULL
);

287 
öode
=
em±y
;

288 
öode
->
i_dev
 = 
dev
;

289 
öode
->
i_num
 = 
ƒ
;

290 
	`ªad_öode
(
öode
);

291  
öode
;

292 
	}
}

294 
	$ªad_öode
(
m_öode
 * 
öode
)

296 
su≥r_block
 * 
sb
;

297 
buf„r_hód
 * 
bh
;

298 
block
;

300 
	`lock_öode
(
öode
);

301 i‡(!(
sb
=
	`gë_su≥r
(
öode
->
i_dev
)))

302 
	`∑nic
("tryingÅoÑead inode without dev");

303 
block
 = 2 + 
sb
->
s_im≠_blocks
 + sb->
s_zm≠_blocks
 +

304 (
öode
->
i_num
-1)/
INODES_PER_BLOCK
;

305 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,
block
)))

306 
	`∑nic
("unableÅoÑead i-node block");

307 *(
d_öode
 *)
öode
 =

308 ((
d_öode
 *)
bh
->
b_d©a
)

309 [(
öode
->
i_num
-1)%
INODES_PER_BLOCK
];

310 
	`bªl£
(
bh
);

311 
	`u∆ock_öode
(
öode
);

312 
	}
}

314 
	$wrôe_öode
(
m_öode
 * 
öode
)

316 
su≥r_block
 * 
sb
;

317 
buf„r_hód
 * 
bh
;

318 
block
;

320 
	`lock_öode
(
öode
);

321 i‡(!
öode
->
i_dút
 || !öode->
i_dev
) {

322 
	`u∆ock_öode
(
öode
);

325 i‡(!(
sb
=
	`gë_su≥r
(
öode
->
i_dev
)))

326 
	`∑nic
("tryingÅo write inode without device");

327 
block
 = 2 + 
sb
->
s_im≠_blocks
 + sb->
s_zm≠_blocks
 +

328 (
öode
->
i_num
-1)/
INODES_PER_BLOCK
;

329 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,
block
)))

330 
	`∑nic
("unableÅoÑead i-node block");

331 ((
d_öode
 *)
bh
->
b_d©a
)

332 [(
öode
->
i_num
-1)%
INODES_PER_BLOCK
] =

333 *(
d_öode
 *)
öode
;

334 
bh
->
b_dút
=1;

335 
öode
->
i_dút
=0;

336 
	`bªl£
(
bh
);

337 
	`u∆ock_öode
(
öode
);

338 
	}
}

	@fs/ioctl.c

7 
	~<°rög.h
>

8 
	~<î∫o.h
>

9 
	~<sys/°©.h
>

11 
	~<löux/sched.h
>

13 
ây_io˘l
(
dev
, 
cmd
, 
¨g
);

15 (*
	tio˘l_±r
)(
	tdev
,
	tcmd
,
	t¨g
);

17 
	#NRDEVS
 (( (
io˘l_èbÀ
))/( (
io˘l_±r
)))

	)

19 
io˘l_±r
 
io˘l_èbÀ
[]={

20 
NULL
,

21 
NULL
,

22 
NULL
,

23 
NULL
,

24 
ây_io˘l
,

25 
ây_io˘l
,

26 
NULL
,

27 
NULL
};

30 
	$sys_io˘l
(
fd
, 
cmd
, 
¨g
)

32 
fûe
 * 
fûp
;

33 
dev
,
mode
;

35 i‡(
fd
 >
NR_OPEN
 || !(
fûp
 = 
cuºít
->filp[fd]))

36  -
EBADF
;

37 
mode
=
fûp
->
f_öode
->
i_mode
;

38 i‡(!
	`S_ISCHR
(
mode
Ë&& !
	`S_ISBLK
(mode))

39  -
EINVAL
;

40 
dev
 = 
fûp
->
f_öode
->
i_z⁄e
[0];

41 i‡(
	`MAJOR
(
dev
Ë>
NRDEVS
)

42  -
ENODEV
;

43 i‡(!
io˘l_èbÀ
[
	`MAJOR
(
dev
)])

44  -
ENOTTY
;

45  
io˘l_èbÀ
[
	`MAJOR
(
dev
)](dev,
cmd
,
¨g
);

46 
	}
}

	@fs/namei.c

11 
	~<löux/sched.h
>

12 
	~<löux/kî√l.h
>

13 
	~<asm/£gmít.h
>

15 
	~<°rög.h
>

16 
	~<f˙é.h
>

17 
	~<î∫o.h
>

18 
	~<c⁄°.h
>

19 
	~<sys/°©.h
>

21 
	#ACC_MODE
(
x
Ë("\004\002\006\377"[(x)&
O_ACCMODE
])

	)

29 
	#MAY_EXEC
 1

	)

30 
	#MAY_WRITE
 2

	)

31 
	#MAY_READ
 4

	)

40 
	$≥rmissi⁄
(
m_öode
 * 
öode
,
mask
)

42 
mode
 = 
öode
->
i_mode
;

45 i‡(
öode
->
i_dev
 && !öode->
i_∆öks
)

47 i‡(
cuºít
->
euid
==
öode
->
i_uid
)

48 
mode
 >>= 6;

49 i‡(
cuºít
->
egid
==
öode
->
i_gid
)

50 
mode
 >>= 3;

51 i‡(((
mode
 & 
mask
 & 0007Ë=maskË|| 
	`su£r
())

54 
	}
}

63 
	$m©ch
(
Àn
,c⁄° * 
«me
,
dú_íåy
 * 
de
)

65 
ßme
 
	`__asm__
("ax");

67 i‡(!
de
 || !de->
öode
 || 
Àn
 > 
NAME_LEN
)

69 i‡(
Àn
 < 
NAME_LEN
 && 
de
->
«me
[len])

71 
	`__asm__
("cld\n\t"

74 :"˜" (
ßme
)

75 :"0" (0),"S" ((Ë
«me
),"D" ((Ë
de
->«me),"c" (
Àn
)

77  
ßme
;

78 
	}
}

91 
buf„r_hód
 * 
	$föd_íåy
(
m_öode
 ** 
dú
,

92 c⁄° * 
«me
, 
«mñí
, 
dú_íåy
 ** 
ªs_dú
)

94 
íåõs
;

95 
block
,
i
;

96 
buf„r_hód
 * 
bh
;

97 
dú_íåy
 * 
de
;

98 
su≥r_block
 * 
sb
;

100 #ifde‡
NO_TRUNCATE


101 i‡(
«mñí
 > 
NAME_LEN
)

102  
NULL
;

104 i‡(
«mñí
 > 
NAME_LEN
)

105 
«mñí
 = 
NAME_LEN
;

107 
íåõs
 = (*
dú
)->
i_size
 / ( (
dú_íåy
));

108 *
ªs_dú
 = 
NULL
;

109 i‡(!
«mñí
)

110  
NULL
;

112 i‡(
«mñí
==2 && 
	`gë_fs_byã
(
«me
)=='.' && get_fs_byte(name+1)=='.') {

114 i‡((*
dú
Ë=
cuºít
->
roŸ
)

115 
«mñí
=1;

116 i‡((*
dú
)->
i_num
 =
ROOT_INO
) {

119 
sb
=
	`gë_su≥r
((*
dú
)->
i_dev
);

120 i‡(
sb
->
s_imou¡
) {

121 
	`ùut
(*
dú
);

122 (*
dú
)=
sb
->
s_imou¡
;

123 (*
dú
)->
i_cou¡
++;

127 i‡(!(
block
 = (*
dú
)->
i_z⁄e
[0]))

128  
NULL
;

129 i‡(!(
bh
 = 
	`bªad
((*
dú
)->
i_dev
,
block
)))

130  
NULL
;

131 
i
 = 0;

132 
de
 = (
dú_íåy
 *Ë
bh
->
b_d©a
;

133 
i
 < 
íåõs
) {

134 i‡((*)
de
 >
BLOCK_SIZE
+
bh
->
b_d©a
) {

135 
	`bªl£
(
bh
);

136 
bh
 = 
NULL
;

137 i‡(!(
block
 = 
	`bm≠
(*
dú
,
i
/
DIR_ENTRIES_PER_BLOCK
)) ||

138 !(
bh
 = 
	`bªad
((*
dú
)->
i_dev
,
block
))) {

139 
i
 +
DIR_ENTRIES_PER_BLOCK
;

142 
de
 = (
dú_íåy
 *Ë
bh
->
b_d©a
;

144 i‡(
	`m©ch
(
«mñí
,
«me
,
de
)) {

145 *
ªs_dú
 = 
de
;

146  
bh
;

148 
de
++;

149 
i
++;

151 
	`bªl£
(
bh
);

152  
NULL
;

153 
	}
}

165 
buf„r_hód
 * 
	$add_íåy
(
m_öode
 * 
dú
,

166 c⁄° * 
«me
, 
«mñí
, 
dú_íåy
 ** 
ªs_dú
)

168 
block
,
i
;

169 
buf„r_hód
 * 
bh
;

170 
dú_íåy
 * 
de
;

172 *
ªs_dú
 = 
NULL
;

173 #ifde‡
NO_TRUNCATE


174 i‡(
«mñí
 > 
NAME_LEN
)

175  
NULL
;

177 i‡(
«mñí
 > 
NAME_LEN
)

178 
«mñí
 = 
NAME_LEN
;

180 i‡(!
«mñí
)

181  
NULL
;

182 i‡(!(
block
 = 
dú
->
i_z⁄e
[0]))

183  
NULL
;

184 i‡(!(
bh
 = 
	`bªad
(
dú
->
i_dev
,
block
)))

185  
NULL
;

186 
i
 = 0;

187 
de
 = (
dú_íåy
 *Ë
bh
->
b_d©a
;

189 i‡((*)
de
 >
BLOCK_SIZE
+
bh
->
b_d©a
) {

190 
	`bªl£
(
bh
);

191 
bh
 = 
NULL
;

192 
block
 = 
	`¸óã_block
(
dú
,
i
/
DIR_ENTRIES_PER_BLOCK
);

193 i‡(!
block
)

194  
NULL
;

195 i‡(!(
bh
 = 
	`bªad
(
dú
->
i_dev
,
block
))) {

196 
i
 +
DIR_ENTRIES_PER_BLOCK
;

199 
de
 = (
dú_íåy
 *Ë
bh
->
b_d©a
;

201 i‡(
i
*(
dú_íåy
Ë>
dú
->
i_size
) {

202 
de
->
öode
=0;

203 
dú
->
i_size
 = (
i
+1)*(
dú_íåy
);

204 
dú
->
i_dút
 = 1;

205 
dú
->
i_˘ime
 = 
CURRENT_TIME
;

207 i‡(!
de
->
öode
) {

208 
dú
->
i_mtime
 = 
CURRENT_TIME
;

209 
i
=0; i < 
NAME_LEN
 ; i++)

210 
de
->
«me
[
i
]=(i<
«mñí
)?
	`gë_fs_byã
(name+i):0;

211 
bh
->
b_dút
 = 1;

212 *
ªs_dú
 = 
de
;

213  
bh
;

215 
de
++;

216 
i
++;

218 
	`bªl£
(
bh
);

219  
NULL
;

220 
	}
}

228 
m_öode
 * 
	$gë_dú
(c⁄° * 
∑th«me
)

230 
c
;

231 c⁄° * 
thi¢ame
;

232 
m_öode
 * 
öode
;

233 
buf„r_hód
 * 
bh
;

234 
«mñí
,
ör
,
idev
;

235 
dú_íåy
 * 
de
;

237 i‡(!
cuºít
->
roŸ
 || !cuºít->roŸ->
i_cou¡
)

238 
	`∑nic
("NoÑoot inode");

239 i‡(!
cuºít
->
pwd
 || !cuºít->pwd->
i_cou¡
)

240 
	`∑nic
("No cwd inode");

241 i‡((
c
=
	`gë_fs_byã
(
∑th«me
))=='/') {

242 
öode
 = 
cuºít
->
roŸ
;

243 
∑th«me
++;

244 } i‡(
c
)

245 
öode
 = 
cuºít
->
pwd
;

247  
NULL
;

248 
öode
->
i_cou¡
++;

250 
thi¢ame
 = 
∑th«me
;

251 i‡(!
	`S_ISDIR
(
öode
->
i_mode
Ë|| !
	`≥rmissi⁄
(öode,
MAY_EXEC
)) {

252 
	`ùut
(
öode
);

253  
NULL
;

255 
«mñí
=0;(
c
=
	`gë_fs_byã
(
∑th«me
++))&&(c!='/');namelen++)

257 i‡(!
c
)

258  
öode
;

259 i‡(!(
bh
 = 
	`föd_íåy
(&
öode
,
thi¢ame
,
«mñí
,&
de
))) {

260 
	`ùut
(
öode
);

261  
NULL
;

263 
ör
 = 
de
->
öode
;

264 
idev
 = 
öode
->
i_dev
;

265 
	`bªl£
(
bh
);

266 
	`ùut
(
öode
);

267 i‡(!(
öode
 = 
	`igë
(
idev
,
ör
)))

268  
NULL
;

270 
	}
}

278 
m_öode
 * 
	$dú_«mei
(c⁄° * 
∑th«me
,

279 * 
«mñí
, c⁄° ** 
«me
)

281 
c
;

282 c⁄° * 
ba£«me
;

283 
m_öode
 * 
dú
;

285 i‡(!(
dú
 = 
	`gë_dú
(
∑th«me
)))

286  
NULL
;

287 
ba£«me
 = 
∑th«me
;

288 
c
=
	`gë_fs_byã
(
∑th«me
++))

289 i‡(
c
=='/')

290 
ba£«me
=
∑th«me
;

291 *
«mñí
 = 
∑th«me
-
ba£«me
-1;

292 *
«me
 = 
ba£«me
;

293  
dú
;

294 
	}
}

303 
m_öode
 * 
	$«mei
(c⁄° * 
∑th«me
)

305 c⁄° * 
ba£«me
;

306 
ör
,
dev
,
«mñí
;

307 
m_öode
 * 
dú
;

308 
buf„r_hód
 * 
bh
;

309 
dú_íåy
 * 
de
;

311 i‡(!(
dú
 = 
	`dú_«mei
(
∑th«me
,&
«mñí
,&
ba£«me
)))

312  
NULL
;

313 i‡(!
«mñí
)

314  
dú
;

315 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

316 i‡(!
bh
) {

317 
	`ùut
(
dú
);

318  
NULL
;

320 
ör
 = 
de
->
öode
;

321 
dev
 = 
dú
->
i_dev
;

322 
	`bªl£
(
bh
);

323 
	`ùut
(
dú
);

324 
dú
=
	`igë
(
dev
,
ör
);

325 i‡(
dú
) {

326 
dú
->
i_©ime
=
CURRENT_TIME
;

327 
dú
->
i_dút
=1;

329  
dú
;

330 
	}
}

337 
	$›í_«mei
(c⁄° * 
∑th«me
, 
Êag
, 
mode
,

338 
m_öode
 ** 
ªs_öode
)

340 c⁄° * 
ba£«me
;

341 
ör
,
dev
,
«mñí
;

342 
m_öode
 * 
dú
, *
öode
;

343 
buf„r_hód
 * 
bh
;

344 
dú_íåy
 * 
de
;

346 i‡((
Êag
 & 
O_TRUNC
Ë&& !(Êag & 
O_ACCMODE
))

347 
Êag
 |
O_WRONLY
;

348 
mode
 &0777 & ~
cuºít
->
umask
;

349 
mode
 |
I_REGULAR
;

350 i‡(!(
dú
 = 
	`dú_«mei
(
∑th«me
,&
«mñí
,&
ba£«me
)))

351  -
ENOENT
;

352 i‡(!
«mñí
) {

353 i‡(!(
Êag
 & (
O_ACCMODE
|
O_CREAT
|
O_TRUNC
))) {

354 *
ªs_öode
=
dú
;

357 
	`ùut
(
dú
);

358  -
EISDIR
;

360 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

361 i‡(!
bh
) {

362 i‡(!(
Êag
 & 
O_CREAT
)) {

363 
	`ùut
(
dú
);

364  -
ENOENT
;

366 i‡(!
	`≥rmissi⁄
(
dú
,
MAY_WRITE
)) {

367 
	`ùut
(
dú
);

368  -
EACCES
;

370 
öode
 = 
	`√w_öode
(
dú
->
i_dev
);

371 i‡(!
öode
) {

372 
	`ùut
(
dú
);

373  -
ENOSPC
;

375 
öode
->
i_uid
 = 
cuºít
->
euid
;

376 
öode
->
i_mode
 = 
mode
;

377 
öode
->
i_dút
 = 1;

378 
bh
 = 
	`add_íåy
(
dú
,
ba£«me
,
«mñí
,&
de
);

379 i‡(!
bh
) {

380 
öode
->
i_∆öks
--;

381 
	`ùut
(
öode
);

382 
	`ùut
(
dú
);

383  -
ENOSPC
;

385 
de
->
öode
 = inode->
i_num
;

386 
bh
->
b_dút
 = 1;

387 
	`bªl£
(
bh
);

388 
	`ùut
(
dú
);

389 *
ªs_öode
 = 
öode
;

392 
ör
 = 
de
->
öode
;

393 
dev
 = 
dú
->
i_dev
;

394 
	`bªl£
(
bh
);

395 
	`ùut
(
dú
);

396 i‡(
Êag
 & 
O_EXCL
)

397  -
EEXIST
;

398 i‡(!(
öode
=
	`igë
(
dev
,
ör
)))

399  -
EACCES
;

400 i‡((
	`S_ISDIR
(
öode
->
i_mode
Ë&& (
Êag
 & 
O_ACCMODE
)) ||

401 !
	`≥rmissi⁄
(
öode
,
	`ACC_MODE
(
Êag
))) {

402 
	`ùut
(
öode
);

403  -
EPERM
;

405 
öode
->
i_©ime
 = 
CURRENT_TIME
;

406 i‡(
Êag
 & 
O_TRUNC
)

407 
	`åunˇã
(
öode
);

408 *
ªs_öode
 = 
öode
;

410 
	}
}

412 
	$sys_mknod
(c⁄° * 
fûíame
, 
mode
, 
dev
)

414 c⁄° * 
ba£«me
;

415 
«mñí
;

416 
m_öode
 * 
dú
, * 
öode
;

417 
buf„r_hód
 * 
bh
;

418 
dú_íåy
 * 
de
;

420 i‡(!
	`su£r
())

421  -
EPERM
;

422 i‡(!(
dú
 = 
	`dú_«mei
(
fûíame
,&
«mñí
,&
ba£«me
)))

423  -
ENOENT
;

424 i‡(!
«mñí
) {

425 
	`ùut
(
dú
);

426  -
ENOENT
;

428 i‡(!
	`≥rmissi⁄
(
dú
,
MAY_WRITE
)) {

429 
	`ùut
(
dú
);

430  -
EPERM
;

432 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

433 i‡(
bh
) {

434 
	`bªl£
(
bh
);

435 
	`ùut
(
dú
);

436  -
EEXIST
;

438 
öode
 = 
	`√w_öode
(
dú
->
i_dev
);

439 i‡(!
öode
) {

440 
	`ùut
(
dú
);

441  -
ENOSPC
;

443 
öode
->
i_mode
 = 
mode
;

444 i‡(
	`S_ISBLK
(
mode
Ë|| 
	`S_ISCHR
(mode))

445 
öode
->
i_z⁄e
[0] = 
dev
;

446 
öode
->
i_mtime
 = inode->
i_©ime
 = 
CURRENT_TIME
;

447 
öode
->
i_dút
 = 1;

448 
bh
 = 
	`add_íåy
(
dú
,
ba£«me
,
«mñí
,&
de
);

449 i‡(!
bh
) {

450 
	`ùut
(
dú
);

451 
öode
->
i_∆öks
=0;

452 
	`ùut
(
öode
);

453  -
ENOSPC
;

455 
de
->
öode
 = inode->
i_num
;

456 
bh
->
b_dút
 = 1;

457 
	`ùut
(
dú
);

458 
	`ùut
(
öode
);

459 
	`bªl£
(
bh
);

461 
	}
}

463 
	$sys_mkdú
(c⁄° * 
∑th«me
, 
mode
)

465 c⁄° * 
ba£«me
;

466 
«mñí
;

467 
m_öode
 * 
dú
, * 
öode
;

468 
buf„r_hód
 * 
bh
, *
dú_block
;

469 
dú_íåy
 * 
de
;

471 i‡(!
	`su£r
())

472  -
EPERM
;

473 i‡(!(
dú
 = 
	`dú_«mei
(
∑th«me
,&
«mñí
,&
ba£«me
)))

474  -
ENOENT
;

475 i‡(!
«mñí
) {

476 
	`ùut
(
dú
);

477  -
ENOENT
;

479 i‡(!
	`≥rmissi⁄
(
dú
,
MAY_WRITE
)) {

480 
	`ùut
(
dú
);

481  -
EPERM
;

483 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

484 i‡(
bh
) {

485 
	`bªl£
(
bh
);

486 
	`ùut
(
dú
);

487  -
EEXIST
;

489 
öode
 = 
	`√w_öode
(
dú
->
i_dev
);

490 i‡(!
öode
) {

491 
	`ùut
(
dú
);

492  -
ENOSPC
;

494 
öode
->
i_size
 = 32;

495 
öode
->
i_dút
 = 1;

496 
öode
->
i_mtime
 = inode->
i_©ime
 = 
CURRENT_TIME
;

497 i‡(!(
öode
->
i_z⁄e
[0]=
	`√w_block
(öode->
i_dev
))) {

498 
	`ùut
(
dú
);

499 
öode
->
i_∆öks
--;

500 
	`ùut
(
öode
);

501  -
ENOSPC
;

503 
öode
->
i_dút
 = 1;

504 i‡(!(
dú_block
=
	`bªad
(
öode
->
i_dev
,öode->
i_z⁄e
[0]))) {

505 
	`ùut
(
dú
);

506 
	`‰ì_block
(
öode
->
i_dev
,öode->
i_z⁄e
[0]);

507 
öode
->
i_∆öks
--;

508 
	`ùut
(
öode
);

509  -
ERROR
;

511 
de
 = (
dú_íåy
 *Ë
dú_block
->
b_d©a
;

512 
de
->
öode
=öode->
i_num
;

513 
	`°r˝y
(
de
->
«me
,".");

514 
de
++;

515 
de
->
öode
 = 
dú
->
i_num
;

516 
	`°r˝y
(
de
->
«me
,"..");

517 
öode
->
i_∆öks
 = 2;

518 
dú_block
->
b_dút
 = 1;

519 
	`bªl£
(
dú_block
);

520 
öode
->
i_mode
 = 
I_DIRECTORY
 | (
mode
 & 0777 & ~
cuºít
->
umask
);

521 
öode
->
i_dút
 = 1;

522 
bh
 = 
	`add_íåy
(
dú
,
ba£«me
,
«mñí
,&
de
);

523 i‡(!
bh
) {

524 
	`ùut
(
dú
);

525 
	`‰ì_block
(
öode
->
i_dev
,öode->
i_z⁄e
[0]);

526 
öode
->
i_∆öks
=0;

527 
	`ùut
(
öode
);

528  -
ENOSPC
;

530 
de
->
öode
 = inode->
i_num
;

531 
bh
->
b_dút
 = 1;

532 
dú
->
i_∆öks
++;

533 
dú
->
i_dút
 = 1;

534 
	`ùut
(
dú
);

535 
	`ùut
(
öode
);

536 
	`bªl£
(
bh
);

538 
	}
}

543 
	$em±y_dú
(
m_öode
 * 
öode
)

545 
ƒ
,
block
;

546 
Àn
;

547 
buf„r_hód
 * 
bh
;

548 
dú_íåy
 * 
de
;

550 
Àn
 = 
öode
->
i_size
 /  (
dú_íåy
);

551 i‡(
Àn
<2 || !
öode
->
i_z⁄e
[0] ||

552 !(
bh
=
	`bªad
(
öode
->
i_dev
,öode->
i_z⁄e
[0]))) {

553 
	`¥ötk
("w¨nög - bad dúe˘‹y o¿dev %04x\n",
öode
->
i_dev
);

556 
de
 = (
dú_íåy
 *Ë
bh
->
b_d©a
;

557 i‡(
de
[0].
öode
 !öode->
i_num
 || !de[1].inode ||

558 
	`°rcmp
(".",
de
[0].
«me
) || strcmp("..",de[1].name)) {

559 
	`¥ötk
("w¨nög - bad dúe˘‹y o¿dev %04x\n",
öode
->
i_dev
);

562 
ƒ
 = 2;

563 
de
 += 2;

564 
ƒ
<
Àn
) {

565 i‡((*Ë
de
 >(*Ë(
bh
->
b_d©a
+
BLOCK_SIZE
)) {

566 
	`bªl£
(
bh
);

567 
block
=
	`bm≠
(
öode
,
ƒ
/
DIR_ENTRIES_PER_BLOCK
);

568 i‡(!
block
) {

569 
ƒ
 +
DIR_ENTRIES_PER_BLOCK
;

572 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,
block
)))

574 
de
 = (
dú_íåy
 *Ë
bh
->
b_d©a
;

576 i‡(
de
->
öode
) {

577 
	`bªl£
(
bh
);

580 
de
++;

581 
ƒ
++;

583 
	`bªl£
(
bh
);

585 
	}
}

587 
	$sys_rmdú
(c⁄° * 
«me
)

589 c⁄° * 
ba£«me
;

590 
«mñí
;

591 
m_öode
 * 
dú
, * 
öode
;

592 
buf„r_hód
 * 
bh
;

593 
dú_íåy
 * 
de
;

595 i‡(!
	`su£r
())

596  -
EPERM
;

597 i‡(!(
dú
 = 
	`dú_«mei
(
«me
,&
«mñí
,&
ba£«me
)))

598  -
ENOENT
;

599 i‡(!
«mñí
) {

600 
	`ùut
(
dú
);

601  -
ENOENT
;

603 i‡(!
	`≥rmissi⁄
(
dú
,
MAY_WRITE
)) {

604 
	`ùut
(
dú
);

605  -
EPERM
;

607 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

608 i‡(!
bh
) {

609 
	`ùut
(
dú
);

610  -
ENOENT
;

612 i‡(!(
öode
 = 
	`igë
(
dú
->
i_dev
, 
de
->inode))) {

613 
	`ùut
(
dú
);

614 
	`bªl£
(
bh
);

615  -
EPERM
;

617 i‡((
dú
->
i_mode
 & 
S_ISVTX
Ë&& 
cuºít
->
euid
 &&

618 
öode
->
i_uid
 !
cuºít
->
euid
) {

619 
	`ùut
(
dú
);

620 
	`ùut
(
öode
);

621 
	`bªl£
(
bh
);

622  -
EPERM
;

624 i‡(
öode
->
i_dev
 !
dú
->i_dev || inode->
i_cou¡
>1) {

625 
	`ùut
(
dú
);

626 
	`ùut
(
öode
);

627 
	`bªl£
(
bh
);

628  -
EPERM
;

630 i‡(
öode
 =
dú
) {

631 
	`ùut
(
öode
);

632 
	`ùut
(
dú
);

633 
	`bªl£
(
bh
);

634  -
EPERM
;

636 i‡(!
	`S_ISDIR
(
öode
->
i_mode
)) {

637 
	`ùut
(
öode
);

638 
	`ùut
(
dú
);

639 
	`bªl£
(
bh
);

640  -
ENOTDIR
;

642 i‡(!
	`em±y_dú
(
öode
)) {

643 
	`ùut
(
öode
);

644 
	`ùut
(
dú
);

645 
	`bªl£
(
bh
);

646  -
ENOTEMPTY
;

648 i‡(
öode
->
i_∆öks
 != 2)

649 
	`¥ötk
("em±y dúe˘‹y ha†∆ök!=2 (%d)",
öode
->
i_∆öks
);

650 
de
->
öode
 = 0;

651 
bh
->
b_dút
 = 1;

652 
	`bªl£
(
bh
);

653 
öode
->
i_∆öks
=0;

654 
öode
->
i_dút
=1;

655 
dú
->
i_∆öks
--;

656 
dú
->
i_˘ime
 = dú->
i_mtime
 = 
CURRENT_TIME
;

657 
dú
->
i_dút
=1;

658 
	`ùut
(
dú
);

659 
	`ùut
(
öode
);

661 
	}
}

663 
	$sys_u∆ök
(c⁄° * 
«me
)

665 c⁄° * 
ba£«me
;

666 
«mñí
;

667 
m_öode
 * 
dú
, * 
öode
;

668 
buf„r_hód
 * 
bh
;

669 
dú_íåy
 * 
de
;

671 i‡(!(
dú
 = 
	`dú_«mei
(
«me
,&
«mñí
,&
ba£«me
)))

672  -
ENOENT
;

673 i‡(!
«mñí
) {

674 
	`ùut
(
dú
);

675  -
ENOENT
;

677 i‡(!
	`≥rmissi⁄
(
dú
,
MAY_WRITE
)) {

678 
	`ùut
(
dú
);

679  -
EPERM
;

681 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

682 i‡(!
bh
) {

683 
	`ùut
(
dú
);

684  -
ENOENT
;

686 i‡(!(
öode
 = 
	`igë
(
dú
->
i_dev
, 
de
->inode))) {

687 
	`ùut
(
dú
);

688 
	`bªl£
(
bh
);

689  -
ENOENT
;

691 i‡((
dú
->
i_mode
 & 
S_ISVTX
Ë&& !
	`su£r
() &&

692 
cuºít
->
euid
 !
öode
->
i_uid
 &&

693 
cuºít
->
euid
 !
dú
->
i_uid
) {

694 
	`ùut
(
dú
);

695 
	`ùut
(
öode
);

696 
	`bªl£
(
bh
);

697  -
EPERM
;

699 i‡(
	`S_ISDIR
(
öode
->
i_mode
)) {

700 
	`ùut
(
öode
);

701 
	`ùut
(
dú
);

702 
	`bªl£
(
bh
);

703  -
EPERM
;

705 i‡(!
öode
->
i_∆öks
) {

706 
	`¥ötk
("DeletingÇonexistent file (%04x:%d), %d\n",

707 
öode
->
i_dev
,öode->
i_num
,öode->
i_∆öks
);

708 
öode
->
i_∆öks
=1;

710 
de
->
öode
 = 0;

711 
bh
->
b_dút
 = 1;

712 
	`bªl£
(
bh
);

713 
öode
->
i_∆öks
--;

714 
öode
->
i_dút
 = 1;

715 
öode
->
i_˘ime
 = 
CURRENT_TIME
;

716 
	`ùut
(
öode
);

717 
	`ùut
(
dú
);

719 
	}
}

721 
	$sys_lök
(c⁄° * 
ﬁd«me
, c⁄° * 
√w«me
)

723 
dú_íåy
 * 
de
;

724 
m_öode
 * 
ﬁdöode
, * 
dú
;

725 
buf„r_hód
 * 
bh
;

726 c⁄° * 
ba£«me
;

727 
«mñí
;

729 
ﬁdöode
=
	`«mei
(
ﬁd«me
);

730 i‡(!
ﬁdöode
)

731  -
ENOENT
;

732 i‡(
	`S_ISDIR
(
ﬁdöode
->
i_mode
)) {

733 
	`ùut
(
ﬁdöode
);

734  -
EPERM
;

736 
dú
 = 
	`dú_«mei
(
√w«me
,&
«mñí
,&
ba£«me
);

737 i‡(!
dú
) {

738 
	`ùut
(
ﬁdöode
);

739  -
EACCES
;

741 i‡(!
«mñí
) {

742 
	`ùut
(
ﬁdöode
);

743 
	`ùut
(
dú
);

744  -
EPERM
;

746 i‡(
dú
->
i_dev
 !
ﬁdöode
->i_dev) {

747 
	`ùut
(
dú
);

748 
	`ùut
(
ﬁdöode
);

749  -
EXDEV
;

751 i‡(!
	`≥rmissi⁄
(
dú
,
MAY_WRITE
)) {

752 
	`ùut
(
dú
);

753 
	`ùut
(
ﬁdöode
);

754  -
EACCES
;

756 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

757 i‡(
bh
) {

758 
	`bªl£
(
bh
);

759 
	`ùut
(
dú
);

760 
	`ùut
(
ﬁdöode
);

761  -
EEXIST
;

763 
bh
 = 
	`add_íåy
(
dú
,
ba£«me
,
«mñí
,&
de
);

764 i‡(!
bh
) {

765 
	`ùut
(
dú
);

766 
	`ùut
(
ﬁdöode
);

767  -
ENOSPC
;

769 
de
->
öode
 = 
ﬁdöode
->
i_num
;

770 
bh
->
b_dút
 = 1;

771 
	`bªl£
(
bh
);

772 
	`ùut
(
dú
);

773 
ﬁdöode
->
i_∆öks
++;

774 
ﬁdöode
->
i_˘ime
 = 
CURRENT_TIME
;

775 
ﬁdöode
->
i_dút
 = 1;

776 
	`ùut
(
ﬁdöode
);

778 
	}
}

	@fs/open.c

7 
	~<°rög.h
>

8 
	~<î∫o.h
>

9 
	~<f˙é.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<utime.h
>

12 
	~<sys/°©.h
>

14 
	~<löux/sched.h
>

15 
	~<löux/ây.h
>

16 
	~<löux/kî√l.h
>

17 
	~<asm/£gmít.h
>

19 
	$sys_u°©
(
dev
, 
u°©
 * 
ubuf
)

21  -
ENOSYS
;

22 
	}
}

24 
	$sys_utime
(* 
fûíame
, 
utimbuf
 * 
times
)

26 
m_öode
 * 
öode
;

27 
a˘ime
,
modtime
;

29 i‡(!(
öode
=
	`«mei
(
fûíame
)))

30  -
ENOENT
;

31 i‡(
times
) {

32 
a˘ime
 = 
	`gë_fs_l⁄g
((*Ë&
times
->actime);

33 
modtime
 = 
	`gë_fs_l⁄g
((*Ë&
times
->modtime);

35 
a˘ime
 = 
modtime
 = 
CURRENT_TIME
;

36 
öode
->
i_©ime
 = 
a˘ime
;

37 
öode
->
i_mtime
 = 
modtime
;

38 
öode
->
i_dút
 = 1;

39 
	`ùut
(
öode
);

41 
	}
}

47 
	$sys_ac˚ss
(c⁄° * 
fûíame
,
mode
)

49 
m_öode
 * 
öode
;

50 
ªs
, 
i_mode
;

52 
mode
 &= 0007;

53 i‡(!(
öode
=
	`«mei
(
fûíame
)))

54  -
EACCES
;

55 
i_mode
 = 
ªs
 = 
öode
->i_mode & 0777;

56 
	`ùut
(
öode
);

57 i‡(
cuºít
->
uid
 =
öode
->
i_uid
)

58 
ªs
 >>= 6;

59 i‡(
cuºít
->
gid
 =
öode
->
i_gid
)

60 
ªs
 >>= 6;

61 i‡((
ªs
 & 0007 & 
mode
) == mode)

69 i‡((!
cuºít
->
uid
) &&

70 (!(
mode
 & 1Ë|| (
i_mode
 & 0111)))

72  -
EACCES
;

73 
	}
}

75 
	$sys_chdú
(c⁄° * 
fûíame
)

77 
m_öode
 * 
öode
;

79 i‡(!(
öode
 = 
	`«mei
(
fûíame
)))

80  -
ENOENT
;

81 i‡(!
	`S_ISDIR
(
öode
->
i_mode
)) {

82 
	`ùut
(
öode
);

83  -
ENOTDIR
;

85 
	`ùut
(
cuºít
->
pwd
);

86 
cuºít
->
pwd
 = 
öode
;

88 
	}
}

90 
	$sys_chroŸ
(c⁄° * 
fûíame
)

92 
m_öode
 * 
öode
;

94 i‡(!(
öode
=
	`«mei
(
fûíame
)))

95  -
ENOENT
;

96 i‡(!
	`S_ISDIR
(
öode
->
i_mode
)) {

97 
	`ùut
(
öode
);

98  -
ENOTDIR
;

100 
	`ùut
(
cuºít
->
roŸ
);

101 
cuºít
->
roŸ
 = 
öode
;

103 
	}
}

105 
	$sys_chmod
(c⁄° * 
fûíame
,
mode
)

107 
m_öode
 * 
öode
;

109 i‡(!(
öode
=
	`«mei
(
fûíame
)))

110  -
ENOENT
;

111 i‡((
cuºít
->
euid
 !
öode
->
i_uid
Ë&& !
	`su£r
()) {

112 
	`ùut
(
öode
);

113  -
EACCES
;

115 
öode
->
i_mode
 = (
mode
 & 07777) | (inode->i_mode & ~07777);

116 
öode
->
i_dút
 = 1;

117 
	`ùut
(
öode
);

119 
	}
}

121 
	$sys_chown
(c⁄° * 
fûíame
,
uid
,
gid
)

123 
m_öode
 * 
öode
;

125 i‡(!(
öode
=
	`«mei
(
fûíame
)))

126  -
ENOENT
;

127 i‡(!
	`su£r
()) {

128 
	`ùut
(
öode
);

129  -
EACCES
;

131 
öode
->
i_uid
=
uid
;

132 
öode
->
i_gid
=
gid
;

133 
öode
->
i_dút
=1;

134 
	`ùut
(
öode
);

136 
	}
}

138 
	$sys_›í
(c⁄° * 
fûíame
,
Êag
,
mode
)

140 
m_öode
 * 
öode
;

141 
fûe
 * 
f
;

142 
i
,
fd
;

144 
mode
 &0777 & ~
cuºít
->
umask
;

145 
fd
=0 ; fd<
NR_OPEN
 ; fd++)

146 i‡(!
cuºít
->
fûp
[
fd
])

148 i‡(
fd
>=
NR_OPEN
)

149  -
EINVAL
;

150 
cuºít
->
˛o£_⁄_exec
 &~(1<<
fd
);

151 
f
=0+
fûe_èbÀ
;

152 
i
=0 ; i<
NR_FILE
 ; i++,
f
++)

153 i‡(!
f
->
f_cou¡
) ;

154 i‡(
i
>=
NR_FILE
)

155  -
EINVAL
;

156 (
cuºít
->
fûp
[
fd
]=
f
)->
f_cou¡
++;

157 i‡((
i
=
	`›í_«mei
(
fûíame
,
Êag
,
mode
,&
öode
))<0) {

158 
cuºít
->
fûp
[
fd
]=
NULL
;

159 
f
->
f_cou¡
=0;

160  
i
;

163 i‡(
	`S_ISCHR
(
öode
->
i_mode
))

164 i‡(
	`MAJOR
(
öode
->
i_z⁄e
[0])==4) {

165 i‡(
cuºít
->
Àadî
 && cuºít->
ây
<0) {

166 
cuºít
->
ây
 = 
	`MINOR
(
öode
->
i_z⁄e
[0]);

167 
ây_èbÀ
[
cuºít
->
ây
].
pgΩ
 = current->pgrp;

169 } i‡(
	`MAJOR
(
öode
->
i_z⁄e
[0])==5)

170 i‡(
cuºít
->
ây
<0) {

171 
	`ùut
(
öode
);

172 
cuºít
->
fûp
[
fd
]=
NULL
;

173 
f
->
f_cou¡
=0;

174  -
EPERM
;

177 i‡(
	`S_ISBLK
(
öode
->
i_mode
))

178 
	`check_disk_ch™ge
(
öode
->
i_z⁄e
[0]);

179 
f
->
f_mode
 = 
öode
->
i_mode
;

180 
f
->
f_Êags
 = 
Êag
;

181 
f
->
f_cou¡
 = 1;

182 
f
->
f_öode
 = 
öode
;

183 
f
->
f_pos
 = 0;

184  (
fd
);

185 
	}
}

187 
	$sys_¸ót
(c⁄° * 
∑th«me
, 
mode
)

189  
	`sys_›í
(
∑th«me
, 
O_CREAT
 | 
O_TRUNC
, 
mode
);

190 
	}
}

192 
	$sys_˛o£
(
fd
)

194 
fûe
 * 
fûp
;

196 i‡(
fd
 >
NR_OPEN
)

197  -
EINVAL
;

198 
cuºít
->
˛o£_⁄_exec
 &~(1<<
fd
);

199 i‡(!(
fûp
 = 
cuºít
->fûp[
fd
]))

200  -
EINVAL
;

201 
cuºít
->
fûp
[
fd
] = 
NULL
;

202 i‡(
fûp
->
f_cou¡
 == 0)

203 
	`∑nic
("Close: file count is 0");

204 i‡(--
fûp
->
f_cou¡
)

206 
	`ùut
(
fûp
->
f_öode
);

208 
	}
}

	@fs/pipe.c

7 
	~<sig«l.h
>

9 
	~<löux/sched.h
>

10 
	~<löux/mm.h
>

11 
	~<asm/£gmít.h
>

13 
	$ªad_pùe
(
m_öode
 * 
öode
, * 
buf
, 
cou¡
)

15 
ch¨s
, 
size
, 
ªad
 = 0;

17 
cou¡
>0) {

18 !(
size
=
	`PIPE_SIZE
(*
öode
))) {

19 
	`wake_up
(&
öode
->
i_waô
);

20 i‡(
öode
->
i_cou¡
 != 2)

21  
ªad
;

22 
	`¶ìp_⁄
(&
öode
->
i_waô
);

24 
ch¨s
 = 
PAGE_SIZE
-
	`PIPE_TAIL
(*
öode
);

25 i‡(
ch¨s
 > 
cou¡
)

26 
ch¨s
 = 
cou¡
;

27 i‡(
ch¨s
 > 
size
)

28 
ch¨s
 = 
size
;

29 
cou¡
 -
ch¨s
;

30 
ªad
 +
ch¨s
;

31 
size
 = 
	`PIPE_TAIL
(*
öode
);

32 
	`PIPE_TAIL
(*
öode
Ë+
ch¨s
;

33 
	`PIPE_TAIL
(*
öode
Ë&(
PAGE_SIZE
-1);

34 
ch¨s
-->0)

35 
	`put_fs_byã
(((*)
öode
->
i_size
)[
size
++],
buf
++);

37 
	`wake_up
(&
öode
->
i_waô
);

38  
ªad
;

39 
	}
}

41 
	$wrôe_pùe
(
m_öode
 * 
öode
, * 
buf
, 
cou¡
)

43 
ch¨s
, 
size
, 
wrôãn
 = 0;

45 
cou¡
>0) {

46 !(
size
=(
PAGE_SIZE
-1)-
	`PIPE_SIZE
(*
öode
))) {

47 
	`wake_up
(&
öode
->
i_waô
);

48 i‡(
öode
->
i_cou¡
 != 2) {

49 
cuºít
->
sig«l
 |(1<<(
SIGPIPE
-1));

50  
wrôãn
?written:-1;

52 
	`¶ìp_⁄
(&
öode
->
i_waô
);

54 
ch¨s
 = 
PAGE_SIZE
-
	`PIPE_HEAD
(*
öode
);

55 i‡(
ch¨s
 > 
cou¡
)

56 
ch¨s
 = 
cou¡
;

57 i‡(
ch¨s
 > 
size
)

58 
ch¨s
 = 
size
;

59 
cou¡
 -
ch¨s
;

60 
wrôãn
 +
ch¨s
;

61 
size
 = 
	`PIPE_HEAD
(*
öode
);

62 
	`PIPE_HEAD
(*
öode
Ë+
ch¨s
;

63 
	`PIPE_HEAD
(*
öode
Ë&(
PAGE_SIZE
-1);

64 
ch¨s
-->0)

65 ((*)
öode
->
i_size
)[
size
++]=
	`gë_fs_byã
(
buf
++);

67 
	`wake_up
(&
öode
->
i_waô
);

68  
wrôãn
;

69 
	}
}

71 
	$sys_pùe
(* 
fûdes
)

73 
m_öode
 * 
öode
;

74 
fûe
 * 
f
[2];

75 
fd
[2];

76 
i
,
j
;

78 
j
=0;

79 
i
=0;
j
<2 && i<
NR_FILE
;i++)

80 i‡(!
fûe_èbÀ
[
i
].
f_cou¡
)

81 (
f
[
j
++]=
i
+
fûe_èbÀ
)->
f_cou¡
++;

82 i‡(
j
==1)

83 
f
[0]->
f_cou¡
=0;

84 i‡(
j
<2)

86 
j
=0;

87 
i
=0;
j
<2 && i<
NR_OPEN
;i++)

88 i‡(!
cuºít
->
fûp
[
i
]) {

89 
cuºít
->
fûp
[ 
fd
[
j
]=
i
 ] = 
f
[j];

90 
j
++;

92 i‡(
j
==1)

93 
cuºít
->
fûp
[
fd
[0]]=
NULL
;

94 i‡(
j
<2) {

95 
f
[0]->
f_cou¡
=f[1]->f_count=0;

98 i‡(!(
öode
=
	`gë_pùe_öode
())) {

99 
cuºít
->
fûp
[
fd
[0]] =

100 
cuºít
->
fûp
[
fd
[1]] = 
NULL
;

101 
f
[0]->
f_cou¡
 = f[1]->f_count = 0;

104 
f
[0]->
f_öode
 = f[1]->f_öodê
öode
;

105 
f
[0]->
f_pos
 = f[1]->f_pos = 0;

106 
f
[0]->
f_mode
 = 1;

107 
f
[1]->
f_mode
 = 2;

108 
	`put_fs_l⁄g
(
fd
[0],0+
fûdes
);

109 
	`put_fs_l⁄g
(
fd
[1],1+
fûdes
);

111 
	}
}

	@fs/read_write.c

7 
	~<sys/°©.h
>

8 
	~<î∫o.h
>

9 
	~<sys/ty≥s.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/sched.h
>

13 
	~<asm/£gmít.h
>

15 
rw_ch¨
(
rw
,
dev
, * 
buf
, 
cou¡
, 
off_t
 * 
pos
);

16 
ªad_pùe
(
m_öode
 * 
öode
, * 
buf
, 
cou¡
);

17 
wrôe_pùe
(
m_öode
 * 
öode
, * 
buf
, 
cou¡
);

18 
block_ªad
(
dev
, 
off_t
 * 
pos
, * 
buf
, 
cou¡
);

19 
block_wrôe
(
dev
, 
off_t
 * 
pos
, * 
buf
, 
cou¡
);

20 
fûe_ªad
(
m_öode
 * 
öode
, 
fûe
 * 
fûp
,

21 * 
buf
, 
cou¡
);

22 
fûe_wrôe
(
m_öode
 * 
öode
, 
fûe
 * 
fûp
,

23 * 
buf
, 
cou¡
);

25 
	$sys_l£ek
(
fd
,
off_t
 
off£t
, 
‹igö
)

27 
fûe
 * file;

28 
tmp
;

30 i‡(
fd
 >
NR_OPEN
 || !(
fûe
=
cuºít
->
fûp
[fd]Ë|| !(fûe->
f_öode
)

31 || !
	`IS_SEEKABLE
(
	`MAJOR
(
fûe
->
f_öode
->
i_dev
)))

32  -
EBADF
;

33 i‡(
fûe
->
f_öode
->
i_pùe
)

34  -
ESPIPE
;

35 
‹igö
) {

37 i‡(
off£t
<0Ë -
EINVAL
;

38 
fûe
->
f_pos
=
off£t
;

41 i‡(
fûe
->
f_pos
+
off£t
<0Ë -
EINVAL
;

42 
fûe
->
f_pos
 +
off£t
;

45 i‡((
tmp
=
fûe
->
f_öode
->
i_size
+
off£t
) < 0)

46  -
EINVAL
;

47 
fûe
->
f_pos
 = 
tmp
;

50  -
EINVAL
;

52  
fûe
->
f_pos
;

53 
	}
}

55 
	$sys_ªad
(
fd
,* 
buf
,
cou¡
)

57 
fûe
 * file;

58 
m_öode
 * 
öode
;

60 i‡(
fd
>=
NR_OPEN
 || 
cou¡
<0 || !(
fûe
=
cuºít
->
fûp
[fd]))

61  -
EINVAL
;

62 i‡(!
cou¡
)

64 
	`vîify_¨ó
(
buf
,
cou¡
);

65 
öode
 = 
fûe
->
f_öode
;

66 i‡(
öode
->
i_pùe
)

67  (
fûe
->
f_mode
&1)?
	`ªad_pùe
(
öode
,
buf
,
cou¡
):-
EIO
;

68 i‡(
	`S_ISCHR
(
öode
->
i_mode
))

69  
	`rw_ch¨
(
READ
,
öode
->
i_z⁄e
[0],
buf
,
cou¡
,&
fûe
->
f_pos
);

70 i‡(
	`S_ISBLK
(
öode
->
i_mode
))

71  
	`block_ªad
(
öode
->
i_z⁄e
[0],&
fûe
->
f_pos
,
buf
,
cou¡
);

72 i‡(
	`S_ISDIR
(
öode
->
i_mode
Ë|| 
	`S_ISREG
(inode->i_mode)) {

73 i‡(
cou¡
+
fûe
->
f_pos
 > 
öode
->
i_size
)

74 
cou¡
 = 
öode
->
i_size
 - 
fûe
->
f_pos
;

75 i‡(
cou¡
<=0)

77  
	`fûe_ªad
(
öode
,
fûe
,
buf
,
cou¡
);

79 
	`¥ötk
("(Ród)öode->i_mode=%06o\n\r",
öode
->
i_mode
);

80  -
EINVAL
;

81 
	}
}

83 
	$sys_wrôe
(
fd
,* 
buf
,
cou¡
)

85 
fûe
 * file;

86 
m_öode
 * 
öode
;

88 i‡(
fd
>=
NR_OPEN
 || 
cou¡
 <0 || !(
fûe
=
cuºít
->
fûp
[fd]))

89  -
EINVAL
;

90 i‡(!
cou¡
)

92 
öode
=
fûe
->
f_öode
;

93 i‡(
öode
->
i_pùe
)

94  (
fûe
->
f_mode
&2)?
	`wrôe_pùe
(
öode
,
buf
,
cou¡
):-
EIO
;

95 i‡(
	`S_ISCHR
(
öode
->
i_mode
))

96  
	`rw_ch¨
(
WRITE
,
öode
->
i_z⁄e
[0],
buf
,
cou¡
,&
fûe
->
f_pos
);

97 i‡(
	`S_ISBLK
(
öode
->
i_mode
))

98  
	`block_wrôe
(
öode
->
i_z⁄e
[0],&
fûe
->
f_pos
,
buf
,
cou¡
);

99 i‡(
	`S_ISREG
(
öode
->
i_mode
))

100  
	`fûe_wrôe
(
öode
,
fûe
,
buf
,
cou¡
);

101 
	`¥ötk
("(Wrôe)öode->i_mode=%06o\n\r",
öode
->
i_mode
);

102  -
EINVAL
;

103 
	}
}

	@fs/stat.c

7 
	~<î∫o.h
>

8 
	~<sys/°©.h
>

10 
	~<löux/fs.h
>

11 
	~<löux/sched.h
>

12 
	~<löux/kî√l.h
>

13 
	~<asm/£gmít.h
>

15 
	$˝_°©
(
m_öode
 * 
öode
, 
°©
 * 
°©buf
)

17 
°©
 
tmp
;

18 
i
;

20 
	`vîify_¨ó
(
°©buf
, (* statbuf));

21 
tmp
.
°_dev
 = 
öode
->
i_dev
;

22 
tmp
.
°_öo
 = 
öode
->
i_num
;

23 
tmp
.
°_mode
 = 
öode
->
i_mode
;

24 
tmp
.
°_∆ök
 = 
öode
->
i_∆öks
;

25 
tmp
.
°_uid
 = 
öode
->
i_uid
;

26 
tmp
.
°_gid
 = 
öode
->
i_gid
;

27 
tmp
.
°_rdev
 = 
öode
->
i_z⁄e
[0];

28 
tmp
.
°_size
 = 
öode
->
i_size
;

29 
tmp
.
°_©ime
 = 
öode
->
i_©ime
;

30 
tmp
.
°_mtime
 = 
öode
->
i_mtime
;

31 
tmp
.
°_˘ime
 = 
öode
->
i_˘ime
;

32 
i
=0 ; i< (
tmp
) ; i++)

33 
	`put_fs_byã
(((*Ë&
tmp
)[
i
],&((*Ë
°©buf
)[i]);

34 
	}
}

36 
	$sys_°©
(* 
fûíame
, 
°©
 * 
°©buf
)

38 
m_öode
 * 
öode
;

40 i‡(!(
öode
=
	`«mei
(
fûíame
)))

41  -
ENOENT
;

42 
	`˝_°©
(
öode
,
°©buf
);

43 
	`ùut
(
öode
);

45 
	}
}

47 
	$sys_f°©
(
fd
, 
°©
 * 
°©buf
)

49 
fûe
 * 
f
;

50 
m_öode
 * 
öode
;

52 i‡(
fd
 >
NR_OPEN
 || !(
f
=
cuºít
->
fûp
[fd]Ë|| !(
öode
=f->
f_öode
))

53  -
EBADF
;

54 
	`˝_°©
(
öode
,
°©buf
);

56 
	}
}

	@fs/super.c

10 
	~<löux/c⁄fig.h
>

11 
	~<löux/sched.h
>

12 
	~<löux/kî√l.h
>

13 
	~<asm/sy°em.h
>

15 
	~<î∫o.h
>

16 
	~<sys/°©.h
>

18 
sync_dev
(
dev
);

19 
waô_f‹_key¥ess
();

22 
	#£t_bô
(
bôƒ
,
addr
) ({ \

23 
__ªs
 
	`__asm__
("ax"); \

24 
	`__asm__
("bà%2,%3;£tb %%Æ":"˜" (
__ªs
):"a" (0),"r" (
bôƒ
),"m" (*(
addr
))); \

25 
__ªs
; })

	)

27 
su≥r_block
 
	gsu≥r_block
[
NR_SUPER
];

29 
	gROOT_DEV
 = 0;

31 
	$lock_su≥r
(
su≥r_block
 * 
sb
)

33 
	`˛i
();

34 
sb
->
s_lock
)

35 
	`¶ìp_⁄
(&(
sb
->
s_waô
));

36 
sb
->
s_lock
 = 1;

37 
	`°i
();

38 
	}
}

40 
	$‰ì_su≥r
(
su≥r_block
 * 
sb
)

42 
	`˛i
();

43 
sb
->
s_lock
 = 0;

44 
	`wake_up
(&(
sb
->
s_waô
));

45 
	`°i
();

46 
	}
}

48 
	$waô_⁄_su≥r
(
su≥r_block
 * 
sb
)

50 
	`˛i
();

51 
sb
->
s_lock
)

52 
	`¶ìp_⁄
(&(
sb
->
s_waô
));

53 
	`°i
();

54 
	}
}

56 
su≥r_block
 * 
	$gë_su≥r
(
dev
)

58 
su≥r_block
 * 
s
;

60 i‡(!
dev
)

61  
NULL
;

62 
s
 = 0+
su≥r_block
;

63 
s
 < 
NR_SUPER
+
su≥r_block
)

64 i‡(
s
->
s_dev
 =
dev
) {

65 
	`waô_⁄_su≥r
(
s
);

66 i‡(
s
->
s_dev
 =
dev
)

67  
s
;

68 
s
 = 0+
su≥r_block
;

70 
s
++;

71  
NULL
;

72 
	}
}

74 
	$put_su≥r
(
dev
)

76 
su≥r_block
 * 
sb
;

77 
m_öode
 * 
öode
;

78 
i
;

80 i‡(
dev
 =
ROOT_DEV
) {

81 
	`¥ötk
("root diskette changed:Örepare forármageddon\n\r");

84 i‡(!(
sb
 = 
	`gë_su≥r
(
dev
)))

86 i‡(
sb
->
s_imou¡
) {

87 
	`¥ötk
("Mounted disk changed -Åssk,Åssk\n\r");

90 
	`lock_su≥r
(
sb
);

91 
sb
->
s_dev
 = 0;

92 
i
=0;i<
I_MAP_SLOTS
;i++)

93 
	`bªl£
(
sb
->
s_im≠
[
i
]);

94 
i
=0;i<
Z_MAP_SLOTS
;i++)

95 
	`bªl£
(
sb
->
s_zm≠
[
i
]);

96 
	`‰ì_su≥r
(
sb
);

98 
	}
}

100 
su≥r_block
 * 
	$ªad_su≥r
(
dev
)

102 
su≥r_block
 * 
s
;

103 
buf„r_hód
 * 
bh
;

104 
i
,
block
;

106 i‡(!
dev
)

107  
NULL
;

108 
	`check_disk_ch™ge
(
dev
);

109 i‡(
s
 = 
	`gë_su≥r
(
dev
))

110  
s
;

111 
s
 = 0+
su≥r_block
 ;; s++) {

112 i‡(
s
 >
NR_SUPER
+
su≥r_block
)

113  
NULL
;

114 i‡(!
s
->
s_dev
)

117 
s
->
s_dev
 = 
dev
;

118 
s
->
s_isup
 = 
NULL
;

119 
s
->
s_imou¡
 = 
NULL
;

120 
s
->
s_time
 = 0;

121 
s
->
s_rd_⁄ly
 = 0;

122 
s
->
s_dút
 = 0;

123 
	`lock_su≥r
(
s
);

124 i‡(!(
bh
 = 
	`bªad
(
dev
,1))) {

125 
s
->
s_dev
=0;

126 
	`‰ì_su≥r
(
s
);

127  
NULL
;

129 *((
d_su≥r_block
 *Ë
s
) =

130 *((
d_su≥r_block
 *Ë
bh
->
b_d©a
);

131 
	`bªl£
(
bh
);

132 i‡(
s
->
s_magic
 !
SUPER_MAGIC
) {

133 
s
->
s_dev
 = 0;

134 
	`‰ì_su≥r
(
s
);

135  
NULL
;

137 
i
=0;i<
I_MAP_SLOTS
;i++)

138 
s
->
s_im≠
[
i
] = 
NULL
;

139 
i
=0;i<
Z_MAP_SLOTS
;i++)

140 
s
->
s_zm≠
[
i
] = 
NULL
;

141 
block
=2;

142 
i
=0 ; i < 
s
->
s_im≠_blocks
 ; i++)

143 i‡(
s
->
s_im≠
[
i
]=
	`bªad
(
dev
,
block
))

144 
block
++;

147 
i
=0 ; i < 
s
->
s_zm≠_blocks
 ; i++)

148 i‡(
s
->
s_zm≠
[
i
]=
	`bªad
(
dev
,
block
))

149 
block
++;

152 i‡(
block
 !2+
s
->
s_im≠_blocks
+s->
s_zm≠_blocks
) {

153 
i
=0;i<
I_MAP_SLOTS
;i++)

154 
	`bªl£
(
s
->
s_im≠
[
i
]);

155 
i
=0;i<
Z_MAP_SLOTS
;i++)

156 
	`bªl£
(
s
->
s_zm≠
[
i
]);

157 
s
->
s_dev
=0;

158 
	`‰ì_su≥r
(
s
);

159  
NULL
;

161 
s
->
s_im≠
[0]->
b_d©a
[0] |= 1;

162 
s
->
s_zm≠
[0]->
b_d©a
[0] |= 1;

163 
	`‰ì_su≥r
(
s
);

164  
s
;

165 
	}
}

167 
	$sys_umou¡
(* 
dev_«me
)

169 
m_öode
 * 
öode
;

170 
su≥r_block
 * 
sb
;

171 
dev
;

173 i‡(!(
öode
=
	`«mei
(
dev_«me
)))

174  -
ENOENT
;

175 
dev
 = 
öode
->
i_z⁄e
[0];

176 i‡(!
	`S_ISBLK
(
öode
->
i_mode
)) {

177 
	`ùut
(
öode
);

178  -
ENOTBLK
;

180 
	`ùut
(
öode
);

181 i‡(
dev
==
ROOT_DEV
)

182  -
EBUSY
;

183 i‡(!(
sb
=
	`gë_su≥r
(
dev
)Ë|| !(sb->
s_imou¡
))

184  -
ENOENT
;

185 i‡(!
sb
->
s_imou¡
->
i_mou¡
)

186 
	`¥ötk
("Mounted inode has i_mount=0\n");

187 
öode
=
öode_èbÀ
+0 ; inode<öode_èbÀ+
NR_INODE
 ; inode++)

188 i‡(
öode
->
i_dev
==
dev
 && inode->
i_cou¡
)

189  -
EBUSY
;

190 
sb
->
s_imou¡
->
i_mou¡
=0;

191 
	`ùut
(
sb
->
s_imou¡
);

192 
sb
->
s_imou¡
 = 
NULL
;

193 
	`ùut
(
sb
->
s_isup
);

194 
sb
->
s_isup
 = 
NULL
;

195 
	`put_su≥r
(
dev
);

196 
	`sync_dev
(
dev
);

198 
	}
}

200 
	$sys_mou¡
(* 
dev_«me
, * 
dú_«me
, 
rw_Êag
)

202 
m_öode
 * 
dev_i
, * 
dú_i
;

203 
su≥r_block
 * 
sb
;

204 
dev
;

206 i‡(!(
dev_i
=
	`«mei
(
dev_«me
)))

207  -
ENOENT
;

208 
dev
 = 
dev_i
->
i_z⁄e
[0];

209 i‡(!
	`S_ISBLK
(
dev_i
->
i_mode
)) {

210 
	`ùut
(
dev_i
);

211  -
EPERM
;

213 
	`ùut
(
dev_i
);

214 i‡(!(
dú_i
=
	`«mei
(
dú_«me
)))

215  -
ENOENT
;

216 i‡(
dú_i
->
i_cou¡
 !1 || dú_i->
i_num
 =
ROOT_INO
) {

217 
	`ùut
(
dú_i
);

218  -
EBUSY
;

220 i‡(!
	`S_ISDIR
(
dú_i
->
i_mode
)) {

221 
	`ùut
(
dú_i
);

222  -
EPERM
;

224 i‡(!(
sb
=
	`ªad_su≥r
(
dev
))) {

225 
	`ùut
(
dú_i
);

226  -
EBUSY
;

228 i‡(
sb
->
s_imou¡
) {

229 
	`ùut
(
dú_i
);

230  -
EBUSY
;

232 i‡(
dú_i
->
i_mou¡
) {

233 
	`ùut
(
dú_i
);

234  -
EPERM
;

236 
sb
->
s_imou¡
=
dú_i
;

237 
dú_i
->
i_mou¡
=1;

238 
dú_i
->
i_dút
=1;

240 
	}
}

242 
	$mou¡_roŸ
()

244 
i
,
‰ì
;

245 
su≥r_block
 * 
p
;

246 
m_öode
 * 
mi
;

248 i‡(32 ! (
d_öode
))

249 
	`∑nic
("bad i-node size");

250 
i
=0;i<
NR_FILE
;i++)

251 
fûe_èbÀ
[
i
].
f_cou¡
=0;

252 i‡(
	`MAJOR
(
ROOT_DEV
) == 2) {

253 
	`¥ötk
("InsertÑoot floppyándÖress ENTER");

254 
	`waô_f‹_key¥ess
();

256 
p
 = &
su≥r_block
[0] ;Ö < &su≥r_block[
NR_SUPER
] ;Ö++) {

257 
p
->
s_dev
 = 0;

258 
p
->
s_lock
 = 0;

259 
p
->
s_waô
 = 
NULL
;

261 i‡(!(
p
=
	`ªad_su≥r
(
ROOT_DEV
)))

262 
	`∑nic
("UnableÅo mountÑoot");

263 i‡(!(
mi
=
	`igë
(
ROOT_DEV
,
ROOT_INO
)))

264 
	`∑nic
("UnableÅoÑeadÑoot i-node");

265 
mi
->
i_cou¡
 += 3 ;

266 
p
->
s_isup
 =Ö->
s_imou¡
 = 
mi
;

267 
cuºít
->
pwd
 = 
mi
;

268 
cuºít
->
roŸ
 = 
mi
;

269 
‰ì
=0;

270 
i
=
p
->
s_nz⁄es
;

271 -- 
i
 >= 0)

272 i‡(!
	`£t_bô
(
i
&8191,
p
->
s_zm≠
[i>>13]->
b_d©a
))

273 
‰ì
++;

274 
	`¥ötk
("%d/%d fªêblocks\n\r",
‰ì
,
p
->
s_nz⁄es
);

275 
‰ì
=0;

276 
i
=
p
->
s_nöodes
+1;

277 -- 
i
 >= 0)

278 i‡(!
	`£t_bô
(
i
&8191,
p
->
s_im≠
[i>>13]->
b_d©a
))

279 
‰ì
++;

280 
	`¥ötk
("%d/%d fªêöodes\n\r",
‰ì
,
p
->
s_nöodes
);

281 
	}
}

	@fs/truncate.c

7 
	~<löux/sched.h
>

9 
	~<sys/°©.h
>

11 
	$‰ì_öd
(
dev
,
block
)

13 
buf„r_hód
 * 
bh
;

14 * 
p
;

15 
i
;

17 i‡(!
block
)

19 i‡(
bh
=
	`bªad
(
dev
,
block
)) {

20 
p
 = (*Ë
bh
->
b_d©a
;

21 
i
=0;i<512;i++,
p
++)

22 i‡(*
p
)

23 
	`‰ì_block
(
dev
,*
p
);

24 
	`bªl£
(
bh
);

26 
	`‰ì_block
(
dev
,
block
);

27 
	}
}

29 
	$‰ì_död
(
dev
,
block
)

31 
buf„r_hód
 * 
bh
;

32 * 
p
;

33 
i
;

35 i‡(!
block
)

37 i‡(
bh
=
	`bªad
(
dev
,
block
)) {

38 
p
 = (*Ë
bh
->
b_d©a
;

39 
i
=0;i<512;i++,
p
++)

40 i‡(*
p
)

41 
	`‰ì_öd
(
dev
,*
p
);

42 
	`bªl£
(
bh
);

44 
	`‰ì_block
(
dev
,
block
);

45 
	}
}

47 
	$åunˇã
(
m_öode
 * 
öode
)

49 
i
;

51 i‡(!(
	`S_ISREG
(
öode
->
i_mode
Ë|| 
	`S_ISDIR
(inode->i_mode)))

53 
i
=0;i<7;i++)

54 i‡(
öode
->
i_z⁄e
[
i
]) {

55 
	`‰ì_block
(
öode
->
i_dev
,öode->
i_z⁄e
[
i
]);

56 
öode
->
i_z⁄e
[
i
]=0;

58 
	`‰ì_öd
(
öode
->
i_dev
,öode->
i_z⁄e
[7]);

59 
	`‰ì_död
(
öode
->
i_dev
,öode->
i_z⁄e
[8]);

60 
öode
->
i_z⁄e
[7] = inode->i_zone[8] = 0;

61 
öode
->
i_size
 = 0;

62 
öode
->
i_dút
 = 1;

63 
öode
->
i_mtime
 = inode->
i_˘ime
 = 
CURRENT_TIME
;

64 
	}
}

	@include/a.out.h

1 #i‚de‡
_A_OUT_H


2 
	#_A_OUT_H


	)

4 
	#__GNU_EXEC_MACROS__


	)

6 
	sexec
 {

7 
	ma_magic
;

8 
	ma_ãxt
;

9 
	ma_d©a
;

10 
	ma_bss
;

11 
	ma_syms
;

12 
	ma_íåy
;

13 
	ma_åsize
;

14 
	ma_drsize
;

17 #i‚de‡
N_MAGIC


18 
	#N_MAGIC
(
exec
Ë(”xec).
a_magic
)

	)

21 #i‚de‡
OMAGIC


23 
	#OMAGIC
 0407

	)

25 
	#NMAGIC
 0410

	)

27 
	#ZMAGIC
 0413

	)

30 #i‚de‡
N_BADMAG


31 
	#N_BADMAG
(
x
) \

32 (
	`N_MAGIC
(
x
Ë!
OMAGIC
 && N_MAGIC(xË!
NMAGIC
 \

33 && 
	`N_MAGIC
(
x
Ë!
ZMAGIC
)

	)

36 
	#_N_BADMAG
(
x
) \

37 (
	`N_MAGIC
(
x
Ë!
OMAGIC
 && N_MAGIC(xË!
NMAGIC
 \

38 && 
	`N_MAGIC
(
x
Ë!
ZMAGIC
)

	)

40 
	#_N_HDROFF
(
x
Ë(
SEGMENT_SIZE
 -  (
exec
))

	)

42 #i‚de‡
N_TXTOFF


43 
	#N_TXTOFF
(
x
) \

44 (
	`N_MAGIC
(
x
Ë=
ZMAGIC
 ? 
	`_N_HDROFF
((x)Ë+  (
exec
Ë:  (exec))

	)

47 #i‚de‡
N_DATOFF


48 
	#N_DATOFF
(
x
Ë(
	`N_TXTOFF
(xË+ (x).
a_ãxt
)

	)

51 #i‚de‡
N_TRELOFF


52 
	#N_TRELOFF
(
x
Ë(
	`N_DATOFF
(xË+ (x).
a_d©a
)

	)

55 #i‚de‡
N_DRELOFF


56 
	#N_DRELOFF
(
x
Ë(
	`N_TRELOFF
(xË+ (x).
a_åsize
)

	)

59 #i‚de‡
N_SYMOFF


60 
	#N_SYMOFF
(
x
Ë(
	`N_DRELOFF
(xË+ (x).
a_drsize
)

	)

63 #i‚de‡
N_STROFF


64 
	#N_STROFF
(
x
Ë(
	`N_SYMOFF
(xË+ (x).
a_syms
)

	)

68 #i‚de‡
N_TXTADDR


69 
	#N_TXTADDR
(
x
Ë0

	)

75 #i‡
deföed
(
vax
Ë|| deföed(
hp300
Ë|| deföed(
pyr
)

76 
	#SEGMENT_SIZE
 
PAGE_SIZE


	)

78 #ifdef 
hp300


79 
	#PAGE_SIZE
 4096

	)

81 #ifdef 
s⁄y


82 
	#SEGMENT_SIZE
 0x2000

	)

84 #ifde‡
is68k


85 
	#SEGMENT_SIZE
 0x20000

	)

87 #i‡
deföed
(
m68k
Ë&& deföed(
PORTAR
)

88 
	#PAGE_SIZE
 0x400

	)

89 
	#SEGMENT_SIZE
 
PAGE_SIZE


	)

92 
	#PAGE_SIZE
 4096

	)

93 
	#SEGMENT_SIZE
 1024

	)

95 
	#_N_SEGMENT_ROUND
(
x
Ë(((xË+ 
SEGMENT_SIZE
 - 1Ë& ~(SEGMENT_SIZE - 1))

	)

97 
	#_N_TXTENDADDR
(
x
Ë(
	`N_TXTADDR
(x)+(x).
a_ãxt
)

	)

99 #i‚de‡
N_DATADDR


100 
	#N_DATADDR
(
x
) \

101 (
	`N_MAGIC
(
x
)==
OMAGIC
? (
	`_N_TXTENDADDR
(x)) \

102 : (
	`_N_SEGMENT_ROUND
 (
	`_N_TXTENDADDR
(
x
))))

	)

106 #i‚de‡
N_BSSADDR


107 
	#N_BSSADDR
(
x
Ë(
	`N_DATADDR
(xË+ (x).
a_d©a
)

	)

110 #i‚de‡
N_NLIST_DECLARED


111 
	s∆i°
 {

113 *
	mn_«me
;

114 
∆i°
 *
	mn_√xt
;

115 
	mn_°rx
;

116 } 
	mn_un
;

117 
	mn_ty≥
;

118 
	mn_Ÿhî
;

119 
	mn_desc
;

120 
	mn_vÆue
;

124 #i‚de‡
N_UNDF


125 
	#N_UNDF
 0

	)

127 #i‚de‡
N_ABS


128 
	#N_ABS
 2

	)

130 #i‚de‡
N_TEXT


131 
	#N_TEXT
 4

	)

133 #i‚de‡
N_DATA


134 
	#N_DATA
 6

	)

136 #i‚de‡
N_BSS


137 
	#N_BSS
 8

	)

139 #i‚de‡
N_COMM


140 
	#N_COMM
 18

	)

142 #i‚de‡
N_FN


143 
	#N_FN
 15

	)

146 #i‚de‡
N_EXT


147 
	#N_EXT
 1

	)

149 #i‚de‡
N_TYPE


150 
	#N_TYPE
 036

	)

152 #i‚de‡
N_STAB


153 
	#N_STAB
 0340

	)

164 
	#N_INDR
 0xa

	)

178 
	#N_SETA
 0x14

	)

179 
	#N_SETT
 0x16

	)

180 
	#N_SETD
 0x18

	)

181 
	#N_SETB
 0x1A

	)

184 
	#N_SETV
 0x1C

	)

186 #i‚de‡
N_RELOCATION_INFO_DECLARED


193 
	sªloˇti⁄_öfo


196 
	mr_addªss
;

198 
	mr_symbﬁnum
:24;

202 
	mr_p¸ñ
:1;

205 
	mr_Àngth
:2;

212 
	mr_exã∫
:1;

215 
	mr_∑d
:4;

	@include/asm/io.h

1 
	#outb
(
vÆue
,
p‹t
) \

2 
	`__asm__
 ("outb %%Æ,%%dx"::"a" (
vÆue
),"d" (
p‹t
))

	)

5 
	#öb
(
p‹t
) ({ \

6 
_v
; \

7 
__asm__
 vﬁ©ûê("öb %%dx,%%Æ":"˜" (
_v
):"d" (
p‹t
)); \

8 
_v
; \

9 })

	)

11 
	#outb_p
(
vÆue
,
p‹t
) \

12 
	`__asm__
 ("outb %%al,%%dx\n" \

15 "1:"::"a" (
vÆue
),"d" (
p‹t
))

	)

17 
	#öb_p
(
p‹t
) ({ \

18 
_v
; \

19 
__asm__
 volatile ("inb %%dx,%%al\n" \

22 "1:":"˜" (
_v
):"d" (
p‹t
)); \

23 
_v
; \

24 })

	)

	@include/asm/memory.h

8 
	#mem˝y
(
de°
,
§c
,
n
) ({ \

9 * 
_ªs
 = 
de°
; \

10 
	`__asm__
 ("cld;rep;movsb" \

11 ::"D" (()(
_ªs
)),"S" (()(
§c
)),"c" ((Ë(
n
)) \

13 
_ªs
; \

14 })

	)

	@include/asm/segment.h

1 
ölöe
 
	$gë_fs_byã
(c⁄° * 
addr
)

3 
_v
;

5 
	`__asm__
 ("movb %%fs:%1,%0":"Ù" (
_v
):"m" (*
addr
));

6  
_v
;

7 
	}
}

9 
ölöe
 
	$gë_fs_w‹d
(c⁄° *
addr
)

11 
_v
;

13 
	`__asm__
 ("movw %%fs:%1,%0":"Ù" (
_v
):"m" (*
addr
));

14  
_v
;

15 
	}
}

17 
ölöe
 
	$gë_fs_l⁄g
(c⁄° *
addr
)

19 
_v
;

21 
	`__asm__
 ("mov»%%fs:%1,%0":"Ù" (
_v
):"m" (*
addr
)); \

22  
_v
;

23 
	}
}

25 
ölöe
 
	$put_fs_byã
(
vÆ
,*
addr
)

27 
	`__asm__
 ("movb %0,%%fs:%1"::"r" (
vÆ
),"m" (*
addr
));

28 
	}
}

30 
ölöe
 
	$put_fs_w‹d
(
vÆ
,* 
addr
)

32 
	`__asm__
 ("movw %0,%%fs:%1"::"r" (
vÆ
),"m" (*
addr
));

33 
	}
}

35 
ölöe
 
	$put_fs_l⁄g
(
vÆ
,* 
addr
)

37 
	`__asm__
 ("mov»%0,%%fs:%1"::"r" (
vÆ
),"m" (*
addr
));

38 
	}
}

47 
ölöe
 
	$gë_fs
()

49 
_v
;

50 
	`__asm__
("mov %%fs,%%ax":"˜" (
_v
):);

51  
_v
;

52 
	}
}

54 
ölöe
 
	$gë_ds
()

56 
_v
;

57 
	`__asm__
("mov %%ds,%%ax":"˜" (
_v
):);

58  
_v
;

59 
	}
}

61 
ölöe
 
	$£t_fs
(
vÆ
)

63 
	`__asm__
("mov %0,%%fs"::"a" ((Ë
vÆ
));

64 
	}
}

	@include/asm/system.h

1 
	#move_to_u£r_mode
() \

2 
	`__asm__
 ("movl %%esp,%%eax\n\t" \

14 :::"ax")

	)

16 
	#°i
(Ë
	`__asm__
 ("°i"::)

	)

17 
	#˛i
(Ë
	`__asm__
 ("˛i"::)

	)

18 
	#n›
(Ë
	`__asm__
 ("n›"::)

	)

20 
	#úë
(Ë
	`__asm__
 ("úë"::)

	)

22 
	#_£t_g©e
(
g©e_addr
,
ty≥
,
d∂
,
addr
) \

23 
	`__asm__
 ("movw %%dx,%%ax\n\t" \

28 : "i" ((Ë(0x8000+(
d∂
<<13)+(
ty≥
<<8))), \

29 "o" (*((*Ë(
g©e_addr
))), \

30 "o" (*(4+(*Ë(
g©e_addr
))), \

31 "d" ((*Ë(
addr
)),"a" (0x00080000))

	)

33 
	#£t_öå_g©e
(
n
,
addr
) \

34 
	`_£t_g©e
(&
idt
[
n
],14,0,
addr
)

	)

36 
	#£t_å≠_g©e
(
n
,
addr
) \

37 
	`_£t_g©e
(&
idt
[
n
],15,0,
addr
)

	)

39 
	#£t_sy°em_g©e
(
n
,
addr
) \

40 
	`_£t_g©e
(&
idt
[
n
],15,3,
addr
)

	)

42 
	#_£t_£g_desc
(
g©e_addr
,
ty≥
,
d∂
,
ba£
,
limô
) {\

43 *(
g©e_addr
Ë((
ba£
) & 0xff000000) | \

44 (((
ba£
) & 0x00ff0000)>>16) | \

45 ((
limô
) & 0xf0000) | \

46 ((
d∂
)<<13) | \

48 ((
ty≥
)<<8); \

49 *((
g©e_addr
)+1Ë(((
ba£
) & 0x0000ffff)<<16) | \

50 ((
limô
Ë& 0x0ffff); }

	)

52 
	#_£t_ts¶dt_desc
(
n
,
addr
,
ty≥
) \

53 
	`__asm__
 ("movw $104,%1\n\t" \

57 "movb $" 
ty≥
 ",%4\n\t" \

61 ::"a" (
addr
), "m" (*(
n
)), "m" (*(n+2)), "m" (*(n+4)), \

62 "m" (*(
n
+5)), "m" (*(n+6)), "m" (*(n+7)) \

63 )

	)

65 
	#£t_tss_desc
(
n
,
addr
Ë
	`_£t_ts¶dt_desc
(((*Ë“)),addr,"0x89")

	)

66 
	#£t_ldt_desc
(
n
,
addr
Ë
	`_£t_ts¶dt_desc
(((*Ë“)),addr,"0x82")

	)

	@include/const.h

1 #i‚de‡
_CONST_H


2 
	#_CONST_H


	)

4 
	#BUFFER_END
 0x200000

	)

6 
	#I_TYPE
 0170000

	)

7 
	#I_DIRECTORY
 0040000

	)

8 
	#I_REGULAR
 0100000

	)

9 
	#I_BLOCK_SPECIAL
 0060000

	)

10 
	#I_CHAR_SPECIAL
 0020000

	)

11 
	#I_NAMED_PIPE
 0010000

	)

12 
	#I_SET_UID_BIT
 0004000

	)

13 
	#I_SET_GID_BIT
 0002000

	)

	@include/ctype.h

1 #i‚de‡
_CTYPE_H


2 
	#_CTYPE_H


	)

4 
	#_U
 0x01

	)

5 
	#_L
 0x02

	)

6 
	#_D
 0x04

	)

7 
	#_C
 0x08

	)

8 
	#_P
 0x10

	)

9 
	#_S
 0x20

	)

10 
	#_X
 0x40

	)

11 
	#_SP
 0x80

	)

13 
_˘y≥
[];

14 
_˘mp
;

16 
	#iß um
(
c
Ë((
_˘y≥
+1)[c]&(
_U
|
_L
|
_D
))

	)

17 
	#ißÕha
(
c
Ë((
_˘y≥
+1)[c]&(
_U
|
_L
))

	)

18 
	#is˙ål
(
c
Ë((
_˘y≥
+1)[c]&(
_C
))

	)

19 
	#isdigô
(
c
Ë((
_˘y≥
+1)[c]&(
_D
))

	)

20 
	#isgøph
(
c
Ë((
_˘y≥
+1)[c]&(
_P
|
_U
|
_L
|
_D
))

	)

21 
	#i¶owî
(
c
Ë((
_˘y≥
+1)[c]&(
_L
))

	)

22 
	#i•röt
(
c
Ë((
_˘y≥
+1)[c]&(
_P
|
_U
|
_L
|
_D
|
_SP
))

	)

23 
	#i•un˘
(
c
Ë((
_˘y≥
+1)[c]&(
_P
))

	)

24 
	#is•a˚
(
c
Ë((
_˘y≥
+1)[c]&(
_S
))

	)

25 
	#isuµî
(
c
Ë((
_˘y≥
+1)[c]&(
_U
))

	)

26 
	#isxdigô
(
c
Ë((
_˘y≥
+1)[c]&(
_D
|
_X
))

	)

28 
	#ißscii
(
c
Ë(((Ëc)<=0x7f)

	)

29 
	#tﬂscii
(
c
Ë(((Ëc)&0x7f)

	)

31 
	#tﬁowî
(
c
Ë(
_˘mp
=c,
	`isuµî
(_˘mp)?_˘mp-('A'-'a'):_˘mp)

	)

32 
	#touµî
(
c
Ë(
_˘mp
=c,
	`i¶owî
(_˘mp)?_˘mp-('a'-'A'):_˘mp)

	)

	@include/errno.h

1 #i‚de‡
_ERRNO_H


2 
	#_ERRNO_H


	)

17 
î∫o
;

19 
	#ERROR
 99

	)

20 
	#EPERM
 1

	)

21 
	#ENOENT
 2

	)

22 
	#ESRCH
 3

	)

23 
	#EINTR
 4

	)

24 
	#EIO
 5

	)

25 
	#ENXIO
 6

	)

26 
	#E2BIG
 7

	)

27 
	#ENOEXEC
 8

	)

28 
	#EBADF
 9

	)

29 
	#ECHILD
 10

	)

30 
	#EAGAIN
 11

	)

31 
	#ENOMEM
 12

	)

32 
	#EACCES
 13

	)

33 
	#EFAULT
 14

	)

34 
	#ENOTBLK
 15

	)

35 
	#EBUSY
 16

	)

36 
	#EEXIST
 17

	)

37 
	#EXDEV
 18

	)

38 
	#ENODEV
 19

	)

39 
	#ENOTDIR
 20

	)

40 
	#EISDIR
 21

	)

41 
	#EINVAL
 22

	)

42 
	#ENFILE
 23

	)

43 
	#EMFILE
 24

	)

44 
	#ENOTTY
 25

	)

45 
	#ETXTBSY
 26

	)

46 
	#EFBIG
 27

	)

47 
	#ENOSPC
 28

	)

48 
	#ESPIPE
 29

	)

49 
	#EROFS
 30

	)

50 
	#EMLINK
 31

	)

51 
	#EPIPE
 32

	)

52 
	#EDOM
 33

	)

53 
	#ERANGE
 34

	)

54 
	#EDEADLK
 35

	)

55 
	#ENAMETOOLONG
 36

	)

56 
	#ENOLCK
 37

	)

57 
	#ENOSYS
 38

	)

58 
	#ENOTEMPTY
 39

	)

	@include/fcntl.h

1 #i‚de‡
_FCNTL_H


2 
	#_FCNTL_H


	)

4 
	~<sys/ty≥s.h
>

7 
	#O_ACCMODE
 00003

	)

8 
	#O_RDONLY
 00

	)

9 
	#O_WRONLY
 01

	)

10 
	#O_RDWR
 02

	)

11 
	#O_CREAT
 00100

	)

12 
	#O_EXCL
 00200

	)

13 
	#O_NOCTTY
 00400

	)

14 
	#O_TRUNC
 01000

	)

15 
	#O_APPEND
 02000

	)

16 
	#O_NONBLOCK
 04000

	)

17 
	#O_NDELAY
 
O_NONBLOCK


	)

23 
	#F_DUPFD
 0

	)

24 
	#F_GETFD
 1

	)

25 
	#F_SETFD
 2

	)

26 
	#F_GETFL
 3

	)

27 
	#F_SETFL
 4

	)

28 
	#F_GETLK
 5

	)

29 
	#F_SETLK
 6

	)

30 
	#F_SETLKW
 7

	)

33 
	#FD_CLOEXEC
 1

	)

38 
	#F_RDLCK
 0

	)

39 
	#F_WRLCK
 1

	)

40 
	#F_UNLCK
 2

	)

43 
	sÊock
 {

44 
	ml_ty≥
;

45 
	ml_whí˚
;

46 
off_t
 
	ml_°¨t
;

47 
off_t
 
	ml_Àn
;

48 
pid_t
 
	ml_pid
;

51 
¸ót
(c⁄° * 
fûíame
,
mode_t
 
mode
);

52 
f˙é
(
fûdes
,
cmd
, ...);

53 
›í
(c⁄° * 
fûíame
, 
Êags
, ...);

	@include/linux/config.h

1 #i‚de‡
_CONFIG_H


2 
	#_CONFIG_H


	)

19 
	#KBD_FINNISH


	)

	@include/linux/fdreg.h

6 #i‚de‡
_FDREG_H


7 
	#_FDREG_H


	)

9 
ticks_to_Ê›py_⁄
(
ƒ
);

10 
Ê›py_⁄
(
ƒ
);

11 
Ê›py_off
(
ƒ
);

12 
Ê›py_£À˘
(
ƒ
);

13 
Ê›py_de£À˘
(
ƒ
);

16 
	#FD_STATUS
 0x3f4

	)

17 
	#FD_DATA
 0x3f5

	)

18 
	#FD_DOR
 0x3f2

	)

19 
	#FD_DIR
 0x3f7

	)

20 
	#FD_DCR
 0x3f7

	)

23 
	#STATUS_BUSYMASK
 0x0F

	)

24 
	#STATUS_BUSY
 0x10

	)

25 
	#STATUS_DMA
 0x20

	)

26 
	#STATUS_DIR
 0x40

	)

27 
	#STATUS_READY
 0x80

	)

30 
	#ST0_DS
 0x03

	)

31 
	#ST0_HA
 0x04

	)

32 
	#ST0_NR
 0x08

	)

33 
	#ST0_ECE
 0x10

	)

34 
	#ST0_SE
 0x20

	)

35 
	#ST0_INTR
 0xC0

	)

38 
	#ST1_MAM
 0x01

	)

39 
	#ST1_WP
 0x02

	)

40 
	#ST1_ND
 0x04

	)

41 
	#ST1_OR
 0x10

	)

42 
	#ST1_CRC
 0x20

	)

43 
	#ST1_EOC
 0x80

	)

46 
	#ST2_MAM
 0x01

	)

47 
	#ST2_BC
 0x02

	)

48 
	#ST2_SNS
 0x04

	)

49 
	#ST2_SEH
 0x08

	)

50 
	#ST2_WC
 0x10

	)

51 
	#ST2_CRC
 0x20

	)

52 
	#ST2_CM
 0x40

	)

55 
	#ST3_HA
 0x04

	)

56 
	#ST3_TZ
 0x10

	)

57 
	#ST3_WP
 0x40

	)

60 
	#FD_RECALIBRATE
 0x07

	)

61 
	#FD_SEEK
 0x0F

	)

62 
	#FD_READ
 0xE6

	)

63 
	#FD_WRITE
 0xC5

	)

64 
	#FD_SENSEI
 0x08

	)

65 
	#FD_SPECIFY
 0x03

	)

68 
	#DMA_READ
 0x46

	)

69 
	#DMA_WRITE
 0x4A

	)

	@include/linux/fs.h

6 #i‚de‡
_FS_H


7 
	#_FS_H


	)

9 
	~<sys/ty≥s.h
>

24 
	#IS_SEEKABLE
(
x
Ë((x)>=1 && (x)<=3)

	)

26 
	#READ
 0

	)

27 
	#WRITE
 1

	)

28 
	#READA
 2

	)

29 
	#WRITEA
 3

	)

31 
buf„r_öô
(
buf„r_íd
);

33 
	#MAJOR
(
a
Ë((()◊))>>8)

	)

34 
	#MINOR
(
a
Ë(◊)&0xff)

	)

36 
	#NAME_LEN
 14

	)

37 
	#ROOT_INO
 1

	)

39 
	#I_MAP_SLOTS
 8

	)

40 
	#Z_MAP_SLOTS
 8

	)

41 
	#SUPER_MAGIC
 0x137F

	)

43 
	#NR_OPEN
 20

	)

44 
	#NR_INODE
 32

	)

45 
	#NR_FILE
 64

	)

46 
	#NR_SUPER
 8

	)

47 
	#NR_HASH
 307

	)

48 
	#NR_BUFFERS
 
ƒ_buf„rs


	)

49 
	#BLOCK_SIZE
 1024

	)

50 
	#BLOCK_SIZE_BITS
 10

	)

51 #i‚de‡
NULL


52 
	#NULL
 ((*Ë0)

	)

55 
	#INODES_PER_BLOCK
 ((
BLOCK_SIZE
)/( (
d_öode
)))

	)

56 
	#DIR_ENTRIES_PER_BLOCK
 ((
BLOCK_SIZE
)/( (
dú_íåy
)))

	)

58 
	#PIPE_HEAD
(
öode
Ë((öode).
i_z⁄e
[0])

	)

59 
	#PIPE_TAIL
(
öode
Ë((öode).
i_z⁄e
[1])

	)

60 
	#PIPE_SIZE
(
öode
Ë((
	`PIPE_HEAD
(öode)-
	`PIPE_TAIL
(öode))&(
PAGE_SIZE
-1))

	)

61 
	#PIPE_EMPTY
(
öode
Ë(
	`PIPE_HEAD
(öode)==
	`PIPE_TAIL
(öode))

	)

62 
	#PIPE_FULL
(
öode
Ë(
	`PIPE_SIZE
(öode)==(
PAGE_SIZE
-1))

	)

63 
	#INC_PIPE
(
hód
) \

64 
	`__asm__
("ö˛ %0\n\ènd»$4095,%0"::"m" (
hód
))

	)

66 
	tbuf„r_block
[
BLOCK_SIZE
];

68 
	sbuf„r_hód
 {

69 * 
	mb_d©a
;

70 
	mb_blockƒ
;

71 
	mb_dev
;

72 
	mb_u±od©e
;

73 
	mb_dút
;

74 
	mb_cou¡
;

75 
	mb_lock
;

76 
èsk_°ru˘
 * 
	mb_waô
;

77 
buf„r_hód
 * 
	mb_¥ev
;

78 
buf„r_hód
 * 
	mb_√xt
;

79 
buf„r_hód
 * 
	mb_¥ev_‰ì
;

80 
buf„r_hód
 * 
	mb_√xt_‰ì
;

83 
	sd_öode
 {

84 
	mi_mode
;

85 
	mi_uid
;

86 
	mi_size
;

87 
	mi_time
;

88 
	mi_gid
;

89 
	mi_∆öks
;

90 
	mi_z⁄e
[9];

93 
	sm_öode
 {

94 
	mi_mode
;

95 
	mi_uid
;

96 
	mi_size
;

97 
	mi_mtime
;

98 
	mi_gid
;

99 
	mi_∆öks
;

100 
	mi_z⁄e
[9];

102 
èsk_°ru˘
 * 
	mi_waô
;

103 
	mi_©ime
;

104 
	mi_˘ime
;

105 
	mi_dev
;

106 
	mi_num
;

107 
	mi_cou¡
;

108 
	mi_lock
;

109 
	mi_dút
;

110 
	mi_pùe
;

111 
	mi_mou¡
;

112 
	mi_£ek
;

113 
	mi_upd©e
;

116 
	sfûe
 {

117 
	mf_mode
;

118 
	mf_Êags
;

119 
	mf_cou¡
;

120 
m_öode
 * 
	mf_öode
;

121 
off_t
 
	mf_pos
;

124 
	ssu≥r_block
 {

125 
	ms_nöodes
;

126 
	ms_nz⁄es
;

127 
	ms_im≠_blocks
;

128 
	ms_zm≠_blocks
;

129 
	ms_fú°d©az⁄e
;

130 
	ms_log_z⁄e_size
;

131 
	ms_max_size
;

132 
	ms_magic
;

134 
buf„r_hód
 * 
	ms_im≠
[8];

135 
buf„r_hód
 * 
	ms_zm≠
[8];

136 
	ms_dev
;

137 
m_öode
 * 
	ms_isup
;

138 
m_öode
 * 
	ms_imou¡
;

139 
	ms_time
;

140 
èsk_°ru˘
 * 
	ms_waô
;

141 
	ms_lock
;

142 
	ms_rd_⁄ly
;

143 
	ms_dút
;

146 
	sd_su≥r_block
 {

147 
	ms_nöodes
;

148 
	ms_nz⁄es
;

149 
	ms_im≠_blocks
;

150 
	ms_zm≠_blocks
;

151 
	ms_fú°d©az⁄e
;

152 
	ms_log_z⁄e_size
;

153 
	ms_max_size
;

154 
	ms_magic
;

157 
	sdú_íåy
 {

158 
	möode
;

159 
	m«me
[
NAME_LEN
];

162 
m_öode
 
öode_èbÀ
[
NR_INODE
];

163 
fûe
 
fûe_èbÀ
[
NR_FILE
];

164 
su≥r_block
 su≥r_block[
NR_SUPER
];

165 
buf„r_hód
 * 
°¨t_buf„r
;

166 
ƒ_buf„rs
;

168 
check_disk_ch™ge
(
dev
);

169 
Ê›py_ch™ge
(
ƒ
);

170 
ticks_to_Ê›py_⁄
(
dev
);

171 
Ê›py_⁄
(
dev
);

172 
Ê›py_off
(
dev
);

173 
åunˇã
(
m_öode
 * 
öode
);

174 
sync_öodes
();

175 
waô_⁄
(
m_öode
 * 
öode
);

176 
bm≠
(
m_öode
 * 
öode
,
block
);

177 
¸óã_block
(
m_öode
 * 
öode
,
block
);

178 
m_öode
 * 
«mei
(c⁄° * 
∑th«me
);

179 
›í_«mei
(c⁄° * 
∑th«me
, 
Êag
, 
mode
,

180 
m_öode
 ** 
ªs_öode
);

181 
ùut
(
m_öode
 * 
öode
);

182 
m_öode
 * 
igë
(
dev
,
ƒ
);

183 
m_öode
 * 
gë_em±y_öode
();

184 
m_öode
 * 
gë_pùe_öode
();

185 
buf„r_hód
 * 
gë_hash_èbÀ
(
dev
, 
block
);

186 
buf„r_hód
 * 
gëblk
(
dev
, 
block
);

187 
Œ_rw_block
(
rw
, 
buf„r_hód
 * 
bh
);

188 
bªl£
(
buf„r_hód
 * 
buf
);

189 
buf„r_hód
 * 
bªad
(
dev
,
block
);

190 
bªad_∑ge
(
addr
,
dev
,
b
[4]);

191 
buf„r_hód
 * 
bªada
(
dev
,
block
,...);

192 
√w_block
(
dev
);

193 
‰ì_block
(
dev
, 
block
);

194 
m_öode
 * 
√w_öode
(
dev
);

195 
‰ì_öode
(
m_öode
 * 
öode
);

196 
sync_dev
(
dev
);

197 
su≥r_block
 * 
gë_su≥r
(
dev
);

198 
ROOT_DEV
;

200 
mou¡_roŸ
();

	@include/linux/hdreg.h

6 #i‚de‡
_HDREG_H


7 
	#_HDREG_H


	)

10 
	#HD_DATA
 0x1f0

	)

11 
	#HD_ERROR
 0x1f1

	)

12 
	#HD_NSECTOR
 0x1f2

	)

13 
	#HD_SECTOR
 0x1f3

	)

14 
	#HD_LCYL
 0x1f4

	)

15 
	#HD_HCYL
 0x1f5

	)

16 
	#HD_CURRENT
 0x1f6

	)

17 
	#HD_STATUS
 0x1f7

	)

18 
	#HD_PRECOMP
 
HD_ERROR


	)

19 
	#HD_COMMAND
 
HD_STATUS


	)

21 
	#HD_CMD
 0x3f6

	)

24 
	#ERR_STAT
 0x01

	)

25 
	#INDEX_STAT
 0x02

	)

26 
	#ECC_STAT
 0x04

	)

27 
	#DRQ_STAT
 0x08

	)

28 
	#SEEK_STAT
 0x10

	)

29 
	#WRERR_STAT
 0x20

	)

30 
	#READY_STAT
 0x40

	)

31 
	#BUSY_STAT
 0x80

	)

34 
	#WIN_RESTORE
 0x10

	)

35 
	#WIN_READ
 0x20

	)

36 
	#WIN_WRITE
 0x30

	)

37 
	#WIN_VERIFY
 0x40

	)

38 
	#WIN_FORMAT
 0x50

	)

39 
	#WIN_INIT
 0x60

	)

40 
	#WIN_SEEK
 0x70

	)

41 
	#WIN_DIAGNOSE
 0x90

	)

42 
	#WIN_SPECIFY
 0x91

	)

45 
	#MARK_ERR
 0x01

	)

46 
	#TRK0_ERR
 0x02

	)

47 
	#ABRT_ERR
 0x04

	)

48 
	#ID_ERR
 0x10

	)

49 
	#ECC_ERR
 0x40

	)

50 
	#BBD_ERR
 0x80

	)

52 
	s∑πôi⁄
 {

53 
	mboŸ_öd
;

54 
	mhód
;

55 
	m£˘‹
;

56 
	mcyl
;

57 
	msys_öd
;

58 
	míd_hód
;

59 
	míd_£˘‹
;

60 
	míd_cyl
;

61 
	m°¨t_£˘
;

62 
	mƒ_£˘s
;

	@include/linux/head.h

1 #i‚de‡
_HEAD_H


2 
	#_HEAD_H


	)

4 
	sdesc_°ru˘
 {

5 
	ma
,
	mb
;

6 } 
	tdesc_èbÀ
[256];

8 
pg_dú
[1024];

9 
desc_èbÀ
 
idt
,
gdt
;

11 
	#GDT_NUL
 0

	)

12 
	#GDT_CODE
 1

	)

13 
	#GDT_DATA
 2

	)

14 
	#GDT_TMP
 3

	)

16 
	#LDT_NUL
 0

	)

17 
	#LDT_CODE
 1

	)

18 
	#LDT_DATA
 2

	)

	@include/linux/kernel.h

4 
vîify_¨ó
(* 
addr
,
cou¡
);

5 vﬁ©ûê
∑nic
(c⁄° * 
°r
);

6 
¥ötf
(c⁄° * 
fmt
, ...);

7 
¥ötk
(c⁄° * 
fmt
, ...);

8 
ây_wrôe
(
ch
,* 
buf
,
cou¡
);

9 * 
mÆloc
(
size
);

10 
‰ì_s
(* 
obj
, 
size
);

12 
	#‰ì
(
x
Ë
	`‰ì_s
((x), 0)

	)

21 
	#su£r
(Ë(
cuºít
->
euid
 =0)

	)

	@include/linux/mm.h

1 #i‚de‡
_MM_H


2 
	#_MM_H


	)

4 
	#PAGE_SIZE
 4096

	)

6 
gë_‰ì_∑ge
();

7 
put_∑ge
(
∑ge
,
addªss
);

8 
‰ì_∑ge
(
addr
);

	@include/linux/sched.h

1 #i‚de‡
_SCHED_H


2 
	#_SCHED_H


	)

4 
	#NR_TASKS
 64

	)

5 
	#HZ
 100

	)

7 
	#FIRST_TASK
 
èsk
[0]

	)

8 
	#LAST_TASK
 
èsk
[
NR_TASKS
-1]

	)

10 
	~<löux/hód.h
>

11 
	~<löux/fs.h
>

12 
	~<löux/mm.h
>

13 
	~<sig«l.h
>

15 #i‡(
NR_OPEN
 > 32)

19 
	#TASK_RUNNING
 0

	)

20 
	#TASK_INTERRUPTIBLE
 1

	)

21 
	#TASK_UNINTERRUPTIBLE
 2

	)

22 
	#TASK_ZOMBIE
 3

	)

23 
	#TASK_STOPPED
 4

	)

25 #i‚de‡
NULL


26 
	#NULL
 ((*Ë0)

	)

29 
c›y_∑ge_èbÀs
(
‰om
, 
to
, 
size
);

30 
‰ì_∑ge_èbÀs
(
‰om
, 
size
);

32 
sched_öô
();

33 
scheduÀ
();

34 
å≠_öô
();

35 
∑nic
(c⁄° * 
°r
);

36 
ây_wrôe
(
mö‹
,* 
buf
,
cou¡
);

38 (*
	g‚_±r
)();

40 
	si387_°ru˘
 {

41 
	mcwd
;

42 
	mswd
;

43 
	mtwd
;

44 
	mfù
;

45 
	mfcs
;

46 
	mfoo
;

47 
	mfos
;

48 
	m°_•a˚
[20];

51 
	stss_°ru˘
 {

52 
	mback_lök
;

53 
	me•0
;

54 
	mss0
;

55 
	me•1
;

56 
	mss1
;

57 
	me•2
;

58 
	mss2
;

59 
	m¸3
;

60 
	meù
;

61 
	meÊags
;

62 
	móx
,
	mecx
,
	medx
,
	mebx
;

63 
	me•
;

64 
	mebp
;

65 
	mesi
;

66 
	medi
;

67 
	mes
;

68 
	mcs
;

69 
	mss
;

70 
	mds
;

71 
	mfs
;

72 
	mgs
;

73 
	mldt
;

74 
	måa˚_bôm≠
;

75 
i387_°ru˘
 
	mi387
;

78 
	sèsk_°ru˘
 {

80 
	m°©e
;

81 
	mcou¡î
;

82 
	m¥i‹ôy
;

83 
	msig«l
;

84 
siga˘i⁄
 
	msiga˘i⁄
[32];

85 
	mblocked
;

87 
	mexô_code
;

88 
	m°¨t_code
,
	míd_code
,
	míd_d©a
,
	mbrk
,
	m°¨t_°ack
;

89 
	mpid
,
	mÁthî
,
	mpgΩ
,
	m£ssi⁄
,
	mÀadî
;

90 
	muid
,
	meuid
,
	msuid
;

91 
	mgid
,
	megid
,
	msgid
;

92 
	mÆ¨m
;

93 
	mutime
,
	m°ime
,
	mcutime
,
	mc°ime
,
	m°¨t_time
;

94 
	mu£d_m©h
;

96 
	mây
;

97 
	mumask
;

98 
m_öode
 * 
	mpwd
;

99 
m_öode
 * 
	mroŸ
;

100 
m_öode
 * 
	mexecuèbÀ
;

101 
	m˛o£_⁄_exec
;

102 
fûe
 * 
	mfûp
[
NR_OPEN
];

104 
desc_°ru˘
 
	mldt
[3];

106 
tss_°ru˘
 
	mtss
;

113 
	#INIT_TASK
 \

121  -1,0022,
NULL
,NULL,NULL,0, \

122  {
NULL
,}, \

128  {0,
PAGE_SIZE
+()&
öô_èsk
,0x10,0,0,0,0,()&
pg_dú
,\

131 
	`_LDT
(0),0x80000000, \

134 }

	)

136 
èsk_°ru˘
 *
èsk
[
NR_TASKS
];

137 
èsk_°ru˘
 *
œ°_èsk_u£d_m©h
;

138 
èsk_°ru˘
 *
cuºít
;

139 vﬁ©ûê
jiffõs
;

140 
°¨tup_time
;

142 
	#CURRENT_TIME
 (
°¨tup_time
+
jiffõs
/
HZ
)

	)

144 
add_timî
(
jiffõs
, (*
‚
)());

145 
	`¶ìp_⁄
(
èsk_°ru˘
 ** 
p
);

146 
	`öãºu±ibÀ_¶ìp_⁄
(
èsk_°ru˘
 ** 
p
);

147 
	`wake_up
(
èsk_°ru˘
 ** 
p
);

153 
	#FIRST_TSS_ENTRY
 4

	)

154 
	#FIRST_LDT_ENTRY
 (
FIRST_TSS_ENTRY
+1)

	)

155 
	#_TSS
(
n
Ë((((Ën)<<4)+(
FIRST_TSS_ENTRY
<<3))

	)

156 
	#_LDT
(
n
Ë((((Ën)<<4)+(
FIRST_LDT_ENTRY
<<3))

	)

157 
	#…r
(
n
Ë
	`__asm__
("…∏%%ax"::"a" (
	`_TSS
“)))

	)

158 
	#Œdt
(
n
Ë
	`__asm__
("Œdà%%ax"::"a" (
	`_LDT
“)))

	)

159 
	#°r
(
n
) \

160 
	`__asm__
("str %%ax\n\t" \

163 :"˜" (
n
) \

164 :"a" (0),"i" (
FIRST_TSS_ENTRY
<<3))

	)

171 
	#swôch_to
(
n
) {\

172 °ru˘ {
a
,
b
;} 
__tmp
; \

173 
	`__asm__
("cmpl %%ecx,_current\n\t" \

182 ::"m" (*&
__tmp
.
a
),"m" (*&__tmp.
b
), \

183 "d" (
	`_TSS
(
n
)),"c" ((Ë
èsk
[n])); \

184 
	}

	)
}

186 
	#PAGE_ALIGN
(
n
Ë((“)+0xfff)&0xfffff000)

	)

188 
	#_£t_ba£
(
addr
,
ba£
) \

189 
	`__asm__
("movw %%dx,%0\n\t" \

193 ::"m" (*((
addr
)+2)), \

194 "m" (*((
addr
)+4)), \

195 "m" (*((
addr
)+7)), \

196 "d" (
ba£
) \

197 :"dx")

	)

199 
	#_£t_limô
(
addr
,
limô
) \

200 
	`__asm__
("movw %%dx,%0\n\t" \

206 ::"m" (*(
addr
)), \

207 "m" (*((
addr
)+6)), \

208 "d" (
limô
) \

209 :"dx")

	)

211 
	#£t_ba£
(
ldt
,
ba£
Ë
	`_£t_ba£
–((*)&÷dt)Ë, ba£ )

	)

212 
	#£t_limô
(
ldt
,
limô
Ë
	`_£t_limô
–((*)&÷dt)Ë, (limô-1)>>12 )

	)

214 
	#_gë_ba£
(
addr
) ({\

215 
__ba£
; \

216 
	`__asm__
("movb %3,%%dh\n\t" \

220 :"=d" (
__ba£
) \

221 :"m" (*((
addr
)+2)), \

222 "m" (*((
addr
)+4)), \

223 "m" (*((
addr
)+7))); \

224 
__ba£
;})

	)

226 
	#gë_ba£
(
ldt
Ë
	`_gë_ba£
–((*)&÷dt)Ë)

	)

228 
	#gë_limô
(
£gmít
) ({ \

229 
__limô
; \

230 
	`__asm__
("l¶»%1,%0\n\tö˛ %0":"Ù" (
__limô
):"r" (
£gmít
)); \

231 
__limô
;})

	)

	@include/linux/sys.h

1 
sys_£tup
();

2 
sys_exô
();

3 
sys_f‹k
();

4 
sys_ªad
();

5 
sys_wrôe
();

6 
sys_›í
();

7 
sys_˛o£
();

8 
sys_waôpid
();

9 
sys_¸ót
();

10 
sys_lök
();

11 
sys_u∆ök
();

12 
sys_execve
();

13 
sys_chdú
();

14 
sys_time
();

15 
sys_mknod
();

16 
sys_chmod
();

17 
sys_chown
();

18 
sys_bªak
();

19 
sys_°©
();

20 
sys_l£ek
();

21 
sys_gëpid
();

22 
sys_mou¡
();

23 
sys_umou¡
();

24 
sys_£tuid
();

25 
sys_gëuid
();

26 
sys_°ime
();

27 
sys_±ø˚
();

28 
sys_Æ¨m
();

29 
sys_f°©
();

30 
sys_∑u£
();

31 
sys_utime
();

32 
sys_°ty
();

33 
sys_gây
();

34 
sys_ac˚ss
();

35 
sys_ni˚
();

36 
sys_·ime
();

37 
sys_sync
();

38 
sys_kûl
();

39 
sys_ª«me
();

40 
sys_mkdú
();

41 
sys_rmdú
();

42 
sys_dup
();

43 
sys_pùe
();

44 
sys_times
();

45 
sys_¥of
();

46 
sys_brk
();

47 
sys_£tgid
();

48 
sys_gëgid
();

49 
sys_sig«l
();

50 
sys_gëeuid
();

51 
sys_gëegid
();

52 
sys_ac˘
();

53 
sys_phys
();

54 
sys_lock
();

55 
sys_io˘l
();

56 
sys_f˙é
();

57 
sys_mpx
();

58 
sys_£çgid
();

59 
sys_ulimô
();

60 
sys_u«me
();

61 
sys_umask
();

62 
sys_chroŸ
();

63 
sys_u°©
();

64 
sys_dup2
();

65 
sys_gëµid
();

66 
sys_gëpgΩ
();

67 
sys_£tsid
();

68 
sys_siga˘i⁄
();

69 
sys_sgëmask
();

70 
sys_s£tmask
();

71 
sys_£åeuid
();

72 
sys_£åegid
();

74 
‚_±r
 
	gsys_ˇŒ_èbÀ
[] = { 
sys_£tup
, 
sys_exô
, 
sys_f‹k
, 
sys_ªad
,

75 
sys_wrôe
, 
sys_›í
, 
sys_˛o£
, 
sys_waôpid
, 
sys_¸ót
, 
sys_lök
,

76 
sys_u∆ök
, 
sys_execve
, 
sys_chdú
, 
sys_time
, 
sys_mknod
, 
sys_chmod
,

77 
sys_chown
, 
sys_bªak
, 
sys_°©
, 
sys_l£ek
, 
sys_gëpid
, 
sys_mou¡
,

78 
sys_umou¡
, 
sys_£tuid
, 
sys_gëuid
, 
sys_°ime
, 
sys_±ø˚
, 
sys_Æ¨m
,

79 
sys_f°©
, 
sys_∑u£
, 
sys_utime
, 
sys_°ty
, 
sys_gây
, 
sys_ac˚ss
,

80 
sys_ni˚
, 
sys_·ime
, 
sys_sync
, 
sys_kûl
, 
sys_ª«me
, 
sys_mkdú
,

81 
sys_rmdú
, 
sys_dup
, 
sys_pùe
, 
sys_times
, 
sys_¥of
, 
sys_brk
, 
sys_£tgid
,

82 
sys_gëgid
, 
sys_sig«l
, 
sys_gëeuid
, 
sys_gëegid
, 
sys_ac˘
, 
sys_phys
,

83 
sys_lock
, 
sys_io˘l
, 
sys_f˙é
, 
sys_mpx
, 
sys_£çgid
, 
sys_ulimô
,

84 
sys_u«me
, 
sys_umask
, 
sys_chroŸ
, 
sys_u°©
, 
sys_dup2
, 
sys_gëµid
,

85 
sys_gëpgΩ
, 
sys_£tsid
, 
sys_siga˘i⁄
, 
sys_sgëmask
, 
sys_s£tmask
,

86 
sys_£åeuid
,
sys_£åegid
 };

	@include/linux/tty.h

9 #i‚de‡
_TTY_H


10 
	#_TTY_H


	)

12 
	~<ãrmios.h
>

14 
	#TTY_BUF_SIZE
 1024

	)

16 
	sây_queue
 {

17 
	md©a
;

18 
	mhód
;

19 
	mèû
;

20 
èsk_°ru˘
 * 
	m¥oc_li°
;

21 
	mbuf
[
TTY_BUF_SIZE
];

24 
	#INC
(
a
Ë(◊Ë(◊)+1Ë& (
TTY_BUF_SIZE
-1))

	)

25 
	#DEC
(
a
Ë(◊Ë(◊)-1Ë& (
TTY_BUF_SIZE
-1))

	)

26 
	#EMPTY
(
a
Ë(◊).
hód
 =◊).
èû
)

	)

27 
	#LEFT
(
a
Ë((◊).
èû
-◊).
hód
-1)&(
TTY_BUF_SIZE
-1))

	)

28 
	#LAST
(
a
Ë(◊).
buf
[(
TTY_BUF_SIZE
-1)&(◊).
hód
-1)])

	)

29 
	#FULL
(
a
Ë(!
	`LEFT
◊))

	)

30 
	#CHARS
(
a
Ë((◊).
hód
-◊).
èû
)&(
TTY_BUF_SIZE
-1))

	)

31 
	#GETCH
(
queue
,
c
) \

32 ()({
c
=(
queue
).
buf
[(queue).
èû
];
	`INC
((queue).èû);})

	)

33 
	#PUTCH
(
c
,
queue
) \

34 ()({(
queue
).
buf
[(queue).
hód
]=(
c
);
	`INC
((queue).hód);})

	)

36 
	#INTR_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VINTR
])

	)

37 
	#QUIT_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VQUIT
])

	)

38 
	#ERASE_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VERASE
])

	)

39 
	#KILL_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VKILL
])

	)

40 
	#EOF_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VEOF
])

	)

41 
	#START_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VSTART
])

	)

42 
	#STOP_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VSTOP
])

	)

43 
	#SUSPEND_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VSUSP
])

	)

45 
	sây_°ru˘
 {

46 
ãrmios
 
	mãrmios
;

47 
	mpgΩ
;

48 
	m°›≥d
;

49 (*
	mwrôe
)(
ây_°ru˘
 * 
	mây
);

50 
ây_queue
 
	mªad_q
;

51 
ây_queue
 
	mwrôe_q
;

52 
ây_queue
 
	m£c⁄d¨y
;

55 
ây_°ru˘
 
ây_èbÀ
[];

63 
	#INIT_C_CC
 "\003\034\177\025\004\0\1\0\021\023\032\0\022\017\027\026\0"

	)

65 
rs_öô
();

66 
c⁄_öô
();

67 
ây_öô
();

69 
ây_ªad
(
c
, * 
buf
, 
n
);

70 
ây_wrôe
(
c
, * 
buf
, 
n
);

72 
rs_wrôe
(
ây_°ru˘
 * 
ây
);

73 
c⁄_wrôe
(
ây_°ru˘
 * 
ây
);

75 
c›y_to_cooked
(
ây_°ru˘
 * 
ây
);

	@include/signal.h

1 #i‚de‡
_SIGNAL_H


2 
	#_SIGNAL_H


	)

4 
	~<sys/ty≥s.h
>

6 
	tsig_©omic_t
;

7 
	tsig£t_t
;

9 
	#_NSIG
 32

	)

10 
	#NSIG
 
_NSIG


	)

12 
	#SIGHUP
 1

	)

13 
	#SIGINT
 2

	)

14 
	#SIGQUIT
 3

	)

15 
	#SIGILL
 4

	)

16 
	#SIGTRAP
 5

	)

17 
	#SIGABRT
 6

	)

18 
	#SIGIOT
 6

	)

19 
	#SIGUNUSED
 7

	)

20 
	#SIGFPE
 8

	)

21 
	#SIGKILL
 9

	)

22 
	#SIGUSR1
 10

	)

23 
	#SIGSEGV
 11

	)

24 
	#SIGUSR2
 12

	)

25 
	#SIGPIPE
 13

	)

26 
	#SIGALRM
 14

	)

27 
	#SIGTERM
 15

	)

28 
	#SIGSTKFLT
 16

	)

29 
	#SIGCHLD
 17

	)

30 
	#SIGCONT
 18

	)

31 
	#SIGSTOP
 19

	)

32 
	#SIGTSTP
 20

	)

33 
	#SIGTTIN
 21

	)

34 
	#SIGTTOU
 22

	)

37 
	#SA_NOCLDSTOP
 1

	)

38 
	#SA_NOMASK
 0x40000000

	)

39 
	#SA_ONESHOT
 0x80000000

	)

41 
	#SIG_BLOCK
 0

	)

42 
	#SIG_UNBLOCK
 1

	)

43 
	#SIG_SETMASK
 2

	)

45 
	#SIG_DFL
 (((*)())0Ë

	)

46 
	#SIG_IGN
 (((*)())1Ë

	)

48 
	ssiga˘i⁄
 {

49 (*
	mß_h™dÀr
)();

50 
sig£t_t
 
	mß_mask
;

51 
	mß_Êags
;

52 (*
	mß_ª°‹î
)();

55 (*
sig«l
(
_sig
, (*
_func
)()))();

56 
	`øi£
(
sig
);

57 
	`kûl
(
pid_t
 
pid
, 
sig
);

58 
	`sigadd£t
(
sig£t_t
 *
mask
, 
signo
);

59 
	`sigdñ£t
(
sig£t_t
 *
mask
, 
signo
);

60 
	`sigem±y£t
(
sig£t_t
 *
mask
);

61 
	`sigfûl£t
(
sig£t_t
 *
mask
);

62 
	`sigismembî
(
sig£t_t
 *
mask
, 
signo
);

63 
	`sig≥ndög
(
sig£t_t
 *
£t
);

64 
	`sig¥ocmask
(
how
, 
sig£t_t
 *
£t
, sig£t_à*
ﬁd£t
);

65 
	`sigsu•íd
(
sig£t_t
 *
sigmask
);

66 
	`siga˘i⁄
(
sig
, 
siga˘i⁄
 *
a˘
, siga˘i⁄ *
ﬁda˘
);

	@include/stdarg.h

1 #i‚de‡
_STDARG_H


2 
	#_STDARG_H


	)

4 *
	tva_li°
;

9 
	#__va_rounded_size
(
TYPE
) \

10 ((( (
TYPE
Ë+  (Ë- 1Ë/  ()Ë*  ())

	)

12 #i‚de‡
__•¨c__


13 
	#va_°¨t
(
AP
, 
LASTARG
) \

14 (
AP
 = ((*Ë&(
LASTARG
Ë+ 
	`__va_rounded_size
 (LASTARG)))

	)

16 
	#va_°¨t
(
AP
, 
LASTARG
) \

17 (
	`__buûtö_ßvîegs
 (), \

18 
AP
 = ((*Ë&(
LASTARG
Ë+ 
	`__va_rounded_size
 (LASTARG)))

	)

21 
va_íd
 (
va_li°
);

22 
	#va_íd
(
AP
)

	)

24 
	#va_¨g
(
AP
, 
TYPE
) \

25 (
AP
 +
	`__va_rounded_size
 (
TYPE
), \

26 *((
TYPE
 *Ë(
AP
 - 
	`__va_rounded_size
 (TYPE))))

	)

	@include/stddef.h

1 #i‚de‡
_STDDEF_H


2 
	#_STDDEF_H


	)

4 #i‚de‡
_PTRDIFF_T


5 
	#_PTRDIFF_T


	)

6 
	t±rdiff_t
;

9 #i‚de‡
_SIZE_T


10 
	#_SIZE_T


	)

11 
	tsize_t
;

14 #unde‡
NULL


15 
	#NULL
 ((*)0)

	)

17 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

	@include/string.h

1 #i‚de‡
_STRING_H_


2 
	#_STRING_H_


	)

4 #i‚de‡
NULL


5 
	#NULL
 ((*Ë0)

	)

8 #i‚de‡
_SIZE_T


9 
	#_SIZE_T


	)

10 
	tsize_t
;

13 * 
°ªº‹
(
î∫o
);

27 
ölöe
 * 
	$°r˝y
(* 
de°
,c⁄° *
§c
)

29 
	`__asm__
("cld\n"

34 ::"S" (
§c
),"D" (
de°
):"si","di","ax");

35  
de°
;

36 
	}
}

38 
ölöe
 * 
	$°∫˝y
(* 
de°
,c⁄° *
§c
,
cou¡
)

40 
	`__asm__
("cld\n"

50 ::"S" (
§c
),"D" (
de°
),"c" (
cou¡
):"si","di","ax","cx");

51  
de°
;

52 
	}
}

54 
ölöe
 * 
	$°rˇt
(* 
de°
,c⁄° * 
§c
)

56 
	`__asm__
("cld\n\t"

64 ::"S" (
§c
),"D" (
de°
),"a" (0),"c" (0xffffffff):"si","di","ax","cx");

65  
de°
;

66 
	}
}

68 
ölöe
 * 
	$°∫ˇt
(* 
de°
,c⁄° * 
§c
,
cou¡
)

70 
	`__asm__
("cld\n\t"

83 ::"S" (
§c
),"D" (
de°
),"a" (0),"c" (0xffffffff),"g" (
cou¡
)

85  
de°
;

86 
	}
}

88 
ölöe
 
	$°rcmp
(c⁄° * 
cs
,c⁄° * 
˘
)

90 
__ªs
 
	`__asm__
("ax");

91 
	`__asm__
("cld\n"

103 :"˜" (
__ªs
):"D" (
cs
),"S" (
˘
):"si","di");

104  
__ªs
;

105 
	}
}

107 
ölöe
 
	$°∫cmp
(c⁄° * 
cs
,c⁄° * 
˘
,
cou¡
)

109 
__ªs
 
	`__asm__
("ax");

110 
	`__asm__
("cld\n"

124 :"˜" (
__ªs
):"D" (
cs
),"S" (
˘
),"c" (
cou¡
):"si","di","cx");

125  
__ªs
;

126 
	}
}

128 
ölöe
 * 
	$°rchr
(c⁄° * 
s
,
c
)

130 * 
__ªs
 
	`__asm__
("ax");

131 
	`__asm__
("cld\n\t"

141 :"˜" (
__ªs
):"S" (
s
),"0" (
c
):"si");

142  
__ªs
;

143 
	}
}

145 
ölöe
 * 
	$°ºchr
(c⁄° * 
s
,
c
)

147 * 
__ªs
 
	`__asm__
("dx");

148 
	`__asm__
("cld\n\t"

157 :"=d" (
__ªs
):"0" (0),"S" (
s
),"a" (
c
):"ax","si");

158  
__ªs
;

159 
	}
}

161 
ölöe
 
	$°r•n
(c⁄° * 
cs
, c⁄° * 
˘
)

163 * 
__ªs
 
	`__asm__
("si");

164 
	`__asm__
("cld\n\t"

180 :"=S" (
__ªs
):"a" (0),"c" (0xffffffff),"0" (
cs
),"g" (
˘
)

182  
__ªs
-
cs
;

183 
	}
}

185 
ölöe
 
	$°rc•n
(c⁄° * 
cs
, c⁄° * 
˘
)

187 * 
__ªs
 
	`__asm__
("si");

188 
	`__asm__
("cld\n\t"

204 :"=S" (
__ªs
):"a" (0),"c" (0xffffffff),"0" (
cs
),"g" (
˘
)

206  
__ªs
-
cs
;

207 
	}
}

209 
ölöe
 * 
	$°Ωbrk
(c⁄° * 
cs
,c⁄° * 
˘
)

211 * 
__ªs
 
	`__asm__
("si");

212 
	`__asm__
("cld\n\t"

231 :"=S" (
__ªs
):"a" (0),"c" (0xffffffff),"0" (
cs
),"g" (
˘
)

233  
__ªs
;

234 
	}
}

236 
ölöe
 * 
	$°r°r
(c⁄° * 
cs
,c⁄° * 
˘
)

238 * 
__ªs
 
	`__asm__
("ax");

239 
	`__asm__
("cld\n\t" \

258 :"˜" (
__ªs
):"0" (0),"c" (0xffffffff),"S" (
cs
),"g" (
˘
)

260  
__ªs
;

261 
	}
}

263 
ölöe
 
	$°æí
(c⁄° * 
s
)

265 
__ªs
 
	`__asm__
("cx");

266 
	`__asm__
("cld\n\t"

271 :"=c" (
__ªs
):"D" (
s
),"a" (0),"0" (0xffffffff):"di");

272  
__ªs
;

273 
	}
}

275 * 
___°πok
;

277 
ölöe
 * 
	$°πok
(* 
s
,c⁄° * 
˘
)

279 * 
__ªs
 
	`__asm__
("si");

280 
	`__asm__
("testl %1,%1\n\t"

330 :"=b" (
__ªs
),"=S" (
___°πok
)

331 :"0" (
___°πok
),"1" (
s
),"g" (
˘
)

333  
__ªs
;

334 
	}
}

336 
ölöe
 * 
	$mem˝y
(* 
de°
,c⁄° * 
§c
, 
n
)

338 
	`__asm__
("cld\n\t"

341 ::"c" (
n
),"S" (
§c
),"D" (
de°
)

343  
de°
;

344 
	}
}

346 
ölöe
 * 
	$memmove
(* 
de°
,c⁄° * 
§c
, 
n
)

348 i‡(
de°
<
§c
)

349 
	`__asm__
("cld\n\t"

352 ::"c" (
n
),"S" (
§c
),"D" (
de°
)

355 
	`__asm__
("std\n\t"

358 ::"c" (
n
),"S" (
§c
+n-1),"D" (
de°
+n-1)

360  
de°
;

361 
	}
}

363 
ölöe
 
	$memcmp
(c⁄° * 
cs
,c⁄° * 
˘
,
cou¡
)

365 
__ªs
 
	`__asm__
("ax");

366 
	`__asm__
("cld\n\t"

374 :"˜" (
__ªs
):"0" (0),"D" (
cs
),"S" (
˘
),"c" (
cou¡
)

376  
__ªs
;

377 
	}
}

379 
ölöe
 * 
	$memchr
(c⁄° * 
cs
,
c
,
cou¡
)

381 * 
__ªs
 
	`__asm__
("di");

382 i‡(!
cou¡
)

383  
NULL
;

384 
	`__asm__
("cld\n\t"

390 :"=D" (
__ªs
):"a" (
c
),"D" (
cs
),"c" (
cou¡
)

392  
__ªs
;

393 
	}
}

395 
ölöe
 * 
	$mem£t
(* 
s
,
c
,
cou¡
)

397 
	`__asm__
("cld\n\t"

400 ::"a" (
c
),"D" (
s
),"c" (
cou¡
)

402  
s
;

403 
	}
}

	@include/sys/stat.h

1 #i‚de‡
_SYS_STAT_H


2 
	#_SYS_STAT_H


	)

4 
	~<sys/ty≥s.h
>

6 
	s°©
 {

7 
dev_t
 
	m°_dev
;

8 
öo_t
 
	m°_öo
;

9 
umode_t
 
	m°_mode
;

10 
∆ök_t
 
	m°_∆ök
;

11 
uid_t
 
	m°_uid
;

12 
gid_t
 
	m°_gid
;

13 
dev_t
 
	m°_rdev
;

14 
off_t
 
	m°_size
;

15 
time_t
 
	m°_©ime
;

16 
time_t
 
	m°_mtime
;

17 
time_t
 
	m°_˘ime
;

20 
	#S_IFMT
 00170000

	)

21 
	#S_IFREG
 0100000

	)

22 
	#S_IFBLK
 0060000

	)

23 
	#S_IFDIR
 0040000

	)

24 
	#S_IFCHR
 0020000

	)

25 
	#S_IFIFO
 0010000

	)

26 
	#S_ISUID
 0004000

	)

27 
	#S_ISGID
 0002000

	)

28 
	#S_ISVTX
 0001000

	)

30 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

31 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

32 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

33 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

34 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

36 
	#S_IRWXU
 00700

	)

37 
	#S_IRUSR
 00400

	)

38 
	#S_IWUSR
 00200

	)

39 
	#S_IXUSR
 00100

	)

41 
	#S_IRWXG
 00070

	)

42 
	#S_IRGRP
 00040

	)

43 
	#S_IWGRP
 00020

	)

44 
	#S_IXGRP
 00010

	)

46 
	#S_IRWXO
 00007

	)

47 
	#S_IROTH
 00004

	)

48 
	#S_IWOTH
 00002

	)

49 
	#S_IXOTH
 00001

	)

51 
chmod
(c⁄° *
_∑th
, 
mode_t
 
mode
);

52 
f°©
(
fûdes
, 
°©
 *
°©_buf
);

53 
mkdú
(c⁄° *
_∑th
, 
mode_t
 
mode
);

54 
mkfifo
(c⁄° *
_∑th
, 
mode_t
 
mode
);

55 
°©
(c⁄° *
fûíame
, °© *
°©_buf
);

56 
mode_t
 
umask
(mode_à
mask
);

	@include/sys/times.h

1 #i‚de‡
_TIMES_H


2 
	#_TIMES_H


	)

4 
	~<sys/ty≥s.h
>

6 
	stms
 {

7 
time_t
 
	mtms_utime
;

8 
time_t
 
	mtms_°ime
;

9 
time_t
 
	mtms_cutime
;

10 
time_t
 
	mtms_c°ime
;

13 
time_t
 
times
(
tms
 * 
ç
);

	@include/sys/types.h

1 #i‚de‡
_SYS_TYPES_H


2 
	#_SYS_TYPES_H


	)

4 #i‚de‡
_SIZE_T


5 
	#_SIZE_T


	)

6 
	tsize_t
;

9 #i‚de‡
_TIME_T


10 
	#_TIME_T


	)

11 
	ttime_t
;

14 #i‚de‡
_PTRDIFF_T


15 
	#_PTRDIFF_T


	)

16 
	t±rdiff_t
;

19 #i‚de‡
NULL


20 
	#NULL
 ((*Ë0)

	)

23 
	tpid_t
;

24 
	tuid_t
;

25 
	tgid_t
;

26 
	tdev_t
;

27 
	töo_t
;

28 
	tmode_t
;

29 
	tumode_t
;

30 
	t∆ök_t
;

31 
	tdaddr_t
;

32 
	toff_t
;

33 
	tu_ch¨
;

34 
	tush‹t
;

36 °ru˘ { 
	mquŸ
,
	mªm
; } 
	tdiv_t
;

37 °ru˘ { 
	mquŸ
,
	mªm
; } 
	tldiv_t
;

39 
	su°©
 {

40 
daddr_t
 
	mf_t‰ì
;

41 
öo_t
 
	mf_töode
;

42 
	mf_‚ame
[6];

43 
	mf_Âack
[6];

	@include/sys/utsname.h

1 #i‚de‡
_SYS_UTSNAME_H


2 
	#_SYS_UTSNAME_H


	)

4 
	~<sys/ty≥s.h
>

6 
	sut¢ame
 {

7 
	msy¢ame
[9];

8 
	mnodíame
[9];

9 
	mªÀa£
[9];

10 
	mvîsi⁄
[9];

11 
	mmachöe
[9];

14 
u«me
(
ut¢ame
 * 
utsbuf
);

	@include/sys/wait.h

1 #i‚de‡
_SYS_WAIT_H


2 
	#_SYS_WAIT_H


	)

4 
	~<sys/ty≥s.h
>

6 
	#_LOW
(
v
Ë–(vË& 0377)

	)

7 
	#_HIGH
(
v
Ë–((vË>> 8Ë& 0377)

	)

10 
	#WNOHANG
 1

	)

11 
	#WUNTRACED
 2

	)

13 
	#WIFEXITED
(
s
Ë(!((s)&0xFF)

	)

14 
	#WIFSTOPPED
(
s
Ë(((s)&0xFF)==0x7F)

	)

15 
	#WEXITSTATUS
(
s
Ë(((s)>>8)&0xFF)

	)

16 
	#WTERMSIG
(
s
Ë((s)&0x7F)

	)

17 
	#WSTOPSIG
(
s
Ë(((s)>>8)&0xFF)

	)

18 
	#WIFSIGNALED
(
s
Ë((()(s)-1 & 0xFFFFË< 0xFF)

	)

20 
pid_t
 
waô
(*
°©_loc
);

21 
pid_t
 
waôpid
’id_à
pid
, *
°©_loc
, 
›ti⁄s
);

	@include/termios.h

1 #i‚de‡
_TERMIOS_H


2 
	#_TERMIOS_H


	)

4 
	#TTY_BUF_SIZE
 1024

	)

8 
	#TCGETS
 0x5401

	)

9 
	#TCSETS
 0x5402

	)

10 
	#TCSETSW
 0x5403

	)

11 
	#TCSETSF
 0x5404

	)

12 
	#TCGETA
 0x5405

	)

13 
	#TCSETA
 0x5406

	)

14 
	#TCSETAW
 0x5407

	)

15 
	#TCSETAF
 0x5408

	)

16 
	#TCSBRK
 0x5409

	)

17 
	#TCXONC
 0x540A

	)

18 
	#TCFLSH
 0x540B

	)

19 
	#TIOCEXCL
 0x540C

	)

20 
	#TIOCNXCL
 0x540D

	)

21 
	#TIOCSCTTY
 0x540E

	)

22 
	#TIOCGPGRP
 0x540F

	)

23 
	#TIOCSPGRP
 0x5410

	)

24 
	#TIOCOUTQ
 0x5411

	)

25 
	#TIOCSTI
 0x5412

	)

26 
	#TIOCGWINSZ
 0x5413

	)

27 
	#TIOCSWINSZ
 0x5414

	)

28 
	#TIOCMGET
 0x5415

	)

29 
	#TIOCMBIS
 0x5416

	)

30 
	#TIOCMBIC
 0x5417

	)

31 
	#TIOCMSET
 0x5418

	)

32 
	#TIOCGSOFTCAR
 0x5419

	)

33 
	#TIOCSSOFTCAR
 0x541A

	)

34 
	#TIOCINQ
 0x541B

	)

36 
	swösize
 {

37 
	mws_row
;

38 
	mws_cﬁ
;

39 
	mws_xpixñ
;

40 
	mws_ypixñ
;

43 
	#NCC
 8

	)

44 
	sãrmio
 {

45 
	mc_iÊag
;

46 
	mc_oÊag
;

47 
	mc_cÊag
;

48 
	mc_lÊag
;

49 
	mc_löe
;

50 
	mc_cc
[
NCC
];

53 
	#NCCS
 17

	)

54 
	sãrmios
 {

55 
	mc_iÊag
;

56 
	mc_oÊag
;

57 
	mc_cÊag
;

58 
	mc_lÊag
;

59 
	mc_löe
;

60 
	mc_cc
[
NCCS
];

64 
	#VINTR
 0

	)

65 
	#VQUIT
 1

	)

66 
	#VERASE
 2

	)

67 
	#VKILL
 3

	)

68 
	#VEOF
 4

	)

69 
	#VTIME
 5

	)

70 
	#VMIN
 6

	)

71 
	#VSWTC
 7

	)

72 
	#VSTART
 8

	)

73 
	#VSTOP
 9

	)

74 
	#VSUSP
 10

	)

75 
	#VEOL
 11

	)

76 
	#VREPRINT
 12

	)

77 
	#VDISCARD
 13

	)

78 
	#VWERASE
 14

	)

79 
	#VLNEXT
 15

	)

80 
	#VEOL2
 16

	)

83 
	#IGNBRK
 0000001

	)

84 
	#BRKINT
 0000002

	)

85 
	#IGNPAR
 0000004

	)

86 
	#PARMRK
 0000010

	)

87 
	#INPCK
 0000020

	)

88 
	#ISTRIP
 0000040

	)

89 
	#INLCR
 0000100

	)

90 
	#IGNCR
 0000200

	)

91 
	#ICRNL
 0000400

	)

92 
	#IUCLC
 0001000

	)

93 
	#IXON
 0002000

	)

94 
	#IXANY
 0004000

	)

95 
	#IXOFF
 0010000

	)

96 
	#IMAXBEL
 0020000

	)

99 
	#OPOST
 0000001

	)

100 
	#OLCUC
 0000002

	)

101 
	#ONLCR
 0000004

	)

102 
	#OCRNL
 0000010

	)

103 
	#ONOCR
 0000020

	)

104 
	#ONLRET
 0000040

	)

105 
	#OFILL
 0000100

	)

106 
	#OFDEL
 0000200

	)

107 
	#NLDLY
 0000400

	)

108 
	#NL0
 0000000

	)

109 
	#NL1
 0000400

	)

110 
	#CRDLY
 0003000

	)

111 
	#CR0
 0000000

	)

112 
	#CR1
 0001000

	)

113 
	#CR2
 0002000

	)

114 
	#CR3
 0003000

	)

115 
	#TABDLY
 0014000

	)

116 
	#TAB0
 0000000

	)

117 
	#TAB1
 0004000

	)

118 
	#TAB2
 0010000

	)

119 
	#TAB3
 0014000

	)

120 
	#XTABS
 0014000

	)

121 
	#BSDLY
 0020000

	)

122 
	#BS0
 0000000

	)

123 
	#BS1
 0020000

	)

124 
	#VTDLY
 0040000

	)

125 
	#VT0
 0000000

	)

126 
	#VT1
 0040000

	)

127 
	#FFDLY
 0040000

	)

128 
	#FF0
 0000000

	)

129 
	#FF1
 0040000

	)

132 
	#CBAUD
 0000017

	)

133 
	#B0
 0000000

	)

134 
	#B50
 0000001

	)

135 
	#B75
 0000002

	)

136 
	#B110
 0000003

	)

137 
	#B134
 0000004

	)

138 
	#B150
 0000005

	)

139 
	#B200
 0000006

	)

140 
	#B300
 0000007

	)

141 
	#B600
 0000010

	)

142 
	#B1200
 0000011

	)

143 
	#B1800
 0000012

	)

144 
	#B2400
 0000013

	)

145 
	#B4800
 0000014

	)

146 
	#B9600
 0000015

	)

147 
	#B19200
 0000016

	)

148 
	#B38400
 0000017

	)

149 
	#EXTA
 
B19200


	)

150 
	#EXTB
 
B38400


	)

151 
	#CSIZE
 0000060

	)

152 
	#CS5
 0000000

	)

153 
	#CS6
 0000020

	)

154 
	#CS7
 0000040

	)

155 
	#CS8
 0000060

	)

156 
	#CSTOPB
 0000100

	)

157 
	#CREAD
 0000200

	)

158 
	#CPARENB
 0000400

	)

159 
	#CPARODD
 0001000

	)

160 
	#HUPCL
 0002000

	)

161 
	#CLOCAL
 0004000

	)

162 
	#CIBAUD
 03600000

	)

163 
	#CRTSCTS
 020000000000

	)

165 
	#PARENB
 
CPARENB


	)

166 
	#PARODD
 
CPARODD


	)

169 
	#ISIG
 0000001

	)

170 
	#ICANON
 0000002

	)

171 
	#XCASE
 0000004

	)

172 
	#ECHO
 0000010

	)

173 
	#ECHOE
 0000020

	)

174 
	#ECHOK
 0000040

	)

175 
	#ECHONL
 0000100

	)

176 
	#NOFLSH
 0000200

	)

177 
	#TOSTOP
 0000400

	)

178 
	#ECHOCTL
 0001000

	)

179 
	#ECHOPRT
 0002000

	)

180 
	#ECHOKE
 0004000

	)

181 
	#FLUSHO
 0010000

	)

182 
	#PENDIN
 0040000

	)

183 
	#IEXTEN
 0100000

	)

186 
	#TIOCM_LE
 0x001

	)

187 
	#TIOCM_DTR
 0x002

	)

188 
	#TIOCM_RTS
 0x004

	)

189 
	#TIOCM_ST
 0x008

	)

190 
	#TIOCM_SR
 0x010

	)

191 
	#TIOCM_CTS
 0x020

	)

192 
	#TIOCM_CAR
 0x040

	)

193 
	#TIOCM_RNG
 0x080

	)

194 
	#TIOCM_DSR
 0x100

	)

195 
	#TIOCM_CD
 
TIOCM_CAR


	)

196 
	#TIOCM_RI
 
TIOCM_RNG


	)

199 
	#TCOOFF
 0

	)

200 
	#TCOON
 1

	)

201 
	#TCIOFF
 2

	)

202 
	#TCION
 3

	)

205 
	#TCIFLUSH
 0

	)

206 
	#TCOFLUSH
 1

	)

207 
	#TCIOFLUSH
 2

	)

210 
	#TCSANOW
 0

	)

211 
	#TCSADRAIN
 1

	)

212 
	#TCSAFLUSH
 2

	)

214 
	t•ìd_t
;

216 
•ìd_t
 
cfgëi•ìd
(
ãrmios
 *
ãrmios_p
);

217 
•ìd_t
 
cfgëo•ìd
(
ãrmios
 *
ãrmios_p
);

218 
cf£ti•ìd
(
ãrmios
 *
ãrmios_p
, 
•ìd_t
 
•ìd
);

219 
cf£to•ìd
(
ãrmios
 *
ãrmios_p
, 
•ìd_t
 
•ìd
);

220 
tcdøö
(
fûdes
);

221 
tcÊow
(
fûdes
, 
a˘i⁄
);

222 
tcÊush
(
fûdes
, 
queue_£À˘‹
);

223 
tcgë©å
(
fûdes
, 
ãrmios
 *
ãrmios_p
);

224 
tc£ndbªak
(
fûdes
, 
duøti⁄
);

225 
tc£èâr
(
fûdes
, 
›ti⁄Æ_a˘i⁄s
,

226 
ãrmios
 *
ãrmios_p
);

	@include/time.h

1 #i‚de‡
_TIME_H


2 
	#_TIME_H


	)

4 #i‚de‡
_TIME_T


5 
	#_TIME_T


	)

6 
	ttime_t
;

9 #i‚de‡
_SIZE_T


10 
	#_SIZE_T


	)

11 
	tsize_t
;

14 
	#CLOCKS_PER_SEC
 100

	)

16 
	t˛ock_t
;

18 
	stm
 {

19 
	mtm_£c
;

20 
	mtm_mö
;

21 
	mtm_hour
;

22 
	mtm_mday
;

23 
	mtm_m⁄
;

24 
	mtm_yór
;

25 
	mtm_wday
;

26 
	mtm_yday
;

27 
	mtm_isd°
;

30 
˛ock_t
 
˛ock
();

31 
time_t
 
time
—ime_à* 
ç
);

32 
dif·ime
(
time_t
 
time2
,Åime_à
time1
);

33 
time_t
 
mktime
(
tm
 * 
ç
);

35 * 
as˘ime
(c⁄° 
tm
 * 
ç
);

36 * 
˘ime
(c⁄° 
time_t
 * 
ç
);

37 
tm
 * 
gmtime
(c⁄° 
time_t
 *
ç
);

38 
tm
 *
loˇ…ime
(c⁄° 
time_t
 * 
ç
);

39 
size_t
 
°r·ime
(* 
s
, size_à
smax
, c⁄° * 
fmt
, c⁄° 
tm
 * 
ç
);

40 
tz£t
();

	@include/unistd.h

1 #i‚de‡
_UNISTD_H


2 
	#_UNISTD_H


	)

5 
	#_POSIX_VERSION
 198808L

	)

7 
	#_POSIX_CHOWN_RESTRICTED


	)

8 
	#_POSIX_NO_TRUNC


	)

9 
	#_POSIX_VDISABLE
 '\0'

	)

13 
	#STDIN_FILENO
 0

	)

14 
	#STDOUT_FILENO
 1

	)

15 
	#STDERR_FILENO
 2

	)

17 #i‚de‡
NULL


18 
	#NULL
 ((*)0)

	)

22 
	#F_OK
 0

	)

23 
	#X_OK
 1

	)

24 
	#W_OK
 2

	)

25 
	#R_OK
 4

	)

28 
	#SEEK_SET
 0

	)

29 
	#SEEK_CUR
 1

	)

30 
	#SEEK_END
 2

	)

33 
	#_SC_ARG_MAX
 1

	)

34 
	#_SC_CHILD_MAX
 2

	)

35 
	#_SC_CLOCKS_PER_SEC
 3

	)

36 
	#_SC_NGROUPS_MAX
 4

	)

37 
	#_SC_OPEN_MAX
 5

	)

38 
	#_SC_JOB_CONTROL
 6

	)

39 
	#_SC_SAVED_IDS
 7

	)

40 
	#_SC_VERSION
 8

	)

43 
	#_PC_LINK_MAX
 1

	)

44 
	#_PC_MAX_CANON
 2

	)

45 
	#_PC_MAX_INPUT
 3

	)

46 
	#_PC_NAME_MAX
 4

	)

47 
	#_PC_PATH_MAX
 5

	)

48 
	#_PC_PIPE_BUF
 6

	)

49 
	#_PC_NO_TRUNC
 7

	)

50 
	#_PC_VDISABLE
 8

	)

51 
	#_PC_CHOWN_RESTRICTED
 9

	)

53 
	~<sys/°©.h
>

54 
	~<sys/times.h
>

55 
	~<sys/ut¢ame.h
>

56 
	~<utime.h
>

58 #ifde‡
__LIBRARY__


60 
	#__NR_£tup
 0

	)

61 
	#__NR_exô
 1

	)

62 
	#__NR_f‹k
 2

	)

63 
	#__NR_ªad
 3

	)

64 
	#__NR_wrôe
 4

	)

65 
	#__NR_›í
 5

	)

66 
	#__NR_˛o£
 6

	)

67 
	#__NR_waôpid
 7

	)

68 
	#__NR_¸ót
 8

	)

69 
	#__NR_lök
 9

	)

70 
	#__NR_u∆ök
 10

	)

71 
	#__NR_execve
 11

	)

72 
	#__NR_chdú
 12

	)

73 
	#__NR_time
 13

	)

74 
	#__NR_mknod
 14

	)

75 
	#__NR_chmod
 15

	)

76 
	#__NR_chown
 16

	)

77 
	#__NR_bªak
 17

	)

78 
	#__NR_°©
 18

	)

79 
	#__NR_l£ek
 19

	)

80 
	#__NR_gëpid
 20

	)

81 
	#__NR_mou¡
 21

	)

82 
	#__NR_umou¡
 22

	)

83 
	#__NR_£tuid
 23

	)

84 
	#__NR_gëuid
 24

	)

85 
	#__NR_°ime
 25

	)

86 
	#__NR_±ø˚
 26

	)

87 
	#__NR_Æ¨m
 27

	)

88 
	#__NR_f°©
 28

	)

89 
	#__NR_∑u£
 29

	)

90 
	#__NR_utime
 30

	)

91 
	#__NR_°ty
 31

	)

92 
	#__NR_gây
 32

	)

93 
	#__NR_ac˚ss
 33

	)

94 
	#__NR_ni˚
 34

	)

95 
	#__NR_·ime
 35

	)

96 
	#__NR_sync
 36

	)

97 
	#__NR_kûl
 37

	)

98 
	#__NR_ª«me
 38

	)

99 
	#__NR_mkdú
 39

	)

100 
	#__NR_rmdú
 40

	)

101 
	#__NR_dup
 41

	)

102 
	#__NR_pùe
 42

	)

103 
	#__NR_times
 43

	)

104 
	#__NR_¥of
 44

	)

105 
	#__NR_brk
 45

	)

106 
	#__NR_£tgid
 46

	)

107 
	#__NR_gëgid
 47

	)

108 
	#__NR_sig«l
 48

	)

109 
	#__NR_gëeuid
 49

	)

110 
	#__NR_gëegid
 50

	)

111 
	#__NR_ac˘
 51

	)

112 
	#__NR_phys
 52

	)

113 
	#__NR_lock
 53

	)

114 
	#__NR_io˘l
 54

	)

115 
	#__NR_f˙é
 55

	)

116 
	#__NR_mpx
 56

	)

117 
	#__NR_£çgid
 57

	)

118 
	#__NR_ulimô
 58

	)

119 
	#__NR_u«me
 59

	)

120 
	#__NR_umask
 60

	)

121 
	#__NR_chroŸ
 61

	)

122 
	#__NR_u°©
 62

	)

123 
	#__NR_dup2
 63

	)

124 
	#__NR_gëµid
 64

	)

125 
	#__NR_gëpgΩ
 65

	)

126 
	#__NR_£tsid
 66

	)

127 
	#__NR_siga˘i⁄
 67

	)

128 
	#__NR_sgëmask
 68

	)

129 
	#__NR_s£tmask
 69

	)

130 
	#__NR_£åeuid
 70

	)

131 
	#__NR_£åegid
 71

	)

133 
	#_sysˇŒ0
(
ty≥
,
«me
) \

134 
ty≥
 
	`«me
() \

136 
__ªs
; \

137 
__asm__
 volatile ("int $0x80" \

138 : "˜" (
__ªs
) \

139 : "0" (
__NR_
##
«me
)); \

140 i‡(
__ªs
 >= 0) \

141  (
ty≥
Ë
__ªs
; \

142 
î∫o
 = -
__ªs
; \

144 }

	)

146 
	#_sysˇŒ1
(
ty≥
,
«me
,
©y≥
,
a
) \

147 
ty≥
 
	`«me
(
©y≥
 
a
) \

149 
__ªs
; \

150 
__asm__
 volatile ("int $0x80" \

151 : "˜" (
__ªs
) \

152 : "0" (
__NR_
##
«me
),"b" (()(
a
))); \

153 i‡(
__ªs
 >= 0) \

154  (
ty≥
Ë
__ªs
; \

155 
î∫o
 = -
__ªs
; \

157 }

	)

159 
	#_sysˇŒ2
(
ty≥
,
«me
,
©y≥
,
a
,
bty≥
,
b
) \

160 
ty≥
 
	`«me
(
©y≥
 
a
,
bty≥
 
b
) \

162 
__ªs
; \

163 
__asm__
 volatile ("int $0x80" \

164 : "˜" (
__ªs
) \

165 : "0" (
__NR_
##
«me
),"b" (()(
a
)),"c" (()(
b
))); \

166 i‡(
__ªs
 >= 0) \

167  (
ty≥
Ë
__ªs
; \

168 
î∫o
 = -
__ªs
; \

170 }

	)

172 
	#_sysˇŒ3
(
ty≥
,
«me
,
©y≥
,
a
,
bty≥
,
b
,
˘y≥
,
c
) \

173 
ty≥
 
	`«me
(
©y≥
 
a
,
bty≥
 
b
,
˘y≥
 
c
) \

175 
__ªs
; \

176 
__asm__
 volatile ("int $0x80" \

177 : "˜" (
__ªs
) \

178 : "0" (
__NR_
##
«me
),"b" (()(
a
)),"c" (()(
b
)),"d" (()(
c
))); \

179 i‡(
__ªs
>=0) \

180  (
ty≥
Ë
__ªs
; \

181 
î∫o
=-
__ªs
; \

183 }

	)

187 
î∫o
;

189 
ac˚ss
(c⁄° * 
fûíame
, 
mode_t
 
mode
);

190 
ac˘
(c⁄° * 
fûíame
);

191 
Æ¨m
(
£c
);

192 
brk
(* 
íd_d©a_£gmít
);

193 * 
sbrk
(
±rdiff_t
 
ö¸emít
);

194 
chdú
(c⁄° * 
fûíame
);

195 
chmod
(c⁄° * 
fûíame
, 
mode_t
 
mode
);

196 
chown
(c⁄° * 
fûíame
, 
uid_t
 
ow√r
, 
gid_t
 
group
);

197 
chroŸ
(c⁄° * 
fûíame
);

198 
˛o£
(
fûdes
);

199 
¸ót
(c⁄° * 
fûíame
, 
mode_t
 
mode
);

200 
dup
(
fûdes
);

201 
execve
(c⁄° * 
fûíame
, ** 
¨gv
, ** 
ívp
);

202 
execv
(c⁄° * 
∑th«me
, ** 
¨gv
);

203 
execvp
(c⁄° * 
fûe
, ** 
¨gv
);

204 
exe˛
(c⁄° * 
∑th«me
, * 
¨g0
, ...);

205 
exe˛p
(c⁄° * 
fûe
, * 
¨g0
, ...);

206 
exe˛e
(c⁄° * 
∑th«me
, * 
¨g0
, ...);

207 vﬁ©ûê
exô
(
°©us
);

208 vﬁ©ûê
_exô
(
°©us
);

209 
f˙é
(
fûdes
, 
cmd
, ...);

210 
f‹k
();

211 
gëpid
();

212 
gëuid
();

213 
gëeuid
();

214 
gëgid
();

215 
gëegid
();

216 
io˘l
(
fûdes
, 
cmd
, ...);

217 
kûl
(
pid_t
 
pid
, 
sig«l
);

218 
lök
(c⁄° * 
fûíame1
, c⁄° * 
fûíame2
);

219 
l£ek
(
fûdes
, 
off_t
 
off£t
, 
‹igö
);

220 
mknod
(c⁄° * 
fûíame
, 
mode_t
 
mode
, 
dev_t
 
dev
);

221 
mou¡
(c⁄° * 
•ecülfûe
, c⁄° * 
dú
, 
rwÊag
);

222 
ni˚
(
vÆ
);

223 
›í
(c⁄° * 
fûíame
, 
Êag
, ...);

224 
∑u£
();

225 
pùe
(* 
fûdes
);

226 
ªad
(
fûdes
, * 
buf
, 
off_t
 
cou¡
);

227 
£çgΩ
();

228 
£çgid
(
pid_t
 
pid
,pid_à
pgid
);

229 
£tuid
(
uid_t
 
uid
);

230 
£tgid
(
gid_t
 
gid
);

231 (*
sig«l
(
sig
, (*
‚
)()))();

232 
	`°©
(c⁄° * 
fûíame
, 
°©
 * 
°©_buf
);

233 
	`f°©
(
fûdes
, 
°©
 * 
°©_buf
);

234 
	`°ime
(
time_t
 * 
çå
);

235 
	`sync
();

236 
time_t
 
	`time
—ime_à* 
éoc
);

237 
time_t
 
	`times
(
tms
 * 
tbuf
);

238 
	`ulimô
(
cmd
, 
limô
);

239 
mode_t
 
	`umask
(mode_à
mask
);

240 
	`umou¡
(c⁄° * 
•ecülfûe
);

241 
	`u«me
(
ut¢ame
 * 
«me
);

242 
	`u∆ök
(c⁄° * 
fûíame
);

243 
	`u°©
(
dev_t
 
dev
, 
u°©
 * 
ubuf
);

244 
	`utime
(c⁄° * 
fûíame
, 
utimbuf
 * 
times
);

245 
pid_t
 
	`waôpid
’id_à
pid
,* 
waô_°©
,
›ti⁄s
);

246 
pid_t
 
	`waô
(* 
waô_°©
);

247 
	`wrôe
(
fûdes
, c⁄° * 
buf
, 
off_t
 
cou¡
);

248 
	`dup2
(
ﬁdfd
, 
√wfd
);

249 
	`gëµid
();

250 
pid_t
 
	`gëpgΩ
();

251 
pid_t
 
	`£tsid
();

	@include/utime.h

1 #i‚de‡
_UTIME_H


2 
	#_UTIME_H


	)

4 
	~<sys/ty≥s.h
>

6 
	sutimbuf
 {

7 
time_t
 
	ma˘ime
;

8 
time_t
 
	mmodtime
;

11 
utime
(c⁄° *
fûíame
, 
utimbuf
 *
times
);

	@init/main.c

7 
	#__LIBRARY__


	)

8 
	~<uni°d.h
>

9 
	~<time.h
>

23 
ölöe
 
	$_sysˇŒ0
(,
f‹k
)

24 
ölöe
 
	$_sysˇŒ0
(,
∑u£
)

25 
ölöe
 
	$_sysˇŒ1
(,
£tup
,*,
BIOS
)

26 
ölöe
 
	$_sysˇŒ0
(,
sync
)

28 
	~<löux/ây.h
>

29 
	~<löux/sched.h
>

30 
	~<löux/hód.h
>

31 
	~<asm/sy°em.h
>

32 
	~<asm/io.h
>

34 
	~<°ddef.h
>

35 
	~<°d¨g.h
>

36 
	~<uni°d.h
>

37 
	~<f˙é.h
>

38 
	~<sys/ty≥s.h
>

40 
	~<löux/fs.h
>

42 
¥ötbuf
[1024];

44 
	`v•rötf
();

45 
	`öô
();

46 
	`blk_dev_öô
();

47 
	`chr_dev_öô
();

48 
	`hd_öô
();

49 
	`Ê›py_öô
();

50 
	`mem_öô
(
°¨t
, 
íd
);

51 
	`rd_öô
(
mem_°¨t
, 
Àngth
);

52 
	`kî√l_mktime
(
tm
 *Åm);

53 
°¨tup_time
;

58 
	#EXT_MEM_K
 (*(*)0x90002)

	)

59 
	#DRIVE_INFO
 (*(
drive_öfo
 *)0x90080)

	)

60 
	#ORIG_ROOT_DEV
 (*(*)0x901FC)

	)

69 
	#CMOS_READ
(
addr
) ({ \

70 
	`outb_p
(0x80|
addr
,0x70); \

71 
	`öb_p
(0x71); \

72 
	}
})

	)

74 
	#BCD_TO_BIN
(
vÆ
Ë((vÆ)=((vÆ)&15Ë+ ((vÆ)>>4)*10)

	)

76 
	$time_öô
()

78 
tm
 
time
;

81 
time
.
tm_£c
 = 
	`CMOS_READ
(0);

82 
time
.
tm_mö
 = 
	`CMOS_READ
(2);

83 
time
.
tm_hour
 = 
	`CMOS_READ
(4);

84 
time
.
tm_mday
 = 
	`CMOS_READ
(7);

85 
time
.
tm_m⁄
 = 
	`CMOS_READ
(8);

86 
time
.
tm_yór
 = 
	`CMOS_READ
(9);

87 } 
time
.
tm_£c
 !
	`CMOS_READ
(0));

88 
	`BCD_TO_BIN
(
time
.
tm_£c
);

89 
	`BCD_TO_BIN
(
time
.
tm_mö
);

90 
	`BCD_TO_BIN
(
time
.
tm_hour
);

91 
	`BCD_TO_BIN
(
time
.
tm_mday
);

92 
	`BCD_TO_BIN
(
time
.
tm_m⁄
);

93 
	`BCD_TO_BIN
(
time
.
tm_yór
);

94 
time
.
tm_m⁄
--;

95 
°¨tup_time
 = 
	`kî√l_mktime
(&
time
);

96 
	}
}

98 
	gmem‹y_íd
 = 0;

99 
	gbuf„r_mem‹y_íd
 = 0;

100 
	gmaö_mem‹y_°¨t
 = 0;

102 
	sdrive_öfo
 { 
	mdummy
[32]; } 
	gdrive_öfo
;

104 
	$maö
()

110 
ROOT_DEV
 = 
ORIG_ROOT_DEV
;

111 
drive_öfo
 = 
DRIVE_INFO
;

112 
mem‹y_íd
 = (1<<20Ë+ (
EXT_MEM_K
<<10);

113 
mem‹y_íd
 &= 0xfffff000;

114 i‡(
mem‹y_íd
 > 16*1024*1024)

115 
mem‹y_íd
 = 16*1024*1024;

116 i‡(
mem‹y_íd
 > 12*1024*1024)

117 
buf„r_mem‹y_íd
 = 4*1024*1024;

118 i‡(
mem‹y_íd
 > 6*1024*1024)

119 
buf„r_mem‹y_íd
 = 2*1024*1024;

121 
buf„r_mem‹y_íd
 = 1*1024*1024;

122 
maö_mem‹y_°¨t
 = 
buf„r_mem‹y_íd
;

123 #ifde‡
RAMDISK


124 
maö_mem‹y_°¨t
 +
	`rd_öô
(maö_mem‹y_°¨t, 
RAMDISK
*1024);

126 
	`mem_öô
(
maö_mem‹y_°¨t
,
mem‹y_íd
);

127 
	`å≠_öô
();

128 
	`blk_dev_öô
();

129 
	`chr_dev_öô
();

130 
	`ây_öô
();

131 
	`time_öô
();

132 
	`sched_öô
();

133 
	`buf„r_öô
(
buf„r_mem‹y_íd
);

134 
	`hd_öô
();

135 
	`Ê›py_öô
();

136 
	`°i
();

137 
	`move_to_u£r_mode
();

138 i‡(!
	`f‹k
()) {

139 
	`öô
();

148 ;;Ë
	`∑u£
();

149 
	}
}

151 
	$¥ötf
(c⁄° *
fmt
, ...)

153 
va_li°
 
¨gs
;

154 
i
;

156 
	`va_°¨t
(
¨gs
, 
fmt
);

157 
	`wrôe
(1,
¥ötbuf
,
i
=
	`v•rötf
’rötbuf, 
fmt
, 
¨gs
));

158 
	`va_íd
(
¨gs
);

159  
i
;

160 
	}
}

162 * 
	g¨gv_rc
[] = { "/bö/sh", 
NULL
 };

163 * 
	gívp_rc
[] = { "HOME=/", 
NULL
 };

165 * 
	g¨gv
[] = { "-/bö/sh",
NULL
 };

166 * 
	gívp
[] = { "HOME=/u§/roŸ", 
NULL
 };

168 
	$öô
()

170 
pid
,
i
;

172 
	`£tup
((*Ë&
drive_öfo
);

173 (Ë
	`›í
("/dev/ây0",
O_RDWR
,0);

174 (Ë
	`dup
(0);

175 (Ë
	`dup
(0);

176 
	`¥ötf
("%d buf„r†%d byã†buf„∏•a˚\n\r",
NR_BUFFERS
,

177 
NR_BUFFERS
*
BLOCK_SIZE
);

178 
	`¥ötf
("Fªêmem: %d byãs\n\r",
mem‹y_íd
-
maö_mem‹y_°¨t
);

179 i‡(!(
pid
=
	`f‹k
())) {

180 
	`˛o£
(0);

181 i‡(
	`›í
("/ëc/rc",
O_RDONLY
,0))

182 
	`_exô
(1);

183 
	`execve
("/bö/sh",
¨gv_rc
,
ívp_rc
);

184 
	`_exô
(2);

186 i‡(
pid
>0)

187 
pid
 !
	`waô
(&
i
))

190 i‡((
pid
=
	`f‹k
())<0) {

191 
	`¥ötf
("Fork failed in init\r\n");

194 i‡(!
pid
) {

195 
	`˛o£
(0);close(1);close(2);

196 
	`£tsid
();

197 (Ë
	`›í
("/dev/ây0",
O_RDWR
,0);

198 (Ë
	`dup
(0);

199 (Ë
	`dup
(0);

200 
	`_exô
(
	`execve
("/bö/sh",
¨gv
,
ívp
));

203 i‡(
pid
 =
	`waô
(&
i
))

205 
	`¥ötf
("\n\rchûd %d dõd wôh codê%04x\n\r",
pid
,
i
);

206 
	`sync
();

208 
	`_exô
(0);

209 
	}
}

	@kernel/blk_drv/blk.h

1 #i‚de‡
_BLK_H


2 
	#_BLK_H


	)

4 
	#NR_BLK_DEV
 7

	)

15 
	#NR_REQUEST
 32

	)

23 
	sªque°
 {

24 
	mdev
;

25 
	mcmd
;

26 
	mîr‹s
;

27 
	m£˘‹
;

28 
	mƒ_£˘‹s
;

29 * 
	mbuf„r
;

30 
èsk_°ru˘
 * 
	mwaôög
;

31 
buf„r_hód
 * 
	mbh
;

32 
ªque°
 * 
	m√xt
;

40 
	#IN_ORDER
(
s1
,
s2
) \

41 ((
s1
)->
cmd
<(
s2
)->cmd || (s1)->cmd==(s2)->cmd && \

42 ((
s1
)->
dev
 < (
s2
)->dev || ((s1)->dev == (s2)->dev && \

43 (
s1
)->
£˘‹
 < (
s2
)->£˘‹)))

	)

45 
	sblk_dev_°ru˘
 {

46 (*
	mªque°_‚
)();

47 
ªque°
 * 
	mcuºít_ªque°
;

50 
blk_dev_°ru˘
 
blk_dev
[
NR_BLK_DEV
];

51 
ªque°
Ñeque°[
NR_REQUEST
];

52 
èsk_°ru˘
 * 
waô_f‹_ªque°
;

54 #ifde‡
MAJOR_NR


61 #i‡(
MAJOR_NR
 == 1)

63 
	#DEVICE_NAME
 "ømdisk"

	)

64 
	#DEVICE_REQUEST
 
do_rd_ªque°


	)

65 
	#DEVICE_NR
(
devi˚
Ë((devi˚Ë& 7)

	)

66 
	#DEVICE_ON
(
devi˚
)

	)

67 
	#DEVICE_OFF
(
devi˚
)

	)

69 #ñi‡(
MAJOR_NR
 == 2)

71 
	#DEVICE_NAME
 "Ê›py"

	)

72 
	#DEVICE_INTR
 
do_Ê›py


	)

73 
	#DEVICE_REQUEST
 
do_fd_ªque°


	)

74 
	#DEVICE_NR
(
devi˚
Ë((devi˚Ë& 3)

	)

75 
	#DEVICE_ON
(
devi˚
Ë
	`Ê›py_⁄
(
	`DEVICE_NR
(devi˚))

	)

76 
	#DEVICE_OFF
(
devi˚
Ë
	`Ê›py_off
(
	`DEVICE_NR
(devi˚))

	)

78 #ñi‡(
MAJOR_NR
 == 3)

80 
	#DEVICE_NAME
 "h¨ddisk"

	)

81 
	#DEVICE_INTR
 
do_hd


	)

82 
	#DEVICE_REQUEST
 
do_hd_ªque°


	)

83 
	#DEVICE_NR
(
devi˚
Ë(
	`MINOR
(devi˚)/5)

	)

84 
	#DEVICE_ON
(
devi˚
)

	)

85 
	#DEVICE_OFF
(
devi˚
)

	)

93 
	#CURRENT
 (
blk_dev
[
MAJOR_NR
].
cuºít_ªque°
)

	)

94 
	#CURRENT_DEV
 
	`DEVICE_NR
(
CURRENT
->
dev
)

	)

96 #ifde‡
DEVICE_INTR


97 (*
DEVICE_INTR
)(Ë
NULL
;

99 (
DEVICE_REQUEST
)();

101 
ölöe
 
	$u∆ock_buf„r
(
buf„r_hód
 * 
bh
)

103 i‡(!
bh
->
b_lock
)

104 
	`¥ötk
(
DEVICE_NAME
 ": free buffer being unlocked\n");

105 
bh
->
b_lock
=0;

106 
	`wake_up
(&
bh
->
b_waô
);

107 
	}
}

109 
ölöe
 
	$íd_ªque°
(
u±od©e
)

111 
	`DEVICE_OFF
(
CURRENT
->
dev
);

112 i‡(
CURRENT
->
bh
) {

113 
CURRENT
->
bh
->
b_u±od©e
 = 
u±od©e
;

114 
	`u∆ock_buf„r
(
CURRENT
->
bh
);

116 i‡(!
u±od©e
) {

117 
	`¥ötk
(
DEVICE_NAME
 " I/OÉrror\n\r");

118 
	`¥ötk
("dev %04x, block %d\n\r",
CURRENT
->
dev
,

119 
CURRENT
->
bh
->
b_blockƒ
);

121 
	`wake_up
(&
CURRENT
->
waôög
);

122 
	`wake_up
(&
waô_f‹_ªque°
);

123 
CURRENT
->
dev
 = -1;

124 
CURRENT
 = CURRENT->
√xt
;

125 
	}
}

127 
	#INIT_REQUEST
 \

128 
ª≥©
: \

129 i‡(!
CURRENT
) \

131 i‡(
	`MAJOR
(
CURRENT
->
dev
Ë!
MAJOR_NR
) \

132 
	`∑nic
(
DEVICE_NAME
 ":ÑequestÜist destroyed"); \

133 i‡(
CURRENT
->
bh
) { \

134 i‡(!
CURRENT
->
bh
->
b_lock
) \

135 
	`∑nic
(
DEVICE_NAME
 ": blockÇotÜocked"); \

136 }

	)

	@kernel/blk_drv/floppy.c

33 
	~<löux/sched.h
>

34 
	~<löux/fs.h
>

35 
	~<löux/kî√l.h
>

36 
	~<löux/fdªg.h
>

37 
	~<asm/sy°em.h
>

38 
	~<asm/io.h
>

39 
	~<asm/£gmít.h
>

41 
	#MAJOR_NR
 2

	)

42 
	~"blk.h
"

44 
	gªˇlibøã
 = 0;

45 
	gª£t
 = 0;

46 
	g£ek
 = 0;

48 
cuºít_DOR
;

50 
	#immoutb_p
(
vÆ
,
p‹t
) \

51 
	`__asm__
("outb %0,%1\n\tjm∞1f\n1:\tjm∞1f\n1:"::"a" ((Ë(
vÆ
)),"i" (
p‹t
))

	)

53 
	#TYPE
(
x
Ë((x)>>2)

	)

54 
	#DRIVE
(
x
Ë((x)&0x03)

	)

60 
	#MAX_ERRORS
 8

	)

65 
	#MAX_REPLIES
 7

	)

66 
	gª∂y_buf„r
[
MAX_REPLIES
];

67 
	#ST0
 (
ª∂y_buf„r
[0])

	)

68 
	#ST1
 (
ª∂y_buf„r
[1])

	)

69 
	#ST2
 (
ª∂y_buf„r
[2])

	)

70 
	#ST3
 (
ª∂y_buf„r
[3])

	)

82 
	sÊ›py_°ru˘
 {

83 
	msize
, 
	m£˘
, 
	mhód
, 
	måack
, 
	m°ªtch
;

84 
	mg≠
,
	møã
,
	m•ec1
;

85 } 
	gÊ›py_ty≥
[] = {

104 
Ê›py_öãºu±
();

105 
tmp_Ê›py_¨ó
[1024];

112 
	gcur_•ec1
 = -1;

113 
	gcur_øã
 = -1;

114 
Ê›py_°ru˘
 * 
	gÊ›py
 = 
Ê›py_ty≥
;

115 
	gcuºít_drive
 = 0;

116 
	g£˘‹
 = 0;

117 
	ghód
 = 0;

118 
	gåack
 = 0;

119 
	g£ek_åack
 = 0;

120 
	gcuºít_åack
 = 255;

121 
	gcomm™d
 = 0;

122 
	g£À˘ed
 = 0;

123 
èsk_°ru˘
 * 
	gwaô_⁄_Ê›py_£À˘
 = 
NULL
;

125 
	$Ê›py_de£À˘
(
ƒ
)

127 i‡(
ƒ
 !(
cuºít_DOR
 & 3))

128 
	`¥ötk
("floppy_deselect: driveÇot selected\n\r");

129 
£À˘ed
 = 0;

130 
	`wake_up
(&
waô_⁄_Ê›py_£À˘
);

131 
	}
}

139 
	$Ê›py_ch™ge
(
ƒ
)

141 
ª≥©
:

142 
	`Ê›py_⁄
(
ƒ
);

143 (
cuºít_DOR
 & 3Ë!
ƒ
 && 
£À˘ed
)

144 
	`öãºu±ibÀ_¶ìp_⁄
(&
waô_⁄_Ê›py_£À˘
);

145 i‡((
cuºít_DOR
 & 3Ë!
ƒ
)

146 
ª≥©
;

147 i‡(
	`öb
(
FD_DIR
) & 0x80) {

148 
	`Ê›py_off
(
ƒ
);

151 
	`Ê›py_off
(
ƒ
);

153 
	}
}

155 
	#c›y_buf„r
(
‰om
,
to
) \

156 
	`__asm__
("cld ;Ñep ; movsl" \

157 ::"c" (
BLOCK_SIZE
/4),"S" (()(
‰om
)),"D" (()(
to
)) \

158 :"cx","di","si")

	)

160 
	$£tup_DMA
()

162 
addr
 = (Ë
CURRENT
->
buf„r
;

164 
	`˛i
();

165 i‡(
addr
 >= 0x100000) {

166 
addr
 = (Ë
tmp_Ê›py_¨ó
;

167 i‡(
comm™d
 =
FD_WRITE
)

168 
	`c›y_buf„r
(
CURRENT
->
buf„r
,
tmp_Ê›py_¨ó
);

171 
	`immoutb_p
(4|2,10);

174 
	`__asm__
("outb %%al,$12\n\tjmp 1f\n1:\tjmp 1f\n1:\t"

176 "a" ((Ë((
comm™d
 =
FD_READ
)?
DMA_READ
:
DMA_WRITE
)));

178 
	`immoutb_p
(
addr
,4);

179 
addr
 >>= 8;

181 
	`immoutb_p
(
addr
,4);

182 
addr
 >>= 8;

184 
	`immoutb_p
(
addr
,0x81);

186 
	`immoutb_p
(0xff,5);

188 
	`immoutb_p
(3,5);

190 
	`immoutb_p
(0|2,10);

191 
	`°i
();

192 
	}
}

194 
	$ouçut_byã
(
byã
)

196 
cou¡î
;

197 
°©us
;

199 i‡(
ª£t
)

201 
cou¡î
 = 0 ; counter < 10000 ; counter++) {

202 
°©us
 = 
	`öb_p
(
FD_STATUS
Ë& (
STATUS_READY
 | 
STATUS_DIR
);

203 i‡(
°©us
 =
STATUS_READY
) {

204 
	`outb
(
byã
,
FD_DATA
);

208 
ª£t
 = 1;

209 
	`¥ötk
("UnableÅo send byteÅo FDC\n\r");

210 
	}
}

212 
	$ªsu…
()

214 
i
 = 0, 
cou¡î
, 
°©us
;

216 i‡(
ª£t
)

218 
cou¡î
 = 0 ; counter < 10000 ; counter++) {

219 
°©us
 = 
	`öb_p
(
FD_STATUS
)&(
STATUS_DIR
|
STATUS_READY
|
STATUS_BUSY
);

220 i‡(
°©us
 =
STATUS_READY
)

221  
i
;

222 i‡(
°©us
 =(
STATUS_DIR
|
STATUS_READY
|
STATUS_BUSY
)) {

223 i‡(
i
 >
MAX_REPLIES
)

225 
ª∂y_buf„r
[
i
++] = 
	`öb_p
(
FD_DATA
);

228 
ª£t
 = 1;

229 
	`¥ötk
("GetstatusÅimes out\n\r");

231 
	}
}

233 
	$bad_Êp_öå
()

235 
CURRENT
->
îr‹s
++;

236 i‡(
CURRENT
->
îr‹s
 > 
MAX_ERRORS
) {

237 
	`Ê›py_de£À˘
(
cuºít_drive
);

238 
	`íd_ªque°
(0);

240 i‡(
CURRENT
->
îr‹s
 > 
MAX_ERRORS
/2)

241 
ª£t
 = 1;

243 
ªˇlibøã
 = 1;

244 
	}
}

250 
	$rw_öãºu±
()

252 i‡(
	`ªsu…
(Ë!7 || (
ST0
 & 0xf8Ë|| (
ST1
 & 0xbfË|| (
ST2
 & 0x73)) {

253 i‡(
ST1
 & 0x02) {

254 
	`¥ötk
("Drivê%d i†wrôê¥Ÿe˘ed\n\r",
cuºít_drive
);

255 
	`Ê›py_de£À˘
(
cuºít_drive
);

256 
	`íd_ªque°
(0);

258 
	`bad_Êp_öå
();

259 
	`do_fd_ªque°
();

262 i‡(
comm™d
 =
FD_READ
 && ()(
CURRENT
->
buf„r
) >= 0x100000)

263 
	`c›y_buf„r
(
tmp_Ê›py_¨ó
,
CURRENT
->
buf„r
);

264 
	`Ê›py_de£À˘
(
cuºít_drive
);

265 
	`íd_ªque°
(1);

266 
	`do_fd_ªque°
();

267 
	}
}

269 
ölöe
 
	$£tup_rw_Ê›py
()

271 
	`£tup_DMA
();

272 
do_Ê›py
 = 
rw_öãºu±
;

273 
	`ouçut_byã
(
comm™d
);

274 
	`ouçut_byã
(
hód
<<2 | 
cuºít_drive
);

275 
	`ouçut_byã
(
åack
);

276 
	`ouçut_byã
(
hód
);

277 
	`ouçut_byã
(
£˘‹
);

278 
	`ouçut_byã
(2);

279 
	`ouçut_byã
(
Ê›py
->
£˘
);

280 
	`ouçut_byã
(
Ê›py
->
g≠
);

281 
	`ouçut_byã
(0xFF);

282 i‡(
ª£t
)

283 
	`do_fd_ªque°
();

284 
	}
}

291 
	$£ek_öãºu±
()

294 
	`ouçut_byã
(
FD_SENSEI
);

295 i‡(
	`ªsu…
(Ë!2 || (
ST0
 & 0xF8Ë!0x20 || 
ST1
 !
£ek_åack
) {

296 
	`bad_Êp_öå
();

297 
	`do_fd_ªque°
();

300 
cuºít_åack
 = 
ST1
;

301 
	`£tup_rw_Ê›py
();

302 
	}
}

309 
	$å™s„r
()

311 i‡(
cur_•ec1
 !
Ê›py
->
•ec1
) {

312 
cur_•ec1
 = 
Ê›py
->
•ec1
;

313 
	`ouçut_byã
(
FD_SPECIFY
);

314 
	`ouçut_byã
(
cur_•ec1
);

315 
	`ouçut_byã
(6);

317 i‡(
cur_øã
 !
Ê›py
->
øã
)

318 
	`outb_p
(
cur_øã
 = 
Ê›py
->
øã
,
FD_DCR
);

319 i‡(
ª£t
) {

320 
	`do_fd_ªque°
();

323 i‡(!
£ek
) {

324 
	`£tup_rw_Ê›py
();

327 
do_Ê›py
 = 
£ek_öãºu±
;

328 i‡(
£ek_åack
) {

329 
	`ouçut_byã
(
FD_SEEK
);

330 
	`ouçut_byã
(
hód
<<2 | 
cuºít_drive
);

331 
	`ouçut_byã
(
£ek_åack
);

333 
	`ouçut_byã
(
FD_RECALIBRATE
);

334 
	`ouçut_byã
(
hód
<<2 | 
cuºít_drive
);

336 i‡(
ª£t
)

337 
	`do_fd_ªque°
();

338 
	}
}

343 
	$ªˇl_öãºu±
()

345 
	`ouçut_byã
(
FD_SENSEI
);

346 i‡(
	`ªsu…
()!=2 || (
ST0
 & 0xE0) == 0x60)

347 
ª£t
 = 1;

349 
ªˇlibøã
 = 0;

350 
	`do_fd_ªque°
();

351 
	}
}

353 
	$u√x≥˘ed_Ê›py_öãºu±
()

355 
	`ouçut_byã
(
FD_SENSEI
);

356 i‡(
	`ªsu…
()!=2 || (
ST0
 & 0xE0) == 0x60)

357 
ª£t
 = 1;

359 
ªˇlibøã
 = 1;

360 
	}
}

362 
	$ªˇlibøã_Ê›py
()

364 
ªˇlibøã
 = 0;

365 
cuºít_åack
 = 0;

366 
do_Ê›py
 = 
ªˇl_öãºu±
;

367 
	`ouçut_byã
(
FD_RECALIBRATE
);

368 
	`ouçut_byã
(
hód
<<2 | 
cuºít_drive
);

369 i‡(
ª£t
)

370 
	`do_fd_ªque°
();

371 
	}
}

373 
	$ª£t_öãºu±
()

375 
	`ouçut_byã
(
FD_SENSEI
);

376 (Ë
	`ªsu…
();

377 
	`ouçut_byã
(
FD_SPECIFY
);

378 
	`ouçut_byã
(
cur_•ec1
);

379 
	`ouçut_byã
(6);

380 
	`do_fd_ªque°
();

381 
	}
}

386 
	$ª£t_Ê›py
()

388 
i
;

390 
ª£t
 = 0;

391 
cur_•ec1
 = -1;

392 
cur_øã
 = -1;

393 
ªˇlibøã
 = 1;

394 
	`¥ötk
("Reset-floppy called\n\r");

395 
	`˛i
();

396 
do_Ê›py
 = 
ª£t_öãºu±
;

397 
	`outb_p
(
cuºít_DOR
 & ~0x04,
FD_DOR
);

398 
i
=0 ; i<100 ; i++)

399 
	`__asm__
("nop");

400 
	`outb
(
cuºít_DOR
,
FD_DOR
);

401 
	`°i
();

402 
	}
}

404 
	$Ê›py_⁄_öãºu±
()

407 
£À˘ed
 = 1;

408 i‡(
cuºít_drive
 !(
cuºít_DOR
 & 3)) {

409 
cuºít_DOR
 &= 0xFC;

410 
cuºít_DOR
 |
cuºít_drive
;

411 
	`outb
(
cuºít_DOR
,
FD_DOR
);

412 
	`add_timî
(2,&
å™s„r
);

414 
	`å™s„r
();

415 
	}
}

417 
	$do_fd_ªque°
()

419 
block
;

421 
£ek
 = 0;

422 i‡(
ª£t
) {

423 
	`ª£t_Ê›py
();

426 i‡(
ªˇlibøã
) {

427 
	`ªˇlibøã_Ê›py
();

430 
INIT_REQUEST
;

431 
Ê›py
 = (
	`MINOR
(
CURRENT
->
dev
)>>2Ë+ 
Ê›py_ty≥
;

432 i‡(
cuºít_drive
 !
CURRENT_DEV
)

433 
£ek
 = 1;

434 
cuºít_drive
 = 
CURRENT_DEV
;

435 
block
 = 
CURRENT
->
£˘‹
;

436 i‡(
block
+2 > 
Ê›py
->
size
) {

437 
	`íd_ªque°
(0);

438 
ª≥©
;

440 
£˘‹
 = 
block
 % 
Ê›py
->
£˘
;

441 
block
 /
Ê›py
->
£˘
;

442 
hód
 = 
block
 % 
Ê›py
->head;

443 
åack
 = 
block
 / 
Ê›py
->
hód
;

444 
£ek_åack
 = 
åack
 << 
Ê›py
->
°ªtch
;

445 i‡(
£ek_åack
 !
cuºít_åack
)

446 
£ek
 = 1;

447 
£˘‹
++;

448 i‡(
CURRENT
->
cmd
 =
READ
)

449 
comm™d
 = 
FD_READ
;

450 i‡(
CURRENT
->
cmd
 =
WRITE
)

451 
comm™d
 = 
FD_WRITE
;

453 
	`∑nic
("do_fd_request: unknown command");

454 
	`add_timî
(
	`ticks_to_Ê›py_⁄
(
cuºít_drive
),&
Ê›py_⁄_öãºu±
);

455 
	}
}

457 
	$Ê›py_öô
()

459 
blk_dev
[
MAJOR_NR
].
ªque°_‚
 = 
DEVICE_REQUEST
;

460 
	`£t_å≠_g©e
(0x26,&
Ê›py_öãºu±
);

461 
	`outb
(
	`öb_p
(0x21)&~0x40,0x21);

462 
	}
}

	@kernel/blk_drv/hd.c

16 
	~<löux/c⁄fig.h
>

17 
	~<löux/sched.h
>

18 
	~<löux/fs.h
>

19 
	~<löux/kî√l.h
>

20 
	~<löux/hdªg.h
>

21 
	~<asm/sy°em.h
>

22 
	~<asm/io.h
>

23 
	~<asm/£gmít.h
>

25 
	#MAJOR_NR
 3

	)

26 
	~"blk.h
"

28 
	#CMOS_READ
(
addr
) ({ \

29 
	`outb_p
(0x80|
addr
,0x70); \

30 
	`öb_p
(0x71); \

31 })

	)

34 
	#MAX_ERRORS
 7

	)

35 
	#MAX_HD
 2

	)

37 
ªˇl_öå
();

39 
	gªˇlibøã
 = 1;

40 
	gª£t
 = 1;

45 
	shd_i_°ru˘
 {

46 
	mhód
,
	m£˘
,
	mcyl
,
	mwpcom
,
	mlz⁄e
,
	m˘l
;

48 #ifde‡
HD_TYPE


49 
hd_i_°ru˘
 
	ghd_öfo
[] = { 
HD_TYPE
 };

50 
	#NR_HD
 (( (
hd_öfo
))/( (
hd_i_°ru˘
)))

	)

52 
hd_i_°ru˘
 
	ghd_öfo
[] = { {0,0,0,0,0,0},{0,0,0,0,0,0} };

53 
	gNR_HD
 = 0;

56 
	shd_°ru˘
 {

57 
	m°¨t_£˘
;

58 
	mƒ_£˘s
;

59 } 
	ghd
[5*
MAX_HD
]={{0,0},};

61 
	#p‹t_ªad
(
p‹t
,
buf
,
ƒ
) \

62 
	`__asm__
("˛d;ªp;ösw"::"d" (
p‹t
),"D" (
buf
),"c" (
ƒ
):"cx","di")

	)

64 
	#p‹t_wrôe
(
p‹t
,
buf
,
ƒ
) \

65 
	`__asm__
("˛d;ªp;outsw"::"d" (
p‹t
),"S" (
buf
),"c" (
ƒ
):"cx","si")

	)

67 
hd_öãºu±
();

68 
rd_lﬂd
();

71 
	$sys_£tup
(* 
BIOS
)

73 
ˇŒabÀ
 = 1;

74 
i
,
drive
;

75 
cmos_disks
;

76 
∑πôi⁄
 *
p
;

77 
buf„r_hód
 * 
bh
;

79 i‡(!
ˇŒabÀ
)

81 
ˇŒabÀ
 = 0;

82 #i‚de‡
HD_TYPE


83 
drive
=0 ; drive<2 ; drive++) {

84 
hd_öfo
[
drive
].
cyl
 = *(*Ë
BIOS
;

85 
hd_öfo
[
drive
].
hód
 = *(*Ë(2+
BIOS
);

86 
hd_öfo
[
drive
].
wpcom
 = *(*Ë(5+
BIOS
);

87 
hd_öfo
[
drive
].
˘l
 = *(*Ë(8+
BIOS
);

88 
hd_öfo
[
drive
].
lz⁄e
 = *(*Ë(12+
BIOS
);

89 
hd_öfo
[
drive
].
£˘
 = *(*Ë(14+
BIOS
);

90 
BIOS
 += 16;

92 i‡(
hd_öfo
[1].
cyl
)

93 
NR_HD
=2;

95 
NR_HD
=1;

97 
i
=0 ; i<
NR_HD
 ; i++) {

98 
hd
[
i
*5].
°¨t_£˘
 = 0;

99 
hd
[
i
*5].
ƒ_£˘s
 = 
hd_öfo
[i].
hód
*

100 
hd_öfo
[
i
].
£˘
*hd_öfo[i].
cyl
;

125 i‡((
cmos_disks
 = 
	`CMOS_READ
(0x12)) & 0xf0)

126 i‡(
cmos_disks
 & 0x0f)

127 
NR_HD
 = 2;

129 
NR_HD
 = 1;

131 
NR_HD
 = 0;

132 
i
 = 
NR_HD
 ; i < 2 ; i++) {

133 
hd
[
i
*5].
°¨t_£˘
 = 0;

134 
hd
[
i
*5].
ƒ_£˘s
 = 0;

136 
drive
=0 ; drive<
NR_HD
 ; drive++) {

137 i‡(!(
bh
 = 
	`bªad
(0x300 + 
drive
*5,0))) {

138 
	`¥ötk
("UnableÅoÑeadÖartitionÅable of drive %d\n\r",

139 
drive
);

140 
	`∑nic
("");

142 i‡(
bh
->
b_d©a
[510] != 0x55 || ()

143 
bh
->
b_d©a
[511] != 0xAA) {

144 
	`¥ötk
("BadÖ¨tôi⁄ÅabÀ o¿drivê%d\n\r",
drive
);

145 
	`∑nic
("");

147 
p
 = 0x1BE + (*)
bh
->
b_d©a
;

148 
i
=1;i<5;i++,
p
++) {

149 
hd
[
i
+5*
drive
].
°¨t_£˘
 = 
p
->start_sect;

150 
hd
[
i
+5*
drive
].
ƒ_£˘s
 = 
p
->nr_sects;

152 
	`bªl£
(
bh
);

154 i‡(
NR_HD
)

155 
	`¥ötk
("P¨tôi⁄ÅabÀ%†ok.\n\r",(
NR_HD
>1)?"s":"");

156 
	`rd_lﬂd
();

157 
	`mou¡_roŸ
();

159 
	}
}

161 
	$c⁄åﬁÀr_ªady
()

163 
ªåõs
=10000;

165 --
ªåõs
 && (
	`öb_p
(
HD_STATUS
)&0xc0)!=0x40);

166  (
ªåõs
);

167 
	}
}

169 
	$wö_ªsu…
()

171 
i
=
	`öb_p
(
HD_STATUS
);

173 i‡((
i
 & (
BUSY_STAT
 | 
READY_STAT
 | 
WRERR_STAT
 | 
SEEK_STAT
 | 
ERR_STAT
))

174 =(
READY_STAT
 | 
SEEK_STAT
))

176 i‡(
i
&1Ëi=
	`öb
(
HD_ERROR
);

178 
	}
}

180 
hd_out
(
drive
,
n£˘
,
£˘
,

181 
hód
,
cyl
,
cmd
,

182 (*
öå_addr
)())

184 
p‹t
 
	`asm
("dx");

186 i‡(
drive
>1 || 
hód
>15)

187 
	`∑nic
("TryingÅo write bad sector");

188 i‡(!
	`c⁄åﬁÀr_ªady
())

189 
	`∑nic
("HD controllerÇotÑeady");

190 
do_hd
 = 
öå_addr
;

191 
	`outb_p
(
hd_öfo
[
drive
].
˘l
,
HD_CMD
);

192 
p‹t
=
HD_DATA
;

193 
	`outb_p
(
hd_öfo
[
drive
].
wpcom
>>2,++
p‹t
);

194 
	`outb_p
(
n£˘
,++
p‹t
);

195 
	`outb_p
(
£˘
,++
p‹t
);

196 
	`outb_p
(
cyl
,++
p‹t
);

197 
	`outb_p
(
cyl
>>8,++
p‹t
);

198 
	`outb_p
(0xA0|(
drive
<<4)|
hód
,++
p‹t
);

199 
	`outb
(
cmd
,++
p‹t
);

200 
	}
}

202 
	$drive_busy
()

204 
i
;

206 
i
 = 0; i < 10000; i++)

207 i‡(
READY_STAT
 =(
	`öb_p
(
HD_STATUS
Ë& (
BUSY_STAT
|READY_STAT)))

209 
i
 = 
	`öb
(
HD_STATUS
);

210 
i
 &
BUSY_STAT
 | 
READY_STAT
 | 
SEEK_STAT
;

211 i‡(
i
 =
READY_STAT
 | 
SEEK_STAT
)

213 
	`¥ötk
("HD controllerÅimes out\n\r");

215 
	}
}

217 
	$ª£t_c⁄åﬁÀr
()

219 
i
;

221 
	`outb
(4,
HD_CMD
);

222 
i
 = 0; i < 100; i++Ë
	`n›
();

223 
	`outb
(
hd_öfo
[0].
˘l
 & 0x0‡,
HD_CMD
);

224 i‡(
	`drive_busy
())

225 
	`¥ötk
("HD-controller still busy\n\r");

226 i‡((
i
 = 
	`öb
(
HD_ERROR
)) != 1)

227 
	`¥ötk
("HD-c⁄åﬁÀ∏ª£àÁûed: %02x\n\r",
i
);

228 
	}
}

230 
	$ª£t_hd
(
ƒ
)

232 
	`ª£t_c⁄åﬁÀr
();

233 
	`hd_out
(
ƒ
,
hd_öfo
[ƒ].
£˘
,hd_öfo[ƒ].£˘,hd_öfo[ƒ].
hód
-1,

234 
hd_öfo
[
ƒ
].
cyl
,
WIN_SPECIFY
,&
ªˇl_öå
);

235 
	}
}

237 
	$u√x≥˘ed_hd_öãºu±
()

239 
	`¥ötk
("Unexpected HD interrupt\n\r");

240 
	}
}

242 
	$bad_rw_öå
()

244 i‡(++
CURRENT
->
îr‹s
 >
MAX_ERRORS
)

245 
	`íd_ªque°
(0);

246 i‡(
CURRENT
->
îr‹s
 > 
MAX_ERRORS
/2)

247 
ª£t
 = 1;

248 
	}
}

250 
	$ªad_öå
()

252 i‡(
	`wö_ªsu…
()) {

253 
	`bad_rw_öå
();

254 
	`do_hd_ªque°
();

257 
	`p‹t_ªad
(
HD_DATA
,
CURRENT
->
buf„r
,256);

258 
CURRENT
->
îr‹s
 = 0;

259 
CURRENT
->
buf„r
 += 512;

260 
CURRENT
->
£˘‹
++;

261 i‡(--
CURRENT
->
ƒ_£˘‹s
) {

262 
do_hd
 = &
ªad_öå
;

265 
	`íd_ªque°
(1);

266 
	`do_hd_ªque°
();

267 
	}
}

269 
	$wrôe_öå
()

271 i‡(
	`wö_ªsu…
()) {

272 
	`bad_rw_öå
();

273 
	`do_hd_ªque°
();

276 i‡(--
CURRENT
->
ƒ_£˘‹s
) {

277 
CURRENT
->
£˘‹
++;

278 
CURRENT
->
buf„r
 += 512;

279 
do_hd
 = &
wrôe_öå
;

280 
	`p‹t_wrôe
(
HD_DATA
,
CURRENT
->
buf„r
,256);

283 
	`íd_ªque°
(1);

284 
	`do_hd_ªque°
();

285 
	}
}

287 
	$ªˇl_öå
()

289 i‡(
	`wö_ªsu…
())

290 
	`bad_rw_öå
();

291 
	`do_hd_ªque°
();

292 
	}
}

294 
	$do_hd_ªque°
()

296 
i
,
r
;

297 
block
,
dev
;

298 
£c
,
hód
,
cyl
;

299 
n£˘
;

301 
INIT_REQUEST
;

302 
dev
 = 
	`MINOR
(
CURRENT
->dev);

303 
block
 = 
CURRENT
->
£˘‹
;

304 i‡(
dev
 >5*
NR_HD
 || 
block
+2 > 
hd
[dev].
ƒ_£˘s
) {

305 
	`íd_ªque°
(0);

306 
ª≥©
;

308 
block
 +
hd
[
dev
].
°¨t_£˘
;

309 
dev
 /= 5;

310 
	`__asm__
("div»%4":"˜" (
block
),"=d" (
£c
):"0" (block),"1" (0),

311 "r" (
hd_öfo
[
dev
].
£˘
));

312 
	`__asm__
("div»%4":"˜" (
cyl
),"=d" (
hód
):"0" (
block
),"1" (0),

313 "r" (
hd_öfo
[
dev
].
hód
));

314 
£c
++;

315 
n£˘
 = 
CURRENT
->
ƒ_£˘‹s
;

316 i‡(
ª£t
) {

317 
ª£t
 = 0;

318 
ªˇlibøã
 = 1;

319 
	`ª£t_hd
(
CURRENT_DEV
);

322 i‡(
ªˇlibøã
) {

323 
ªˇlibøã
 = 0;

324 
	`hd_out
(
dev
,
hd_öfo
[
CURRENT_DEV
].
£˘
,0,0,0,

325 
WIN_RESTORE
,&
ªˇl_öå
);

328 i‡(
CURRENT
->
cmd
 =
WRITE
) {

329 
	`hd_out
(
dev
,
n£˘
,
£c
,
hód
,
cyl
,
WIN_WRITE
,&
wrôe_öå
);

330 
i
=0 ; i<3000 && !(
r
=
	`öb_p
(
HD_STATUS
)&
DRQ_STAT
) ; i++)

332 i‡(!
r
) {

333 
	`bad_rw_öå
();

334 
ª≥©
;

336 
	`p‹t_wrôe
(
HD_DATA
,
CURRENT
->
buf„r
,256);

337 } i‡(
CURRENT
->
cmd
 =
READ
) {

338 
	`hd_out
(
dev
,
n£˘
,
£c
,
hód
,
cyl
,
WIN_READ
,&
ªad_öå
);

340 
	`∑nic
("unknown hd-command");

341 
	}
}

343 
	$hd_öô
()

345 
blk_dev
[
MAJOR_NR
].
ªque°_‚
 = 
DEVICE_REQUEST
;

346 
	`£t_öå_g©e
(0x2E,&
hd_öãºu±
);

347 
	`outb_p
(
	`öb_p
(0x21)&0xfb,0x21);

348 
	`outb
(
	`öb_p
(0xA1)&0xbf,0xA1);

349 
	}
}

	@kernel/blk_drv/ll_rw_blk.c

10 
	~<î∫o.h
>

11 
	~<löux/sched.h
>

12 
	~<löux/kî√l.h
>

13 
	~<asm/sy°em.h
>

15 
	~"blk.h
"

21 
ªque°
 
	gªque°
[
NR_REQUEST
];

26 
èsk_°ru˘
 * 
	gwaô_f‹_ªque°
 = 
NULL
;

32 
blk_dev_°ru˘
 
	gblk_dev
[
NR_BLK_DEV
] = {

33 { 
NULL
, NULL },

34 { 
NULL
, NULL },

35 { 
NULL
, NULL },

36 { 
NULL
, NULL },

37 { 
NULL
, NULL },

38 { 
NULL
, NULL },

39 { 
NULL
, NULL }

42 
ölöe
 
	$lock_buf„r
(
buf„r_hód
 * 
bh
)

44 
	`˛i
();

45 
bh
->
b_lock
)

46 
	`¶ìp_⁄
(&
bh
->
b_waô
);

47 
bh
->
b_lock
=1;

48 
	`°i
();

49 
	}
}

51 
ölöe
 
	$u∆ock_buf„r
(
buf„r_hód
 * 
bh
)

53 i‡(!
bh
->
b_lock
)

54 
	`¥ötk
("ll_rw_block.c: bufferÇotÜocked\n\r");

55 
bh
->
b_lock
 = 0;

56 
	`wake_up
(&
bh
->
b_waô
);

57 
	}
}

64 
	$add_ªque°
(
blk_dev_°ru˘
 * 
dev
, 
ªque°
 * 
ªq
)

66 
ªque°
 * 
tmp
;

68 
ªq
->
√xt
 = 
NULL
;

69 
	`˛i
();

70 i‡(
ªq
->
bh
)

71 
ªq
->
bh
->
b_dút
 = 0;

72 i‡(!(
tmp
 = 
dev
->
cuºít_ªque°
)) {

73 
dev
->
cuºít_ªque°
 = 
ªq
;

74 
	`°i
();

75 (
dev
->
ªque°_‚
)();

78  ; 
tmp
->
√xt
 ;Åmp=tmp->next)

79 i‡((
	`IN_ORDER
(
tmp
,
ªq
) ||

80 !
	`IN_ORDER
(
tmp
,tmp->
√xt
)) &&

81 
	`IN_ORDER
(
ªq
,
tmp
->
√xt
))

83 
ªq
->
√xt
=
tmp
->next;

84 
tmp
->
√xt
=
ªq
;

85 
	`°i
();

86 
	}
}

88 
	$make_ªque°
(
maj‹
,
rw
, 
buf„r_hód
 * 
bh
)

90 
ªque°
 * 
ªq
;

91 
rw_ahód
;

95 i‡(
rw_ahód
 = (
rw
 =
READA
 ||Ñw =
WRITEA
)) {

96 i‡(
bh
->
b_lock
)

98 i‡(
rw
 =
READA
)

99 
rw
 = 
READ
;

101 
rw
 = 
WRITE
;

103 i‡(
rw
!=
READ
 &&Ñw!=
WRITE
)

104 
	`∑nic
("Bad block dev command, must be R/W/RA/WA");

105 
	`lock_buf„r
(
bh
);

106 i‡((
rw
 =
WRITE
 && !
bh
->
b_dút
Ë|| (rw =
READ
 && bh->
b_u±od©e
)) {

107 
	`u∆ock_buf„r
(
bh
);

110 
ª≥©
:

115 i‡(
rw
 =
READ
)

116 
ªq
 = 
ªque°
+
NR_REQUEST
;

118 
ªq
 = 
ªque°
+((
NR_REQUEST
*2)/3);

120 --
ªq
 >
ªque°
)

121 i‡(
ªq
->
dev
<0)

124 i‡(
ªq
 < 
ªque°
) {

125 i‡(
rw_ahód
) {

126 
	`u∆ock_buf„r
(
bh
);

129 
	`¶ìp_⁄
(&
waô_f‹_ªque°
);

130 
ª≥©
;

133 
ªq
->
dev
 = 
bh
->
b_dev
;

134 
ªq
->
cmd
 = 
rw
;

135 
ªq
->
îr‹s
=0;

136 
ªq
->
£˘‹
 = 
bh
->
b_blockƒ
<<1;

137 
ªq
->
ƒ_£˘‹s
 = 2;

138 
ªq
->
buf„r
 = 
bh
->
b_d©a
;

139 
ªq
->
waôög
 = 
NULL
;

140 
ªq
->
bh
 = bh;

141 
ªq
->
√xt
 = 
NULL
;

142 
	`add_ªque°
(
maj‹
+
blk_dev
,
ªq
);

143 
	}
}

145 
	$Œ_rw_block
(
rw
, 
buf„r_hód
 * 
bh
)

147 
maj‹
;

149 i‡((
maj‹
=
	`MAJOR
(
bh
->
b_dev
)Ë>
NR_BLK_DEV
 ||

150 !(
blk_dev
[
maj‹
].
ªque°_‚
)) {

151 
	`¥ötk
("TryingÅoÑeadÇonexistent block-device\n\r");

154 
	`make_ªque°
(
maj‹
,
rw
,
bh
);

155 
	}
}

157 
	$blk_dev_öô
()

159 
i
;

161 
i
=0 ; i<
NR_REQUEST
 ; i++) {

162 
ªque°
[
i
].
dev
 = -1;

163 
ªque°
[
i
].
√xt
 = 
NULL
;

165 
	}
}

	@kernel/blk_drv/ramdisk.c

7 
	~<°rög.h
>

9 
	~<löux/c⁄fig.h
>

10 
	~<löux/sched.h
>

11 
	~<löux/fs.h
>

12 
	~<löux/kî√l.h
>

13 
	~<asm/sy°em.h
>

14 
	~<asm/£gmít.h
>

15 
	~<asm/mem‹y.h
>

17 
	#MAJOR_NR
 1

	)

18 
	~"blk.h
"

20 *
	grd_°¨t
;

21 
	grd_Àngth
 = 0;

23 
	$do_rd_ªque°
()

25 
Àn
;

26 *
addr
;

28 
INIT_REQUEST
;

29 
addr
 = 
rd_°¨t
 + (
CURRENT
->
£˘‹
 << 9);

30 
Àn
 = 
CURRENT
->
ƒ_£˘‹s
 << 9;

31 i‡((
	`MINOR
(
CURRENT
->
dev
Ë!1Ë|| (
addr
+
Àn
 > 
rd_°¨t
+
rd_Àngth
)) {

32 
	`íd_ªque°
(0);

33 
ª≥©
;

35 i‡(
CURRENT
-> 
cmd
 =
WRITE
) {

36 (Ë
	`mem˝y
(
addr
,

37 
CURRENT
->
buf„r
,

38 
Àn
);

39 } i‡(
CURRENT
->
cmd
 =
READ
) {

40 (Ë
	`mem˝y
(
CURRENT
->
buf„r
,

41 
addr
,

42 
Àn
);

44 
	`∑nic
("unknownÑamdisk-command");

45 
	`íd_ªque°
(1);

46 
ª≥©
;

47 
	}
}

52 
	$rd_öô
(
mem_°¨t
, 
Àngth
)

54 
i
;

55 *
˝
;

57 
blk_dev
[
MAJOR_NR
].
ªque°_‚
 = 
DEVICE_REQUEST
;

58 
rd_°¨t
 = (*Ë
mem_°¨t
;

59 
rd_Àngth
 = 
Àngth
;

60 
˝
 = 
rd_°¨t
;

61 
i
=0; i < 
Àngth
; i++)

62 *
˝
++ = '\0';

63 (
Àngth
);

64 
	}
}

71 
	$rd_lﬂd
()

73 
buf„r_hód
 *
bh
;

74 
su≥r_block
 
s
;

75 
block
 = 256;

76 
i
 = 1;

77 
nblocks
;

78 *
˝
;

80 i‡(!
rd_Àngth
)

82 
	`¥ötk
("Ram disk: %d byãs, sèπögáà0x%x\n", 
rd_Àngth
,

83 (Ë
rd_°¨t
);

84 i‡(
	`MAJOR
(
ROOT_DEV
) != 2)

86 
bh
 = 
	`bªada
(
ROOT_DEV
,
block
+1,block,block+2,-1);

87 i‡(!
bh
) {

88 
	`¥ötk
("DiskÉrror whileÜooking forÑamdisk!\n");

91 *((
d_su≥r_block
 *Ë&
s
Ë*((d_su≥r_block *Ë
bh
->
b_d©a
);

92 
	`bªl£
(
bh
);

93 i‡(
s
.
s_magic
 !
SUPER_MAGIC
)

96 
nblocks
 = 
s
.
s_nz⁄es
 << s.
s_log_z⁄e_size
;

97 i‡(
nblocks
 > (
rd_Àngth
 >> 
BLOCK_SIZE_BITS
)) {

98 
	`¥ötk
("Ram disk imageÅoo big! (%d blocks, %dávail)\n",

99 
nblocks
, 
rd_Àngth
 >> 
BLOCK_SIZE_BITS
);

102 
	`¥ötk
("Loading %d bytes intoÑam disk... 0000k",

103 
nblocks
 << 
BLOCK_SIZE_BITS
);

104 
˝
 = 
rd_°¨t
;

105 
nblocks
) {

106 i‡(
nblocks
 > 2)

107 
bh
 = 
	`bªada
(
ROOT_DEV
, 
block
, block+1, block+2, -1);

109 
bh
 = 
	`bªad
(
ROOT_DEV
, 
block
);

110 i‡(!
bh
) {

111 
	`¥ötk
("I/OÉrror on block %d,ábortingÜoad\n",

112 
block
);

115 (Ë
	`mem˝y
(
˝
, 
bh
->
b_d©a
, 
BLOCK_SIZE
);

116 
	`bªl£
(
bh
);

117 
	`¥ötk
("\010\010\010\010\010%4dk",
i
);

118 
˝
 +
BLOCK_SIZE
;

119 
block
++;

120 
nblocks
--;

121 
i
++;

123 
	`¥ötk
("\010\010\010\010\010done \n");

124 
ROOT_DEV
=0x0101;

125 
	}
}

	@kernel/chr_drv/console.c

30 
	~<löux/sched.h
>

31 
	~<löux/ây.h
>

32 
	~<asm/io.h
>

33 
	~<asm/sy°em.h
>

39 
	#ORIG_X
 (*(*)0x90000)

	)

40 
	#ORIG_Y
 (*(*)0x90001)

	)

41 
	#ORIG_VIDEO_PAGE
 (*(*)0x90004)

	)

42 
	#ORIG_VIDEO_MODE
 ((*(*)0x90006Ë& 0xff)

	)

43 
	#ORIG_VIDEO_COLS
 (((*(*)0x90006Ë& 0xff00Ë>> 8)

	)

44 
	#ORIG_VIDEO_LINES
 (25)

	)

45 
	#ORIG_VIDEO_EGA_AX
 (*(*)0x90008)

	)

46 
	#ORIG_VIDEO_EGA_BX
 (*(*)0x9000a)

	)

47 
	#ORIG_VIDEO_EGA_CX
 (*(*)0x9000c)

	)

49 
	#VIDEO_TYPE_MDA
 0x10

	)

50 
	#VIDEO_TYPE_CGA
 0x11

	)

51 
	#VIDEO_TYPE_EGAM
 0x20

	)

52 
	#VIDEO_TYPE_EGAC
 0x21

	)

54 
	#NPAR
 16

	)

56 
keybﬂrd_öãºu±
();

58 
	gvideo_ty≥
;

59 
	gvideo_num_cﬁumns
;

60 
	gvideo_size_row
;

61 
	gvideo_num_löes
;

62 
	gvideo_∑ge
;

63 
	gvideo_mem_°¨t
;

64 
	gvideo_mem_íd
;

65 
	gvideo_p‹t_ªg
;

66 
	gvideo_p‹t_vÆ
;

67 
	gvideo_îa£_ch¨
;

69 
	g‹igö
;

70 
	gs¸_íd
;

71 
	gpos
;

72 
	gx
,
	gy
;

73 
	gt›
,
	gbŸtom
;

74 
	g°©e
=0;

75 
	g≈¨
,
	g∑r
[
NPAR
];

76 
	gques
=0;

77 
	g©å
=0x07;

79 
sysbìp
();

85 
	#RESPONSE
 "\033[?1;2c"

	)

88 
ölöe
 
	$gŸoxy
(
√w_x
,
√w_y
)

90 i‡(
√w_x
 > 
video_num_cﬁumns
 || 
√w_y
 >
video_num_löes
)

92 
x
=
√w_x
;

93 
y
=
√w_y
;

94 
pos
=
‹igö
 + 
y
*
video_size_row
 + (
x
<<1);

95 
	}
}

97 
ölöe
 
	$£t_‹igö
()

99 
	`˛i
();

100 
	`outb_p
(12, 
video_p‹t_ªg
);

101 
	`outb_p
(0xff&((
‹igö
-
video_mem_°¨t
)>>9), 
video_p‹t_vÆ
);

102 
	`outb_p
(13, 
video_p‹t_ªg
);

103 
	`outb_p
(0xff&((
‹igö
-
video_mem_°¨t
)>>1), 
video_p‹t_vÆ
);

104 
	`°i
();

105 
	}
}

107 
	$s¸up
()

109 i‡(
video_ty≥
 =
VIDEO_TYPE_EGAC
 || video_ty≥ =
VIDEO_TYPE_EGAM
)

111 i‡(!
t›
 && 
bŸtom
 =
video_num_löes
) {

112 
‹igö
 +
video_size_row
;

113 
pos
 +
video_size_row
;

114 
s¸_íd
 +
video_size_row
;

115 i‡(
s¸_íd
 > 
video_mem_íd
) {

116 
	`__asm__
("cld\n\t"

122 ::"a" (
video_îa£_ch¨
),

123 "c" ((
video_num_löes
-1)*
video_num_cﬁumns
>>1),

124 "D" (
video_mem_°¨t
),

125 "S" (
‹igö
)

127 
s¸_íd
 -
‹igö
-
video_mem_°¨t
;

128 
pos
 -
‹igö
-
video_mem_°¨t
;

129 
‹igö
 = 
video_mem_°¨t
;

131 
	`__asm__
("cld\n\t"

134 ::"a" (
video_îa£_ch¨
),

135 "c" (
video_num_cﬁumns
),

136 "D" (
s¸_íd
-
video_size_row
)

139 
	`£t_‹igö
();

141 
	`__asm__
("cld\n\t"

147 ::"a" (
video_îa£_ch¨
),

148 "c" ((
bŸtom
-
t›
-1)*
video_num_cﬁumns
>>1),

149 "D" (
‹igö
+
video_size_row
*
t›
),

150 "S" (
‹igö
+
video_size_row
*(
t›
+1))

156 
	`__asm__
("cld\n\t"

162 ::"a" (
video_îa£_ch¨
),

163 "c" ((
bŸtom
-
t›
-1)*
video_num_cﬁumns
>>1),

164 "D" (
‹igö
+
video_size_row
*
t›
),

165 "S" (
‹igö
+
video_size_row
*(
t›
+1))

168 
	}
}

170 
	$s¸down
()

172 i‡(
video_ty≥
 =
VIDEO_TYPE_EGAC
 || video_ty≥ =
VIDEO_TYPE_EGAM
)

174 
	`__asm__
("std\n\t"

181 ::"a" (
video_îa£_ch¨
),

182 "c" ((
bŸtom
-
t›
-1)*
video_num_cﬁumns
>>1),

183 "D" (
‹igö
+
video_size_row
*
bŸtom
-4),

184 "S" (
‹igö
+
video_size_row
*(
bŸtom
-1)-4)

189 
	`__asm__
("std\n\t"

196 ::"a" (
video_îa£_ch¨
),

197 "c" ((
bŸtom
-
t›
-1)*
video_num_cﬁumns
>>1),

198 "D" (
‹igö
+
video_size_row
*
bŸtom
-4),

199 "S" (
‹igö
+
video_size_row
*(
bŸtom
-1)-4)

202 
	}
}

204 
	$lf
()

206 i‡(
y
+1<
bŸtom
) {

207 
y
++;

208 
pos
 +
video_size_row
;

211 
	`s¸up
();

212 
	}
}

214 
	$ri
()

216 i‡(
y
>
t›
) {

217 
y
--;

218 
pos
 -
video_size_row
;

221 
	`s¸down
();

222 
	}
}

224 
	$¸
()

226 
pos
 -
x
<<1;

227 
x
=0;

228 
	}
}

230 
	$dñ
()

232 i‡(
x
) {

233 
pos
 -= 2;

234 
x
--;

235 *(*)
pos
 = 
video_îa£_ch¨
;

237 
	}
}

239 
	$csi_J
(
∑r
)

241 
cou¡
 
	`__asm__
("cx");

242 
°¨t
 
	`__asm__
("di");

244 
∑r
) {

246 
cou¡
 = (
s¸_íd
-
pos
)>>1;

247 
°¨t
 = 
pos
;

250 
cou¡
 = (
pos
-
‹igö
)>>1;

251 
°¨t
 = 
‹igö
;

254 
cou¡
 = 
video_num_cﬁumns
 * 
video_num_löes
;

255 
°¨t
 = 
‹igö
;

260 
	`__asm__
("cld\n\t"

263 ::"c" (
cou¡
),

264 "D" (
°¨t
),"a" (
video_îa£_ch¨
)

266 
	}
}

268 
	$csi_K
(
∑r
)

270 
cou¡
 
	`__asm__
("cx");

271 
°¨t
 
	`__asm__
("di");

273 
∑r
) {

275 i‡(
x
>=
video_num_cﬁumns
)

277 
cou¡
 = 
video_num_cﬁumns
-
x
;

278 
°¨t
 = 
pos
;

281 
°¨t
 = 
pos
 - (
x
<<1);

282 
cou¡
 = (
x
<
video_num_cﬁumns
)?x:video_num_columns;

285 
°¨t
 = 
pos
 - (
x
<<1);

286 
cou¡
 = 
video_num_cﬁumns
;

291 
	`__asm__
("cld\n\t"

294 ::"c" (
cou¡
),

295 "D" (
°¨t
),"a" (
video_îa£_ch¨
)

297 
	}
}

299 
	$csi_m
()

301 
i
;

303 
i
=0;i<=
≈¨
;i++)

304 
∑r
[
i
]) {

305 0:
©å
=0x07;;

306 1:
©å
=0x0f;;

307 4:
©å
=0x0f;;

308 7:
©å
=0x70;;

309 27:
©å
=0x07;;

311 
	}
}

313 
ölöe
 
	$£t_curs‹
()

315 
	`˛i
();

316 
	`outb_p
(14, 
video_p‹t_ªg
);

317 
	`outb_p
(0xff&((
pos
-
video_mem_°¨t
)>>9), 
video_p‹t_vÆ
);

318 
	`outb_p
(15, 
video_p‹t_ªg
);

319 
	`outb_p
(0xff&((
pos
-
video_mem_°¨t
)>>1), 
video_p‹t_vÆ
);

320 
	`°i
();

321 
	}
}

323 
	$ª•⁄d
(
ây_°ru˘
 * 
ây
)

325 * 
p
 = 
RESPONSE
;

327 
	`˛i
();

328 *
p
) {

329 
	`PUTCH
(*
p
,
ây
->
ªad_q
);

330 
p
++;

332 
	`°i
();

333 
	`c›y_to_cooked
(
ây
);

334 
	}
}

336 
	$ö£π_ch¨
()

338 
i
=
x
;

339 
tmp
, 
ﬁd
 = 
video_îa£_ch¨
;

340 * 
p
 = (*Ë
pos
;

342 
i
++<
video_num_cﬁumns
) {

343 
tmp
=*
p
;

344 *
p
=
ﬁd
;

345 
ﬁd
=
tmp
;

346 
p
++;

348 
	}
}

350 
	$ö£π_löe
()

352 
ﬁdt›
,
ﬁdbŸtom
;

354 
ﬁdt›
=
t›
;

355 
ﬁdbŸtom
=
bŸtom
;

356 
t›
=
y
;

357 
bŸtom
 = 
video_num_löes
;

358 
	`s¸down
();

359 
t›
=
ﬁdt›
;

360 
bŸtom
=
ﬁdbŸtom
;

361 
	}
}

363 
	$dñëe_ch¨
()

365 
i
;

366 * 
p
 = (*Ë
pos
;

368 i‡(
x
>=
video_num_cﬁumns
)

370 
i
 = 
x
;

371 ++
i
 < 
video_num_cﬁumns
) {

372 *
p
 = *(p+1);

373 
p
++;

375 *
p
 = 
video_îa£_ch¨
;

376 
	}
}

378 
	$dñëe_löe
()

380 
ﬁdt›
,
ﬁdbŸtom
;

382 
ﬁdt›
=
t›
;

383 
ﬁdbŸtom
=
bŸtom
;

384 
t›
=
y
;

385 
bŸtom
 = 
video_num_löes
;

386 
	`s¸up
();

387 
t›
=
ﬁdt›
;

388 
bŸtom
=
ﬁdbŸtom
;

389 
	}
}

391 
	$csi_©
(
ƒ
)

393 i‡(
ƒ
 > 
video_num_cﬁumns
)

394 
ƒ
 = 
video_num_cﬁumns
;

395 i‡(!
ƒ
)

396 
ƒ
 = 1;

397 
ƒ
--)

398 
	`ö£π_ch¨
();

399 
	}
}

401 
	$csi_L
(
ƒ
)

403 i‡(
ƒ
 > 
video_num_löes
)

404 
ƒ
 = 
video_num_löes
;

405 i‡(!
ƒ
)

406 
ƒ
 = 1;

407 
ƒ
--)

408 
	`ö£π_löe
();

409 
	}
}

411 
	$csi_P
(
ƒ
)

413 i‡(
ƒ
 > 
video_num_cﬁumns
)

414 
ƒ
 = 
video_num_cﬁumns
;

415 i‡(!
ƒ
)

416 
ƒ
 = 1;

417 
ƒ
--)

418 
	`dñëe_ch¨
();

419 
	}
}

421 
	$csi_M
(
ƒ
)

423 i‡(
ƒ
 > 
video_num_löes
)

424 
ƒ
 = 
video_num_löes
;

425 i‡(!
ƒ
)

426 
ƒ
=1;

427 
ƒ
--)

428 
	`dñëe_löe
();

429 
	}
}

431 
	gßved_x
=0;

432 
	gßved_y
=0;

434 
	$ßve_cur
()

436 
ßved_x
=
x
;

437 
ßved_y
=
y
;

438 
	}
}

440 
	$ª°‹e_cur
()

442 
	`gŸoxy
(
ßved_x
, 
ßved_y
);

443 
	}
}

445 
	$c⁄_wrôe
(
ây_°ru˘
 * 
ây
)

447 
ƒ
;

448 
c
;

450 
ƒ
 = 
	`CHARS
(
ây
->
wrôe_q
);

451 
ƒ
--) {

452 
	`GETCH
(
ây
->
wrôe_q
,
c
);

453 
°©e
) {

455 i‡(
c
>31 && c<127) {

456 i‡(
x
>=
video_num_cﬁumns
) {

457 
x
 -
video_num_cﬁumns
;

458 
pos
 -
video_size_row
;

459 
	`lf
();

461 
	`__asm__
("movb _attr,%%ah\n\t"

463 ::"a" (
c
),"m" (*(*)
pos
)

465 
pos
 += 2;

466 
x
++;

467 } i‡(
c
==27)

468 
°©e
=1;

469 i‡(
c
==10 || c==11 || c==12)

470 
	`lf
();

471 i‡(
c
==13)

472 
	`¸
();

473 i‡(
c
==
	`ERASE_CHAR
(
ây
))

474 
	`dñ
();

475 i‡(
c
==8) {

476 i‡(
x
) {

477 
x
--;

478 
pos
 -= 2;

480 } i‡(
c
==9) {

481 
c
=8-(
x
&7);

482 
x
 +
c
;

483 
pos
 +
c
<<1;

484 i‡(
x
>
video_num_cﬁumns
) {

485 
x
 -
video_num_cﬁumns
;

486 
pos
 -
video_size_row
;

487 
	`lf
();

489 
c
=9;

490 } i‡(
c
==7)

491 
	`sysbìp
();

494 
°©e
=0;

495 i‡(
c
=='[')

496 
°©e
=2;

497 i‡(
c
=='E')

498 
	`gŸoxy
(0,
y
+1);

499 i‡(
c
=='M')

500 
	`ri
();

501 i‡(
c
=='D')

502 
	`lf
();

503 i‡(
c
=='Z')

504 
	`ª•⁄d
(
ây
);

505 i‡(
x
=='7')

506 
	`ßve_cur
();

507 i‡(
x
=='8')

508 
	`ª°‹e_cur
();

511 
≈¨
=0;≈¨<
NPAR
;npar++)

512 
∑r
[
≈¨
]=0;

513 
≈¨
=0;

514 
°©e
=3;

515 i‡(
ques
=(
c
=='?'))

518 i‡(
c
==';' && 
≈¨
<
NPAR
-1) {

519 
≈¨
++;

521 } i‡(
c
>='0' && c<='9') {

522 
∑r
[
≈¨
]=10*∑r[≈¨]+
c
-'0';

524 } 
°©e
=4;

526 
°©e
=0;

527 
c
) {

529 i‡(
∑r
[0])Öar[0]--;

530 
	`gŸoxy
(
∑r
[0],
y
);

533 i‡(!
∑r
[0])Öar[0]++;

534 
	`gŸoxy
(
x
,
y
-
∑r
[0]);

537 i‡(!
∑r
[0])Öar[0]++;

538 
	`gŸoxy
(
x
,
y
+
∑r
[0]);

541 i‡(!
∑r
[0])Öar[0]++;

542 
	`gŸoxy
(
x
+
∑r
[0],
y
);

545 i‡(!
∑r
[0])Öar[0]++;

546 
	`gŸoxy
(
x
-
∑r
[0],
y
);

549 i‡(!
∑r
[0])Öar[0]++;

550 
	`gŸoxy
(0,
y
+
∑r
[0]);

553 i‡(!
∑r
[0])Öar[0]++;

554 
	`gŸoxy
(0,
y
-
∑r
[0]);

557 i‡(
∑r
[0])Öar[0]--;

558 
	`gŸoxy
(
x
,
∑r
[0]);

561 i‡(
∑r
[0])Öar[0]--;

562 i‡(
∑r
[1])Öar[1]--;

563 
	`gŸoxy
(
∑r
[1],par[0]);

566 
	`csi_J
(
∑r
[0]);

569 
	`csi_K
(
∑r
[0]);

572 
	`csi_L
(
∑r
[0]);

575 
	`csi_M
(
∑r
[0]);

578 
	`csi_P
(
∑r
[0]);

581 
	`csi_©
(
∑r
[0]);

584 
	`csi_m
();

587 i‡(
∑r
[0])Öar[0]--;

588 i‡(!
∑r
[1]Ë∑r[1] = 
video_num_löes
;

589 i‡(
∑r
[0] <Öar[1] &&

590 
∑r
[1] <
video_num_löes
) {

591 
t›
=
∑r
[0];

592 
bŸtom
=
∑r
[1];

596 
	`ßve_cur
();

599 
	`ª°‹e_cur
();

604 
	`£t_curs‹
();

605 
	}
}

617 
	$c⁄_öô
()

619 
a
;

620 *
di•œy_desc
 = "????";

621 *
di•œy_±r
;

623 
video_num_cﬁumns
 = 
ORIG_VIDEO_COLS
;

624 
video_size_row
 = 
video_num_cﬁumns
 * 2;

625 
video_num_löes
 = 
ORIG_VIDEO_LINES
;

626 
video_∑ge
 = 
ORIG_VIDEO_PAGE
;

627 
video_îa£_ch¨
 = 0x0720;

629 i‡(
ORIG_VIDEO_MODE
 == 7)

631 
video_mem_°¨t
 = 0xb0000;

632 
video_p‹t_ªg
 = 0x3b4;

633 
video_p‹t_vÆ
 = 0x3b5;

634 i‡((
ORIG_VIDEO_EGA_BX
 & 0xff) != 0x10)

636 
video_ty≥
 = 
VIDEO_TYPE_EGAM
;

637 
video_mem_íd
 = 0xb8000;

638 
di•œy_desc
 = "EGAm";

642 
video_ty≥
 = 
VIDEO_TYPE_MDA
;

643 
video_mem_íd
 = 0xb2000;

644 
di•œy_desc
 = "*MDA";

649 
video_mem_°¨t
 = 0xb8000;

650 
video_p‹t_ªg
 = 0x3d4;

651 
video_p‹t_vÆ
 = 0x3d5;

652 i‡((
ORIG_VIDEO_EGA_BX
 & 0xff) != 0x10)

654 
video_ty≥
 = 
VIDEO_TYPE_EGAC
;

655 
video_mem_íd
 = 0xbc000;

656 
di•œy_desc
 = "EGAc";

660 
video_ty≥
 = 
VIDEO_TYPE_CGA
;

661 
video_mem_íd
 = 0xba000;

662 
di•œy_desc
 = "*CGA";

668 
di•œy_±r
 = ((*)
video_mem_°¨t
Ë+ 
video_size_row
 - 8;

669 *
di•œy_desc
)

671 *
di•œy_±r
++ = *
di•œy_desc
++;

672 
di•œy_±r
++;

677 
‹igö
 = 
video_mem_°¨t
;

678 
s¸_íd
 = 
video_mem_°¨t
 + 
video_num_löes
 * 
video_size_row
;

679 
t›
 = 0;

680 
bŸtom
 = 
video_num_löes
;

682 
	`gŸoxy
(
ORIG_X
,
ORIG_Y
);

683 
	`£t_å≠_g©e
(0x21,&
keybﬂrd_öãºu±
);

684 
	`outb_p
(
	`öb_p
(0x21)&0xfd,0x21);

685 
a
=
	`öb_p
(0x61);

686 
	`outb_p
(
a
|0x80,0x61);

687 
	`outb
(
a
,0x61);

688 
	}
}

691 
	$sysbìp°›
()

694 
	`outb
(
	`öb_p
(0x61)&0xFC, 0x61);

695 
	}
}

697 
	gbìpcou¡
 = 0;

699 
	$sysbìp
()

702 
	`outb_p
(
	`öb_p
(0x61)|3, 0x61);

704 
	`outb_p
(0xB6, 0x43);

706 
	`outb_p
(0x37, 0x42);

707 
	`outb
(0x06, 0x42);

709 
bìpcou¡
 = 
HZ
/8;

710 
	}
}

	@kernel/chr_drv/serial.c

16 
	~<löux/ây.h
>

17 
	~<löux/sched.h
>

18 
	~<asm/sy°em.h
>

19 
	~<asm/io.h
>

21 
	#WAKEUP_CHARS
 (
TTY_BUF_SIZE
/4)

	)

23 
rs1_öãºu±
();

24 
rs2_öãºu±
();

26 
	$öô
(
p‹t
)

28 
	`outb_p
(0x80,
p‹t
+3);

29 
	`outb_p
(0x30,
p‹t
);

30 
	`outb_p
(0x00,
p‹t
+1);

31 
	`outb_p
(0x03,
p‹t
+3);

32 
	`outb_p
(0x0b,
p‹t
+4);

33 
	`outb_p
(0x0d,
p‹t
+1);

34 ()
	`öb
(
p‹t
);

35 
	}
}

37 
	$rs_öô
()

39 
	`£t_öå_g©e
(0x24,
rs1_öãºu±
);

40 
	`£t_öå_g©e
(0x23,
rs2_öãºu±
);

41 
	`öô
(
ây_èbÀ
[1].
ªad_q
.
d©a
);

42 
	`öô
(
ây_èbÀ
[2].
ªad_q
.
d©a
);

43 
	`outb
(
	`öb_p
(0x21)&0xE7,0x21);

44 
	}
}

53 
	$rs_wrôe
(
ây_°ru˘
 * 
ây
)

55 
	`˛i
();

56 i‡(!
	`EMPTY
(
ây
->
wrôe_q
))

57 
	`outb
(
	`öb_p
(
ây
->
wrôe_q
.
d©a
+1)|0x02,tty->write_q.data+1);

58 
	`°i
();

59 
	}
}

	@kernel/chr_drv/tty_io.c

13 
	~<˘y≥.h
>

14 
	~<î∫o.h
>

15 
	~<sig«l.h
>

17 
	#ALRMMASK
 (1<<(
SIGALRM
-1))

	)

18 
	#KILLMASK
 (1<<(
SIGKILL
-1))

	)

19 
	#INTMASK
 (1<<(
SIGINT
-1))

	)

20 
	#QUITMASK
 (1<<(
SIGQUIT
-1))

	)

21 
	#TSTPMASK
 (1<<(
SIGTSTP
-1))

	)

23 
	~<löux/sched.h
>

24 
	~<löux/ây.h
>

25 
	~<asm/£gmít.h
>

26 
	~<asm/sy°em.h
>

28 
	#_L_FLAG
(
ây
,
f
Ë(—ty)->
ãrmios
.
c_lÊag
 & f)

	)

29 
	#_I_FLAG
(
ây
,
f
Ë(—ty)->
ãrmios
.
c_iÊag
 & f)

	)

30 
	#_O_FLAG
(
ây
,
f
Ë(—ty)->
ãrmios
.
c_oÊag
 & f)

	)

32 
	#L_CANON
(
ây
Ë
	`_L_FLAG
(—ty),
ICANON
)

	)

33 
	#L_ISIG
(
ây
Ë
	`_L_FLAG
(—ty),
ISIG
)

	)

34 
	#L_ECHO
(
ây
Ë
	`_L_FLAG
(—ty),
ECHO
)

	)

35 
	#L_ECHOE
(
ây
Ë
	`_L_FLAG
(—ty),
ECHOE
)

	)

36 
	#L_ECHOK
(
ây
Ë
	`_L_FLAG
(—ty),
ECHOK
)

	)

37 
	#L_ECHOCTL
(
ây
Ë
	`_L_FLAG
(—ty),
ECHOCTL
)

	)

38 
	#L_ECHOKE
(
ây
Ë
	`_L_FLAG
(—ty),
ECHOKE
)

	)

40 
	#I_UCLC
(
ây
Ë
	`_I_FLAG
(—ty),
IUCLC
)

	)

41 
	#I_NLCR
(
ây
Ë
	`_I_FLAG
(—ty),
INLCR
)

	)

42 
	#I_CRNL
(
ây
Ë
	`_I_FLAG
(—ty),
ICRNL
)

	)

43 
	#I_NOCR
(
ây
Ë
	`_I_FLAG
(—ty),
IGNCR
)

	)

45 
	#O_POST
(
ây
Ë
	`_O_FLAG
(—ty),
OPOST
)

	)

46 
	#O_NLCR
(
ây
Ë
	`_O_FLAG
(—ty),
ONLCR
)

	)

47 
	#O_CRNL
(
ây
Ë
	`_O_FLAG
(—ty),
OCRNL
)

	)

48 
	#O_NLRET
(
ây
Ë
	`_O_FLAG
(—ty),
ONLRET
)

	)

49 
	#O_LCUC
(
ây
Ë
	`_O_FLAG
(—ty),
OLCUC
)

	)

51 
ây_°ru˘
 
	gây_èbÀ
[] = {

53 {
ICRNL
,

54 
OPOST
|
ONLCR
,

56 
ISIG
 | 
ICANON
 | 
ECHO
 | 
ECHOCTL
 | 
ECHOKE
,

58 
INIT_C_CC
},

61 
c⁄_wrôe
,

68 
B2400
 | 
CS8
,

71 
INIT_C_CC
},

74 
rs_wrôe
,

81 
B2400
 | 
CS8
,

84 
INIT_C_CC
},

87 
rs_wrôe
,

99 
ây_queue
 * 
	gèbÀ_li°
[]={

100 &
ây_èbÀ
[0].
ªad_q
, &ây_èbÀ[0].
wrôe_q
,

101 &
ây_èbÀ
[1].
ªad_q
, &ây_èbÀ[1].
wrôe_q
,

102 &
ây_èbÀ
[2].
ªad_q
, &ây_èbÀ[2].
wrôe_q


105 
	$ây_öô
()

107 
	`rs_öô
();

108 
	`c⁄_öô
();

109 
	}
}

111 
	$ây_öå
(
ây_°ru˘
 * 
ây
, 
mask
)

113 
i
;

115 i‡(
ây
->
pgΩ
 <= 0)

117 
i
=0;i<
NR_TASKS
;i++)

118 i‡(
èsk
[
i
] &&Åask[i]->
pgΩ
==
ây
->pgrp)

119 
èsk
[
i
]->
sig«l
 |
mask
;

120 
	}
}

122 
	$¶ìp_if_em±y
(
ây_queue
 * 
queue
)

124 
	`˛i
();

125 !
cuºít
->
sig«l
 && 
	`EMPTY
(*
queue
))

126 
	`öãºu±ibÀ_¶ìp_⁄
(&
queue
->
¥oc_li°
);

127 
	`°i
();

128 
	}
}

130 
	$¶ìp_if_fuŒ
(
ây_queue
 * 
queue
)

132 i‡(!
	`FULL
(*
queue
))

134 
	`˛i
();

135 !
cuºít
->
sig«l
 && 
	`LEFT
(*
queue
)<128)

136 
	`öãºu±ibÀ_¶ìp_⁄
(&
queue
->
¥oc_li°
);

137 
	`°i
();

138 
	}
}

140 
	$waô_f‹_key¥ess
()

142 
	`¶ìp_if_em±y
(&
ây_èbÀ
[0].
£c⁄d¨y
);

143 
	}
}

145 
	$c›y_to_cooked
(
ây_°ru˘
 * 
ây
)

147 sig√d 
c
;

149 !
	`EMPTY
(
ây
->
ªad_q
Ë&& !
	`FULL
—ty->
£c⁄d¨y
)) {

150 
	`GETCH
(
ây
->
ªad_q
,
c
);

151 i‡(
c
==13)

152 i‡(
	`I_CRNL
(
ây
))

153 
c
=10;

154 i‡(
	`I_NOCR
(
ây
))

157 i‡(
c
==10 && 
	`I_NLCR
(
ây
))

158 
c
=13;

159 i‡(
	`I_UCLC
(
ây
))

160 
c
=
	`tﬁowî
(c);

161 i‡(
	`L_CANON
(
ây
)) {

162 i‡(
c
==
	`KILL_CHAR
(
ây
)) {

164 !(
	`EMPTY
(
ây
->
£c⁄d¨y
) ||

165 (
c
=
	`LAST
(
ây
->
£c⁄d¨y
))==10 ||

166 
c
==
	`EOF_CHAR
(
ây
))) {

167 i‡(
	`L_ECHO
(
ây
)) {

168 i‡(
c
<32)

169 
	`PUTCH
(127,
ây
->
wrôe_q
);

170 
	`PUTCH
(127,
ây
->
wrôe_q
);

171 
ây
->
	`wrôe
(tty);

173 
	`DEC
(
ây
->
£c⁄d¨y
.
hód
);

177 i‡(
c
==
	`ERASE_CHAR
(
ây
)) {

178 i‡(
	`EMPTY
(
ây
->
£c⁄d¨y
) ||

179 (
c
=
	`LAST
(
ây
->
£c⁄d¨y
))==10 ||

180 
c
==
	`EOF_CHAR
(
ây
))

182 i‡(
	`L_ECHO
(
ây
)) {

183 i‡(
c
<32)

184 
	`PUTCH
(127,
ây
->
wrôe_q
);

185 
	`PUTCH
(127,
ây
->
wrôe_q
);

186 
ây
->
	`wrôe
(tty);

188 
	`DEC
(
ây
->
£c⁄d¨y
.
hód
);

191 i‡(
c
==
	`STOP_CHAR
(
ây
)) {

192 
ây
->
°›≥d
=1;

195 i‡(
c
==
	`START_CHAR
(
ây
)) {

196 
ây
->
°›≥d
=0;

200 i‡(
	`L_ISIG
(
ây
)) {

201 i‡(
c
==
	`INTR_CHAR
(
ây
)) {

202 
	`ây_öå
(
ây
,
INTMASK
);

205 i‡(
c
==
	`QUIT_CHAR
(
ây
)) {

206 
	`ây_öå
(
ây
,
QUITMASK
);

210 i‡(
c
==10 || c==
	`EOF_CHAR
(
ây
))

211 
ây
->
£c⁄d¨y
.
d©a
++;

212 i‡(
	`L_ECHO
(
ây
)) {

213 i‡(
c
==10) {

214 
	`PUTCH
(10,
ây
->
wrôe_q
);

215 
	`PUTCH
(13,
ây
->
wrôe_q
);

216 } i‡(
c
<32) {

217 i‡(
	`L_ECHOCTL
(
ây
)) {

218 
	`PUTCH
('^',
ây
->
wrôe_q
);

219 
	`PUTCH
(
c
+64,
ây
->
wrôe_q
);

222 
	`PUTCH
(
c
,
ây
->
wrôe_q
);

223 
ây
->
	`wrôe
(tty);

225 
	`PUTCH
(
c
,
ây
->
£c⁄d¨y
);

227 
	`wake_up
(&
ây
->
£c⁄d¨y
.
¥oc_li°
);

228 
	}
}

230 
	$ây_ªad
(
ch™√l
, * 
buf
, 
ƒ
)

232 
ây_°ru˘
 * 
ây
;

233 
c
, * 
b
=
buf
;

234 
möimum
,
time
,
Êag
=0;

235 
ﬁdÆ¨m
;

237 i‡(
ch™√l
>2 || 
ƒ
<0)  -1;

238 
ây
 = &
ây_èbÀ
[
ch™√l
];

239 
ﬁdÆ¨m
 = 
cuºít
->
Æ¨m
;

240 
time
 = 10L*
ây
->
ãrmios
.
c_cc
[
VTIME
];

241 
möimum
 = 
ây
->
ãrmios
.
c_cc
[
VMIN
];

242 i‡(
time
 && !
möimum
) {

243 
möimum
=1;

244 i‡(
Êag
=(!
ﬁdÆ¨m
 || 
time
+
jiffõs
<oldalarm))

245 
cuºít
->
Æ¨m
 = 
time
+
jiffõs
;

247 i‡(
möimum
>
ƒ
)

248 
möimum
=
ƒ
;

249 
ƒ
>0) {

250 i‡(
Êag
 && (
cuºít
->
sig«l
 & 
ALRMMASK
)) {

251 
cuºít
->
sig«l
 &~
ALRMMASK
;

254 i‡(
cuºít
->
sig«l
)

256 i‡(
	`EMPTY
(
ây
->
£c⁄d¨y
Ë|| (
	`L_CANON
(tty) &&

257 !
ây
->
£c⁄d¨y
.
d©a
 && 
	`LEFT
(tty->secondary)>20)) {

258 
	`¶ìp_if_em±y
(&
ây
->
£c⁄d¨y
);

262 
	`GETCH
(
ây
->
£c⁄d¨y
,
c
);

263 i‡(
c
==
	`EOF_CHAR
(
ây
) || c==10)

264 
ây
->
£c⁄d¨y
.
d©a
--;

265 i‡(
c
==
	`EOF_CHAR
(
ây
Ë&& 
	`L_CANON
(tty))

266  (
b
-
buf
);

268 
	`put_fs_byã
(
c
,
b
++);

269 i‡(!--
ƒ
)

272 } 
ƒ
>0 && !
	`EMPTY
(
ây
->
£c⁄d¨y
));

273 i‡(
time
 && !
	`L_CANON
(
ây
))

274 i‡(
Êag
=(!
ﬁdÆ¨m
 || 
time
+
jiffõs
<oldalarm))

275 
cuºít
->
Æ¨m
 = 
time
+
jiffõs
;

277 
cuºít
->
Æ¨m
 = 
ﬁdÆ¨m
;

278 i‡(
	`L_CANON
(
ây
)) {

279 i‡(
b
-
buf
)

281 } i‡(
b
-
buf
 >
möimum
)

284 
cuºít
->
Æ¨m
 = 
ﬁdÆ¨m
;

285 i‡(
cuºít
->
sig«l
 && !(
b
-
buf
))

286  -
EINTR
;

287  (
b
-
buf
);

288 
	}
}

290 
	$ây_wrôe
(
ch™√l
, * 
buf
, 
ƒ
)

292 
¸_Êag
=0;

293 
ây_°ru˘
 * 
ây
;

294 
c
, *
b
=
buf
;

296 i‡(
ch™√l
>2 || 
ƒ
<0)  -1;

297 
ây
 = 
ch™√l
 + 
ây_èbÀ
;

298 
ƒ
>0) {

299 
	`¶ìp_if_fuŒ
(&
ây
->
wrôe_q
);

300 i‡(
cuºít
->
sig«l
)

302 
ƒ
>0 && !
	`FULL
(
ây
->
wrôe_q
)) {

303 
c
=
	`gë_fs_byã
(
b
);

304 i‡(
	`O_POST
(
ây
)) {

305 i‡(
c
=='\r' && 
	`O_CRNL
(
ây
))

306 
c
='\n';

307 i‡(
c
=='\n' && 
	`O_NLRET
(
ây
))

308 
c
='\r';

309 i‡(
c
=='\n' && !
¸_Êag
 && 
	`O_NLCR
(
ây
)) {

310 
¸_Êag
 = 1;

311 
	`PUTCH
(13,
ây
->
wrôe_q
);

314 i‡(
	`O_LCUC
(
ây
))

315 
c
=
	`touµî
(c);

317 
b
++; 
ƒ
--;

318 
¸_Êag
 = 0;

319 
	`PUTCH
(
c
,
ây
->
wrôe_q
);

321 
ây
->
	`wrôe
(tty);

322 i‡(
ƒ
>0)

323 
	`scheduÀ
();

325  (
b
-
buf
);

326 
	}
}

342 
	$do_ây_öãºu±
(
ây
)

344 
	`c›y_to_cooked
(
ây_èbÀ
+
ây
);

345 
	}
}

347 
	$chr_dev_öô
()

349 
	}
}

	@kernel/chr_drv/tty_ioctl.c

7 
	~<î∫o.h
>

8 
	~<ãrmios.h
>

10 
	~<löux/sched.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/ây.h
>

14 
	~<asm/io.h
>

15 
	~<asm/£gmít.h
>

16 
	~<asm/sy°em.h
>

18 
	gquŸõ¡
[] = {

24 
	$ch™ge_•ìd
(
ây_°ru˘
 * 
ây
)

26 
p‹t
,
quŸ
;

28 i‡(!(
p‹t
 = 
ây
->
ªad_q
.
d©a
))

30 
quŸ
 = 
quŸõ¡
[
ây
->
ãrmios
.
c_cÊag
 & 
CBAUD
];

31 
	`˛i
();

32 
	`outb_p
(0x80,
p‹t
+3);

33 
	`outb_p
(
quŸ
 & 0xff,
p‹t
);

34 
	`outb_p
(
quŸ
 >> 8,
p‹t
+1);

35 
	`outb
(0x03,
p‹t
+3);

36 
	`°i
();

37 
	}
}

39 
	$Êush
(
ây_queue
 * 
queue
)

41 
	`˛i
();

42 
queue
->
hód
 = queue->
èû
;

43 
	`°i
();

44 
	}
}

46 
	$waô_u¡û_£¡
(
ây_°ru˘
 * 
ây
)

49 
	}
}

51 
	$£nd_bªak
(
ây_°ru˘
 * 
ây
)

54 
	}
}

56 
	$gë_ãrmios
(
ây_°ru˘
 * 
ây
, 
ãrmios
 *Åermios)

58 
i
;

60 
	`vîify_¨ó
(
ãrmios
,  (*termios));

61 
i
=0 ; i< ( (*
ãrmios
)) ; i++)

62 
	`put_fs_byã
–((*)&
ây
->
ãrmios
)[
i
] , i+(*)termios );

64 
	}
}

66 
	$£t_ãrmios
(
ây_°ru˘
 * 
ây
, 
ãrmios
 *Åermios)

68 
i
;

70 
i
=0 ; i< ( (*
ãrmios
)) ; i++)

71 ((*)&
ây
->
ãrmios
)[
i
]=
	`gë_fs_byã
(i+(*)termios);

72 
	`ch™ge_•ìd
(
ây
);

74 
	}
}

76 
	$gë_ãrmio
(
ây_°ru˘
 * 
ây
, 
ãrmio
 *Åermio)

78 
i
;

79 
ãrmio
 
tmp_ãrmio
;

81 
	`vîify_¨ó
(
ãrmio
,  (*termio));

82 
tmp_ãrmio
.
c_iÊag
 = 
ây
->
ãrmios
.c_iflag;

83 
tmp_ãrmio
.
c_oÊag
 = 
ây
->
ãrmios
.c_oflag;

84 
tmp_ãrmio
.
c_cÊag
 = 
ây
->
ãrmios
.c_cflag;

85 
tmp_ãrmio
.
c_lÊag
 = 
ây
->
ãrmios
.c_lflag;

86 
tmp_ãrmio
.
c_löe
 = 
ây
->
ãrmios
.c_line;

87 
i
=0 ; i < 
NCC
 ; i++)

88 
tmp_ãrmio
.
c_cc
[
i
] = 
ây
->
ãrmios
.c_cc[i];

89 
i
=0 ; i< ( (*
ãrmio
)) ; i++)

90 
	`put_fs_byã
–((*)&
tmp_ãrmio
)[
i
] , i+(*)
ãrmio
 );

92 
	}
}

97 
	$£t_ãrmio
(
ây_°ru˘
 * 
ây
, 
ãrmio
 *Åermio)

99 
i
;

100 
ãrmio
 
tmp_ãrmio
;

102 
i
=0 ; i< ( (*
ãrmio
)) ; i++)

103 ((*)&
tmp_ãrmio
)[
i
]=
	`gë_fs_byã
(i+(*)
ãrmio
);

104 *(*)&
ây
->
ãrmios
.
c_iÊag
 = 
tmp_ãrmio
.c_iflag;

105 *(*)&
ây
->
ãrmios
.
c_oÊag
 = 
tmp_ãrmio
.c_oflag;

106 *(*)&
ây
->
ãrmios
.
c_cÊag
 = 
tmp_ãrmio
.c_cflag;

107 *(*)&
ây
->
ãrmios
.
c_lÊag
 = 
tmp_ãrmio
.c_lflag;

108 
ây
->
ãrmios
.
c_löe
 = 
tmp_ãrmio
.c_line;

109 
i
=0 ; i < 
NCC
 ; i++)

110 
ây
->
ãrmios
.
c_cc
[
i
] = 
tmp_ãrmio
.c_cc[i];

111 
	`ch™ge_•ìd
(
ây
);

113 
	}
}

115 
	$ây_io˘l
(
dev
, 
cmd
, 
¨g
)

117 
ây_°ru˘
 * 
ây
;

118 i‡(
	`MAJOR
(
dev
) == 5) {

119 
dev
=
cuºít
->
ây
;

120 i‡(
dev
<0)

121 
	`∑nic
("tty_ioctl: dev<0");

123 
dev
=
	`MINOR
(dev);

124 
ây
 = 
dev
 + 
ây_èbÀ
;

125 
cmd
) {

126 
TCGETS
:

127  
	`gë_ãrmios
(
ây
,(
ãrmios
 *Ë
¨g
);

128 
TCSETSF
:

129 
	`Êush
(&
ây
->
ªad_q
);

130 
TCSETSW
:

131 
	`waô_u¡û_£¡
(
ây
);

132 
TCSETS
:

133  
	`£t_ãrmios
(
ây
,(
ãrmios
 *Ë
¨g
);

134 
TCGETA
:

135  
	`gë_ãrmio
(
ây
,(
ãrmio
 *Ë
¨g
);

136 
TCSETAF
:

137 
	`Êush
(&
ây
->
ªad_q
);

138 
TCSETAW
:

139 
	`waô_u¡û_£¡
(
ây
);

140 
TCSETA
:

141  
	`£t_ãrmio
(
ây
,(
ãrmio
 *Ë
¨g
);

142 
TCSBRK
:

143 i‡(!
¨g
) {

144 
	`waô_u¡û_£¡
(
ây
);

145 
	`£nd_bªak
(
ây
);

148 
TCXONC
:

149  -
EINVAL
;

150 
TCFLSH
:

151 i‡(
¨g
==0)

152 
	`Êush
(&
ây
->
ªad_q
);

153 i‡(
¨g
==1)

154 
	`Êush
(&
ây
->
wrôe_q
);

155 i‡(
¨g
==2) {

156 
	`Êush
(&
ây
->
ªad_q
);

157 
	`Êush
(&
ây
->
wrôe_q
);

159  -
EINVAL
;

161 
TIOCEXCL
:

162  -
EINVAL
;

163 
TIOCNXCL
:

164  -
EINVAL
;

165 
TIOCSCTTY
:

166  -
EINVAL
;

167 
TIOCGPGRP
:

168 
	`vîify_¨ó
((*Ë
¨g
,4);

169 
	`put_fs_l⁄g
(
ây
->
pgΩ
,(*Ë
¨g
);

171 
TIOCSPGRP
:

172 
ây
->
pgΩ
=
	`gë_fs_l⁄g
((*Ë
¨g
);

174 
TIOCOUTQ
:

175 
	`vîify_¨ó
((*Ë
¨g
,4);

176 
	`put_fs_l⁄g
(
	`CHARS
(
ây
->
wrôe_q
),(*Ë
¨g
);

178 
TIOCINQ
:

179 
	`vîify_¨ó
((*Ë
¨g
,4);

180 
	`put_fs_l⁄g
(
	`CHARS
(
ây
->
£c⁄d¨y
),

181 (*Ë
¨g
);

183 
TIOCSTI
:

184  -
EINVAL
;

185 
TIOCGWINSZ
:

186  -
EINVAL
;

187 
TIOCSWINSZ
:

188  -
EINVAL
;

189 
TIOCMGET
:

190  -
EINVAL
;

191 
TIOCMBIS
:

192  -
EINVAL
;

193 
TIOCMBIC
:

194  -
EINVAL
;

195 
TIOCMSET
:

196  -
EINVAL
;

197 
TIOCGSOFTCAR
:

198  -
EINVAL
;

199 
TIOCSSOFTCAR
:

200  -
EINVAL
;

202  -
EINVAL
;

204 
	}
}

	@kernel/exit.c

7 
	~<î∫o.h
>

8 
	~<sig«l.h
>

9 
	~<sys/waô.h
>

11 
	~<löux/sched.h
>

12 
	~<löux/kî√l.h
>

13 
	~<löux/ây.h
>

14 
	~<asm/£gmít.h
>

16 
sys_∑u£
();

17 
sys_˛o£
(
fd
);

19 
	$ªÀa£
(
èsk_°ru˘
 * 
p
)

21 
i
;

23 i‡(!
p
)

25 
i
=1 ; i<
NR_TASKS
 ; i++)

26 i‡(
èsk
[
i
]==
p
) {

27 
èsk
[
i
]=
NULL
;

28 
	`‰ì_∑ge
(()
p
);

29 
	`scheduÀ
();

32 
	`∑nic
("tryingÅoÑeleaseÇon-existentÅask");

33 
	}
}

35 
ölöe
 
	$£nd_sig
(
sig
,
èsk_°ru˘
 * 
p
,
¥iv
)

37 i‡(!
p
 || 
sig
<1 || sig>32)

38  -
EINVAL
;

39 i‡(
¥iv
 || (
cuºít
->
euid
==
p
->euidË|| 
	`su£r
())

40 
p
->
sig«l
 |(1<<(
sig
-1));

42  -
EPERM
;

44 
	}
}

46 
	$kûl_£ssi⁄
()

48 
èsk_°ru˘
 **
p
 = 
NR_TASKS
 + 
èsk
;

50 --
p
 > &
FIRST_TASK
) {

51 i‡(*
p
 && (*p)->
£ssi⁄
 =
cuºít
->session)

52 (*
p
)->
sig«l
 |1<<(
SIGHUP
-1);

54 
	}
}

60 
	$sys_kûl
(
pid
,
sig
)

62 
èsk_°ru˘
 **
p
 = 
NR_TASKS
 + 
èsk
;

63 
îr
, 
ªtvÆ
 = 0;

65 i‡(!
pid
Ë--
p
 > &
FIRST_TASK
) {

66 i‡(*
p
 && (*p)->
pgΩ
 =
cuºít
->
pid
)

67 i‡(
îr
=
	`£nd_sig
(
sig
,*
p
,1))

68 
ªtvÆ
 = 
îr
;

69 } i‡(
pid
>0Ë--
p
 > &
FIRST_TASK
) {

70 i‡(*
p
 && (*p)->
pid
 ==Öid)

71 i‡(
îr
=
	`£nd_sig
(
sig
,*
p
,0))

72 
ªtvÆ
 = 
îr
;

73 } i‡(
pid
 =-1Ë--
p
 > &
FIRST_TASK
)

74 i‡(
îr
 = 
	`£nd_sig
(
sig
,*
p
,0))

75 
ªtvÆ
 = 
îr
;

76 --
p
 > &
FIRST_TASK
)

77 i‡(*
p
 && (*p)->
pgΩ
 =-
pid
)

78 i‡(
îr
 = 
	`£nd_sig
(
sig
,*
p
,0))

79 
ªtvÆ
 = 
îr
;

80  
ªtvÆ
;

81 
	}
}

83 
	$ãŒ_Áthî
(
pid
)

85 
i
;

87 i‡(
pid
)

88 
i
=0;i<
NR_TASKS
;i++) {

89 i‡(!
èsk
[
i
])

91 i‡(
èsk
[
i
]->
pid
 !=Öid)

93 
èsk
[
i
]->
sig«l
 |(1<<(
SIGCHLD
-1));

98 
	`¥ötk
("BAD BAD -Ço father found\n\r");

99 
	`ªÀa£
(
cuºít
);

100 
	}
}

102 
	$do_exô
(
code
)

104 
i
;

106 
	`‰ì_∑ge_èbÀs
(
	`gë_ba£
(
cuºít
->
ldt
[1]),
	`gë_limô
(0x0f));

107 
	`‰ì_∑ge_èbÀs
(
	`gë_ba£
(
cuºít
->
ldt
[2]),
	`gë_limô
(0x17));

108 
i
=0 ; i<
NR_TASKS
 ; i++)

109 i‡(
èsk
[
i
] &&Åask[i]->
Áthî
 =
cuºít
->
pid
) {

110 
èsk
[
i
]->
Áthî
 = 1;

111 i‡(
èsk
[
i
]->
°©e
 =
TASK_ZOMBIE
)

113 (Ë
	`£nd_sig
(
SIGCHLD
, 
èsk
[1], 1);

115 
i
=0 ; i<
NR_OPEN
 ; i++)

116 i‡(
cuºít
->
fûp
[
i
])

117 
	`sys_˛o£
(
i
);

118 
	`ùut
(
cuºít
->
pwd
);

119 
cuºít
->
pwd
=
NULL
;

120 
	`ùut
(
cuºít
->
roŸ
);

121 
cuºít
->
roŸ
=
NULL
;

122 
	`ùut
(
cuºít
->
execuèbÀ
);

123 
cuºít
->
execuèbÀ
=
NULL
;

124 i‡(
cuºít
->
Àadî
 && cuºít->
ây
 >= 0)

125 
ây_èbÀ
[
cuºít
->
ây
].
pgΩ
 = 0;

126 i‡(
œ°_èsk_u£d_m©h
 =
cuºít
)

127 
œ°_èsk_u£d_m©h
 = 
NULL
;

128 i‡(
cuºít
->
Àadî
)

129 
	`kûl_£ssi⁄
();

130 
cuºít
->
°©e
 = 
TASK_ZOMBIE
;

131 
cuºít
->
exô_code
 = 
code
;

132 
	`ãŒ_Áthî
(
cuºít
->
Áthî
);

133 
	`scheduÀ
();

135 
	}
}

137 
	$sys_exô
(
îr‹_code
)

139  
	`do_exô
((
îr‹_code
&0xff)<<8);

140 
	}
}

142 
	$sys_waôpid
(
pid_t
 
pid
,* 
°©_addr
, 
›ti⁄s
)

144 
Êag
, 
code
;

145 
èsk_°ru˘
 ** 
p
;

147 
	`vîify_¨ó
(
°©_addr
,4);

148 
ª≥©
:

149 
Êag
=0;

150 
p
 = &
LAST_TASK
 ;Ö > &
FIRST_TASK
 ; --p) {

151 i‡(!*
p
 || *∞=
cuºít
)

153 i‡((*
p
)->
Áthî
 !
cuºít
->
pid
)

155 i‡(
pid
>0) {

156 i‡((*
p
)->
pid
 !=Öid)

158 } i‡(!
pid
) {

159 i‡((*
p
)->
pgΩ
 !
cuºít
->pgrp)

161 } i‡(
pid
 != -1) {

162 i‡((*
p
)->
pgΩ
 !-
pid
)

165 (*
p
)->
°©e
) {

166 
TASK_STOPPED
:

167 i‡(!(
›ti⁄s
 & 
WUNTRACED
))

169 
	`put_fs_l⁄g
(0x7f,
°©_addr
);

170  (*
p
)->
pid
;

171 
TASK_ZOMBIE
:

172 
cuºít
->
cutime
 +(*
p
)->
utime
;

173 
cuºít
->
c°ime
 +(*
p
)->
°ime
;

174 
Êag
 = (*
p
)->
pid
;

175 
code
 = (*
p
)->
exô_code
;

176 
	`ªÀa£
(*
p
);

177 
	`put_fs_l⁄g
(
code
,
°©_addr
);

178  
Êag
;

180 
Êag
=1;

184 i‡(
Êag
) {

185 i‡(
›ti⁄s
 & 
WNOHANG
)

187 
cuºít
->
°©e
=
TASK_INTERRUPTIBLE
;

188 
	`scheduÀ
();

189 i‡(!(
cuºít
->
sig«l
 &~(1<<(
SIGCHLD
-1))))

190 
ª≥©
;

192  -
EINTR
;

194  -
ECHILD
;

195 
	}
}

	@kernel/fork.c

13 
	~<î∫o.h
>

15 
	~<löux/sched.h
>

16 
	~<löux/kî√l.h
>

17 
	~<asm/£gmít.h
>

18 
	~<asm/sy°em.h
>

20 
wrôe_vîify
(
addªss
);

22 
	gœ°_pid
=0;

24 
	$vîify_¨ó
(* 
addr
,
size
)

26 
°¨t
;

28 
°¨t
 = (Ë
addr
;

29 
size
 +
°¨t
 & 0xfff;

30 
°¨t
 &= 0xfffff000;

31 
°¨t
 +
	`gë_ba£
(
cuºít
->
ldt
[2]);

32 
size
>0) {

33 
size
 -= 4096;

34 
	`wrôe_vîify
(
°¨t
);

35 
°¨t
 += 4096;

37 
	}
}

39 
	$c›y_mem
(
ƒ
,
èsk_°ru˘
 * 
p
)

41 
ﬁd_d©a_ba£
,
√w_d©a_ba£
,
d©a_limô
;

42 
ﬁd_code_ba£
,
√w_code_ba£
,
code_limô
;

44 
code_limô
=
	`gë_limô
(0x0f);

45 
d©a_limô
=
	`gë_limô
(0x17);

46 
ﬁd_code_ba£
 = 
	`gë_ba£
(
cuºít
->
ldt
[1]);

47 
ﬁd_d©a_ba£
 = 
	`gë_ba£
(
cuºít
->
ldt
[2]);

48 i‡(
ﬁd_d©a_ba£
 !
ﬁd_code_ba£
)

49 
	`∑nic
("We don't support separate I&D");

50 i‡(
d©a_limô
 < 
code_limô
)

51 
	`∑nic
("Bad data_limit");

52 
√w_d©a_ba£
 = 
√w_code_ba£
 = 
ƒ
 * 0x4000000;

53 
p
->
°¨t_code
 = 
√w_code_ba£
;

54 
	`£t_ba£
(
p
->
ldt
[1],
√w_code_ba£
);

55 
	`£t_ba£
(
p
->
ldt
[2],
√w_d©a_ba£
);

56 i‡(
	`c›y_∑ge_èbÀs
(
ﬁd_d©a_ba£
,
√w_d©a_ba£
,
d©a_limô
)) {

57 
	`‰ì_∑ge_èbÀs
(
√w_d©a_ba£
,
d©a_limô
);

58  -
ENOMEM
;

61 
	}
}

68 
	$c›y_¥o˚ss
(
ƒ
,
ebp
,
edi
,
esi
,
gs
,
n⁄e
,

69 
ebx
,
ecx
,
edx
,

70 
fs
,
es
,
ds
,

71 
eù
,
cs
,
eÊags
,
e•
,
ss
)

73 
èsk_°ru˘
 *
p
;

74 
i
;

75 
fûe
 *
f
;

77 
p
 = (
èsk_°ru˘
 *Ë
	`gë_‰ì_∑ge
();

78 i‡(!
p
)

79  -
EAGAIN
;

80 
èsk
[
ƒ
] = 
p
;

81 *
p
 = *
cuºít
;

82 
p
->
°©e
 = 
TASK_UNINTERRUPTIBLE
;

83 
p
->
pid
 = 
œ°_pid
;

84 
p
->
Áthî
 = 
cuºít
->
pid
;

85 
p
->
cou¡î
 =Ö->
¥i‹ôy
;

86 
p
->
sig«l
 = 0;

87 
p
->
Æ¨m
 = 0;

88 
p
->
Àadî
 = 0;

89 
p
->
utime
 =Ö->
°ime
 = 0;

90 
p
->
cutime
 =Ö->
c°ime
 = 0;

91 
p
->
°¨t_time
 = 
jiffõs
;

92 
p
->
tss
.
back_lök
 = 0;

93 
p
->
tss
.
e•0
 = 
PAGE_SIZE
 + ()Ö;

94 
p
->
tss
.
ss0
 = 0x10;

95 
p
->
tss
.
eù
 =Éip;

96 
p
->
tss
.
eÊags
 =Éflags;

97 
p
->
tss
.
óx
 = 0;

98 
p
->
tss
.
ecx
 =Écx;

99 
p
->
tss
.
edx
 =Édx;

100 
p
->
tss
.
ebx
 =Ébx;

101 
p
->
tss
.
e•
 =Ésp;

102 
p
->
tss
.
ebp
 =Ébp;

103 
p
->
tss
.
esi
 =Ési;

104 
p
->
tss
.
edi
 =Édi;

105 
p
->
tss
.
es
 =És & 0xffff;

106 
p
->
tss
.
cs
 = cs & 0xffff;

107 
p
->
tss
.
ss
 = ss & 0xffff;

108 
p
->
tss
.
ds
 = ds & 0xffff;

109 
p
->
tss
.
fs
 = fs & 0xffff;

110 
p
->
tss
.
gs
 = gs & 0xffff;

111 
p
->
tss
.
ldt
 = 
	`_LDT
(
ƒ
);

112 
p
->
tss
.
åa˚_bôm≠
 = 0x80000000;

113 i‡(
œ°_èsk_u£d_m©h
 =
cuºít
)

114 
	`__asm__
("˛t†; fnßvê%0"::"m" (
p
->
tss
.
i387
));

115 i‡(
	`c›y_mem
(
ƒ
,
p
)) {

116 
èsk
[
ƒ
] = 
NULL
;

117 
	`‰ì_∑ge
((Ë
p
);

118  -
EAGAIN
;

120 
i
=0; i<
NR_OPEN
;i++)

121 i‡(
f
=
p
->
fûp
[
i
])

122 
f
->
f_cou¡
++;

123 i‡(
cuºít
->
pwd
)

124 
cuºít
->
pwd
->
i_cou¡
++;

125 i‡(
cuºít
->
roŸ
)

126 
cuºít
->
roŸ
->
i_cou¡
++;

127 i‡(
cuºít
->
execuèbÀ
)

128 
cuºít
->
execuèbÀ
->
i_cou¡
++;

129 
	`£t_tss_desc
(
gdt
+(
ƒ
<<1)+
FIRST_TSS_ENTRY
,&(
p
->
tss
));

130 
	`£t_ldt_desc
(
gdt
+(
ƒ
<<1)+
FIRST_LDT_ENTRY
,&(
p
->
ldt
));

131 
p
->
°©e
 = 
TASK_RUNNING
;

132  
œ°_pid
;

133 
	}
}

135 
	$föd_em±y_¥o˚ss
()

137 
i
;

139 
ª≥©
:

140 i‡((++
œ°_pid
)<0)Üast_pid=1;

141 
i
=0 ; i<
NR_TASKS
 ; i++)

142 i‡(
èsk
[
i
] &&Åask[i]->
pid
 =
œ°_pid
Ë
ª≥©
;

143 
i
=1 ; i<
NR_TASKS
 ; i++)

144 i‡(!
èsk
[
i
])

145  
i
;

146  -
EAGAIN
;

147 
	}
}

	@kernel/math/math_emulate.c

12 
	~<sig«l.h
>

14 
	~<löux/sched.h
>

15 
	~<löux/kî√l.h
>

16 
	~<asm/£gmít.h
>

18 
	$m©h_emuœã
(
edi
, 
esi
, 
ebp
, 
sys_ˇŒ_ªt
,

19 
óx
,
ebx
,
ecx
,
edx
,

20 
fs
,
es
,
ds
,

21 
eù
,
cs
,
eÊags
,

22 
ss
, 
e•
)

24 
fú°
, 
£c⁄d
;

27 i‡(
cs
 != 0x000F) {

28 
	`¥ötk
("m©h_emuœã: %04x:%08x\n\r",
cs
,
eù
);

29 
	`∑nic
("MathÉmulationÇeeded in kernel");

31 
fú°
 = 
	`gë_fs_byã
((*)((*&
eù
)++));

32 
£c⁄d
 = 
	`gë_fs_byã
((*)((*&
eù
)++));

33 
	`¥ötk
("%04x:%08x %02x %02x\n\r",
cs
,
eù
-2,
fú°
,
£c⁄d
);

34 
cuºít
->
sig«l
 |1<<(
SIGFPE
-1);

35 
	}
}

37 
	$m©h_îr‹
()

39 
	`__asm__
("fnclex");

40 i‡(
œ°_èsk_u£d_m©h
)

41 
œ°_èsk_u£d_m©h
->
sig«l
 |1<<(
SIGFPE
-1);

42 
	}
}

	@kernel/mktime.c

7 
	~<time.h
>

20 
	#MINUTE
 60

	)

21 
	#HOUR
 (60*
MINUTE
)

	)

22 
	#DAY
 (24*
HOUR
)

	)

23 
	#YEAR
 (365*
DAY
)

	)

26 
	gm⁄th
[12] = {

28 
DAY
*(31),

29 
DAY
*(31+29),

30 
DAY
*(31+29+31),

31 
DAY
*(31+29+31+30),

32 
DAY
*(31+29+31+30+31),

33 
DAY
*(31+29+31+30+31+30),

34 
DAY
*(31+29+31+30+31+30+31),

35 
DAY
*(31+29+31+30+31+30+31+31),

36 
DAY
*(31+29+31+30+31+30+31+31+30),

37 
DAY
*(31+29+31+30+31+30+31+31+30+31),

38 
DAY
*(31+29+31+30+31+30+31+31+30+31+30)

41 
	$kî√l_mktime
(
tm
 *Åm)

43 
ªs
;

44 
yór
;

46 
yór
 = 
tm
->
tm_yór
 - 70;

48 
ªs
 = 
YEAR
*
yór
 + 
DAY
*((year+1)/4);

49 
ªs
 +
m⁄th
[
tm
->
tm_m⁄
];

51 i‡(
tm
->
tm_m⁄
>1 && ((
yór
+2)%4))

52 
ªs
 -
DAY
;

53 
ªs
 +
DAY
*(
tm
->
tm_mday
-1);

54 
ªs
 +
HOUR
*
tm
->
tm_hour
;

55 
ªs
 +
MINUTE
*
tm
->
tm_mö
;

56 
ªs
 +
tm
->
tm_£c
;

57  
ªs
;

58 
	}
}

	@kernel/panic.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/sched.h
>

14 
sys_sync
();

16 vﬁ©ûê
	$∑nic
(c⁄° * 
s
)

18 
	`¥ötk
("Kî√»∑nic: %s\n\r",
s
);

19 i‡(
cuºít
 =
èsk
[0])

20 
	`¥ötk
("In swapperÅask -Çot syncing\n\r");

22 
	`sys_sync
();

24 
	}
}

	@kernel/printk.c

12 
	~<°d¨g.h
>

13 
	~<°ddef.h
>

15 
	~<löux/kî√l.h
>

17 
	gbuf
[1024];

19 
v•rötf
(* 
buf
, c⁄° * 
fmt
, 
va_li°
 
¨gs
);

21 
	$¥ötk
(c⁄° *
fmt
, ...)

23 
va_li°
 
¨gs
;

24 
i
;

26 
	`va_°¨t
(
¨gs
, 
fmt
);

27 
i
=
	`v•rötf
(
buf
,
fmt
,
¨gs
);

28 
	`va_íd
(
¨gs
);

29 
	`__asm__
("push %%fs\n\t"

39 ::"r" (
i
):"ax","cx","dx");

40  
i
;

41 
	}
}

	@kernel/sched.c

13 
	~<löux/sched.h
>

14 
	~<löux/kî√l.h
>

15 
	~<löux/sys.h
>

16 
	~<löux/fdªg.h
>

17 
	~<asm/sy°em.h
>

18 
	~<asm/io.h
>

19 
	~<asm/£gmít.h
>

21 
	~<sig«l.h
>

23 
	#_S
(
ƒ
Ë(1<<(“r)-1))

	)

24 
	#_BLOCKABLE
 (~(
	`_S
(
SIGKILL
Ë| _S(
SIGSTOP
)))

	)

26 
	$show_èsk
(
ƒ
,
èsk_°ru˘
 * 
p
)

28 
i
,
j
 = 4096-(
èsk_°ru˘
);

30 
	`¥ötk
("%d:Öid=%d, sèã=%d, ",
ƒ
,
p
->
pid
,p->
°©e
);

31 
i
=0;

32 
i
<
j
 && !((*)(
p
+1))[i])

33 
i
++;

34 
	`¥ötk
("%d (o‡%dËch¨†‰ì i¿kî√»°ack\n\r",
i
,
j
);

35 
	}
}

37 
	$show_°©
()

39 
i
;

41 
i
=0;i<
NR_TASKS
;i++)

42 i‡(
èsk
[
i
])

43 
	`show_èsk
(
i
,
èsk
[i]);

44 
	}
}

46 
	#LATCH
 (1193180/
HZ
)

	)

48 
mem_u£
();

50 
timî_öãºu±
();

51 
sy°em_ˇŒ
();

53 
	uèsk_uni⁄
 {

54 
èsk_°ru˘
 
	mèsk
;

55 
	m°ack
[
PAGE_SIZE
];

58 
èsk_uni⁄
 
	göô_èsk
 = {
INIT_TASK
,};

60 vﬁ©ûê
	gjiffõs
=0;

61 
	g°¨tup_time
=0;

62 
èsk_°ru˘
 *
	gcuºít
 = &(
öô_èsk
.
èsk
);

63 
èsk_°ru˘
 *
	gœ°_èsk_u£d_m©h
 = 
NULL
;

65 
èsk_°ru˘
 * 
	gèsk
[
NR_TASKS
] = {&(
öô_èsk
.
èsk
), };

67 
	gu£r_°ack
 [ 
PAGE_SIZE
>>2 ] ;

70 * 
	ma
;

71 
	mb
;

72 } 
	g°ack_°¨t
 = { & 
u£r_°ack
 [
PAGE_SIZE
>>2] , 0x10 };

77 
	$m©h_°©e_ª°‹e
()

79 i‡(
œ°_èsk_u£d_m©h
 =
cuºít
)

81 
	`__asm__
("fwait");

82 i‡(
œ°_èsk_u£d_m©h
) {

83 
	`__asm__
("‚ßvê%0"::"m" (
œ°_èsk_u£d_m©h
->
tss
.
i387
));

85 
œ°_èsk_u£d_m©h
=
cuºít
;

86 i‡(
cuºít
->
u£d_m©h
) {

87 
	`__asm__
("‰°‹ %0"::"m" (
cuºít
->
tss
.
i387
));

89 
	`__asm__
("fninit"::);

90 
cuºít
->
u£d_m©h
=1;

92 
	}
}

104 
	$scheduÀ
()

106 
i
,
√xt
,
c
;

107 
èsk_°ru˘
 ** 
p
;

111 
p
 = &
LAST_TASK
 ;Ö > &
FIRST_TASK
 ; --p)

112 i‡(*
p
) {

113 i‡((*
p
)->
Æ¨m
 && (*p)->Æ¨m < 
jiffõs
) {

114 (*
p
)->
sig«l
 |(1<<(
SIGALRM
-1));

115 (*
p
)->
Æ¨m
 = 0;

117 i‡(((*
p
)->
sig«l
 & ~(
_BLOCKABLE
 & (*p)->
blocked
)) &&

118 (*
p
)->
°©e
==
TASK_INTERRUPTIBLE
)

119 (*
p
)->
°©e
=
TASK_RUNNING
;

125 
c
 = -1;

126 
√xt
 = 0;

127 
i
 = 
NR_TASKS
;

128 
p
 = &
èsk
[
NR_TASKS
];

129 --
i
) {

130 i‡(!*--
p
)

132 i‡((*
p
)->
°©e
 =
TASK_RUNNING
 && (*p)->
cou¡î
 > 
c
)

133 
c
 = (*
p
)->
cou¡î
, 
√xt
 = 
i
;

135 i‡(
c
) ;

136 
p
 = &
LAST_TASK
 ;Ö > &
FIRST_TASK
 ; --p)

137 i‡(*
p
)

138 (*
p
)->
cou¡î
 = ((*p)->counter >> 1) +

139 (*
p
)->
¥i‹ôy
;

141 
	`swôch_to
(
√xt
);

142 
	}
}

144 
	$sys_∑u£
()

146 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

147 
	`scheduÀ
();

149 
	}
}

151 
	$¶ìp_⁄
(
èsk_°ru˘
 **
p
)

153 
èsk_°ru˘
 *
tmp
;

155 i‡(!
p
)

157 i‡(
cuºít
 =&(
öô_èsk
.
èsk
))

158 
	`∑nic
("task[0]ÅryingÅo sleep");

159 
tmp
 = *
p
;

160 *
p
 = 
cuºít
;

161 
cuºít
->
°©e
 = 
TASK_UNINTERRUPTIBLE
;

162 
	`scheduÀ
();

163 i‡(
tmp
)

164 
tmp
->
°©e
=0;

165 
	}
}

167 
	$öãºu±ibÀ_¶ìp_⁄
(
èsk_°ru˘
 **
p
)

169 
èsk_°ru˘
 *
tmp
;

171 i‡(!
p
)

173 i‡(
cuºít
 =&(
öô_èsk
.
èsk
))

174 
	`∑nic
("task[0]ÅryingÅo sleep");

175 
tmp
=*
p
;

176 *
p
=
cuºít
;

177 
ª≥©
: 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

178 
	`scheduÀ
();

179 i‡(*
p
 && *∞!
cuºít
) {

180 (**
p
).
°©e
=0;

181 
ª≥©
;

183 *
p
=
NULL
;

184 i‡(
tmp
)

185 
tmp
->
°©e
=0;

186 
	}
}

188 
	$wake_up
(
èsk_°ru˘
 **
p
)

190 i‡(
p
 && *p) {

191 (**
p
).
°©e
=0;

192 *
p
=
NULL
;

194 
	}
}

201 
èsk_°ru˘
 * 
	gwaô_mŸ‹
[4] = {
NULL
,NULL,NULL,NULL};

202 
	gm⁄_timî
[4]={0,0,0,0};

203 
	gmoff_timî
[4]={0,0,0,0};

204 
	gcuºít_DOR
 = 0x0C;

206 
	$ticks_to_Ê›py_⁄
(
ƒ
)

208 
£À˘ed
;

209 
mask
 = 0x10 << 
ƒ
;

211 i‡(
ƒ
>3)

212 
	`∑nic
("floppy_on:Çr>3");

213 
moff_timî
[
ƒ
]=10000;

214 
	`˛i
();

215 
mask
 |
cuºít_DOR
;

216 i‡(!
£À˘ed
) {

217 
mask
 &= 0xFC;

218 
mask
 |
ƒ
;

220 i‡(
mask
 !
cuºít_DOR
) {

221 
	`outb
(
mask
,
FD_DOR
);

222 i‡((
mask
 ^ 
cuºít_DOR
) & 0xf0)

223 
m⁄_timî
[
ƒ
] = 
HZ
/2;

224 i‡(
m⁄_timî
[
ƒ
] < 2)

225 
m⁄_timî
[
ƒ
] = 2;

226 
cuºít_DOR
 = 
mask
;

228 
	`°i
();

229  
m⁄_timî
[
ƒ
];

230 
	}
}

232 
	$Ê›py_⁄
(
ƒ
)

234 
	`˛i
();

235 
	`ticks_to_Ê›py_⁄
(
ƒ
))

236 
	`¶ìp_⁄
(
ƒ
+
waô_mŸ‹
);

237 
	`°i
();

238 
	}
}

240 
	$Ê›py_off
(
ƒ
)

242 
moff_timî
[
ƒ
]=3*
HZ
;

243 
	}
}

245 
	$do_Ê›py_timî
()

247 
i
;

248 
mask
 = 0x10;

250 
i
=0 ; i<4 ; i++,
mask
 <<= 1) {

251 i‡(!(
mask
 & 
cuºít_DOR
))

253 i‡(
m⁄_timî
[
i
]) {

254 i‡(!--
m⁄_timî
[
i
])

255 
	`wake_up
(
i
+
waô_mŸ‹
);

256 } i‡(!
moff_timî
[
i
]) {

257 
cuºít_DOR
 &~
mask
;

258 
	`outb
(
cuºít_DOR
,
FD_DOR
);

260 
moff_timî
[
i
]--;

262 
	}
}

264 
	#TIME_REQUESTS
 64

	)

266 
	stimî_li°
 {

267 
	mjiffõs
;

268 (*
	m‚
)();

269 
timî_li°
 * 
	m√xt
;

270 } 
	gtimî_li°
[
TIME_REQUESTS
], * 
	g√xt_timî
 = 
NULL
;

272 
add_timî
(
jiffõs
, (*
‚
)())

274 
timî_li°
 * 
p
;

276 i‡(!
‚
)

278 
	`˛i
();

279 i‡(
jiffõs
 <= 0)

280 (
‚
)();

282 
p
 = 
timî_li°
 ;Ö <Åimî_li° + 
TIME_REQUESTS
 ;Ö++)

283 i‡(!
p
->
‚
)

285 i‡(
p
 >
timî_li°
 + 
TIME_REQUESTS
)

286 
	`∑nic
("No moreÅimeÑequests free");

287 
p
->
‚
 = fn;

288 
p
->
jiffõs
 = jiffies;

289 
p
->
√xt
 = 
√xt_timî
;

290 
√xt_timî
 = 
p
;

291 
p
->
√xt
 &&Ö->√xt->
jiffõs
 <Ö->jiffies) {

292 
p
->
jiffõs
 -p->
√xt
->jiffies;

293 
‚
 = 
p
->fn;

294 
p
->
‚
 =Ö->
√xt
->fn;

295 
p
->
√xt
->
‚
 = fn;

296 
jiffõs
 = 
p
->jiffies;

297 
p
->
jiffõs
 =Ö->
√xt
->jiffies;

298 
p
->
√xt
->
jiffõs
 = jiffies;

299 
p
 =Ö->
√xt
;

302 
	`°i
();

303 
	}
}

305 
	$do_timî
(
˝l
)

307 
bìpcou¡
;

308 
	`sysbìp°›
();

310 i‡(
bìpcou¡
)

311 i‡(!--
bìpcou¡
)

312 
	`sysbìp°›
();

314 i‡(
˝l
)

315 
cuºít
->
utime
++;

317 
cuºít
->
°ime
++;

319 i‡(
√xt_timî
) {

320 
√xt_timî
->
jiffõs
--;

321 
√xt_timî
 &&Çext_timî->
jiffõs
 <= 0) {

322 (*
‚
)();

324 
‚
 = 
√xt_timî
->fn;

325 
√xt_timî
->
‚
 = 
NULL
;

326 
√xt_timî
 =Çext_timî->
√xt
;

327 (
‚
)();

330 i‡(
cuºít_DOR
 & 0xf0)

331 
	`do_Ê›py_timî
();

332 i‡((--
cuºít
->
cou¡î
)>0) ;

333 
cuºít
->
cou¡î
=0;

334 i‡(!
˝l
) ;

335 
	`scheduÀ
();

336 
	}
}

338 
	$sys_Æ¨m
(
£c⁄ds
)

340 
ﬁd
 = 
cuºít
->
Æ¨m
;

342 i‡(
ﬁd
)

343 
ﬁd
 = (ﬁd - 
jiffõs
Ë/ 
HZ
;

344 
cuºít
->
Æ¨m
 = (
£c⁄ds
>0)?(
jiffõs
+
HZ
*seconds):0;

345  (
ﬁd
);

346 
	}
}

348 
	$sys_gëpid
()

350  
cuºít
->
pid
;

351 
	}
}

353 
	$sys_gëµid
()

355  
cuºít
->
Áthî
;

356 
	}
}

358 
	$sys_gëuid
()

360  
cuºít
->
uid
;

361 
	}
}

363 
	$sys_gëeuid
()

365  
cuºít
->
euid
;

366 
	}
}

368 
	$sys_gëgid
()

370  
cuºít
->
gid
;

371 
	}
}

373 
	$sys_gëegid
()

375  
cuºít
->
egid
;

376 
	}
}

378 
	$sys_ni˚
(
ö¸emít
)

380 i‡(
cuºít
->
¥i‹ôy
-
ö¸emít
>0)

381 
cuºít
->
¥i‹ôy
 -
ö¸emít
;

383 
	}
}

385 
	$sched_öô
()

387 
i
;

388 
desc_°ru˘
 * 
p
;

390 i‡((
siga˘i⁄
) != 16)

391 
	`∑nic
("Struct sigaction MUST be 16 bytes");

392 
	`£t_tss_desc
(
gdt
+
FIRST_TSS_ENTRY
,&(
öô_èsk
.
èsk
.
tss
));

393 
	`£t_ldt_desc
(
gdt
+
FIRST_LDT_ENTRY
,&(
öô_èsk
.
èsk
.
ldt
));

394 
p
 = 
gdt
+2+
FIRST_TSS_ENTRY
;

395 
i
=1;i<
NR_TASKS
;i++) {

396 
èsk
[
i
] = 
NULL
;

397 
p
->
a
ı->
b
=0;

398 
p
++;

399 
p
->
a
ı->
b
=0;

400 
p
++;

403 
	`__asm__
("pushfl ;ándl $0xffffbfff,(%esp) ;Öopfl");

404 
	`…r
(0);

405 
	`Œdt
(0);

406 
	`outb_p
(0x36,0x43);

407 
	`outb_p
(
LATCH
 & 0xff , 0x40);

408 
	`outb
(
LATCH
 >> 8 , 0x40);

409 
	`£t_öå_g©e
(0x20,&
timî_öãºu±
);

410 
	`outb
(
	`öb_p
(0x21)&~0x01,0x21);

411 
	`£t_sy°em_g©e
(0x80,&
sy°em_ˇŒ
);

412 
	}
}

	@kernel/signal.c

7 
	~<löux/sched.h
>

8 
	~<löux/kî√l.h
>

9 
	~<asm/£gmít.h
>

11 
	~<sig«l.h
>

13 vﬁ©ûê
do_exô
(
îr‹_code
);

15 
	$sys_sgëmask
()

17  
cuºít
->
blocked
;

18 
	}
}

20 
	$sys_s£tmask
(
√wmask
)

22 
ﬁd
=
cuºít
->
blocked
;

24 
cuºít
->
blocked
 = 
√wmask
 & ~(1<<(
SIGKILL
-1));

25  
ﬁd
;

26 
	}
}

28 
ölöe
 
	$ßve_ﬁd
(* 
‰om
,* 
to
)

30 
i
;

32 
	`vîify_¨ó
(
to
, (
siga˘i⁄
));

33 
i
=0 ; i< (
siga˘i⁄
) ; i++) {

34 
	`put_fs_byã
(*
‰om
,
to
);

35 
‰om
++;

36 
to
++;

38 
	}
}

40 
ölöe
 
	$gë_√w
(* 
‰om
,* 
to
)

42 
i
;

44 
i
=0 ; i< (
siga˘i⁄
) ; i++)

45 *(
to
++Ë
	`gë_fs_byã
(
‰om
++);

46 
	}
}

48 
	$sys_sig«l
(
signum
, 
h™dÀr
, 
ª°‹î
)

50 
siga˘i⁄
 
tmp
;

52 i‡(
signum
<1 || signum>32 || signum==
SIGKILL
)

54 
tmp
.
ß_h™dÀr
 = ((*)()Ë
h™dÀr
;

55 
tmp
.
ß_mask
 = 0;

56 
tmp
.
ß_Êags
 = 
SA_ONESHOT
 | 
SA_NOMASK
;

57 
tmp
.
ß_ª°‹î
 = ((*)()Ë
ª°‹î
;

58 
h™dÀr
 = (Ë
cuºít
->
siga˘i⁄
[
signum
-1].
ß_h™dÀr
;

59 
cuºít
->
siga˘i⁄
[
signum
-1] = 
tmp
;

60  
h™dÀr
;

61 
	}
}

63 
	$sys_siga˘i⁄
(
signum
, c⁄° 
siga˘i⁄
 * 
a˘i⁄
,

64 
siga˘i⁄
 * 
ﬁda˘i⁄
)

66 
siga˘i⁄
 
tmp
;

68 i‡(
signum
<1 || signum>32 || signum==
SIGKILL
)

70 
tmp
 = 
cuºít
->
siga˘i⁄
[
signum
-1];

71 
	`gë_√w
((*Ë
a˘i⁄
,

72 (*Ë(
signum
-1+
cuºít
->
siga˘i⁄
));

73 i‡(
ﬁda˘i⁄
)

74 
	`ßve_ﬁd
((*Ë&
tmp
,(*Ë
ﬁda˘i⁄
);

75 i‡(
cuºít
->
siga˘i⁄
[
signum
-1].
ß_Êags
 & 
SA_NOMASK
)

76 
cuºít
->
siga˘i⁄
[
signum
-1].
ß_mask
 = 0;

78 
cuºít
->
siga˘i⁄
[
signum
-1].
ß_mask
 |= (1<<(signum-1));

80 
	}
}

82 
	$do_sig«l
(
sigƒ
,
óx
, 
ebx
, 
ecx
, 
edx
,

83 
fs
, 
es
, 
ds
,

84 
eù
, 
cs
, 
eÊags
,

85 * 
e•
, 
ss
)

87 
ß_h™dÀr
;

88 
ﬁd_eù
=
eù
;

89 
siga˘i⁄
 * 
ß
 = 
cuºít
->siga˘i⁄ + 
sigƒ
 - 1;

90 
l⁄gs
;

91 * 
tmp_e•
;

93 
ß_h™dÀr
 = (Ë
ß
->sa_handler;

94 i‡(
ß_h™dÀr
==1)

96 i‡(!
ß_h™dÀr
) {

97 i‡(
sigƒ
==
SIGCHLD
)

100 
	`do_exô
(1<<(
sigƒ
-1));

102 i‡(
ß
->
ß_Êags
 & 
SA_ONESHOT
)

103 
ß
->
ß_h™dÀr
 = 
NULL
;

104 *(&
eù
Ë
ß_h™dÀr
;

105 
l⁄gs
 = (
ß
->
ß_Êags
 & 
SA_NOMASK
)?7:8;

106 *(&
e•
Ë-
l⁄gs
;

107 
	`vîify_¨ó
(
e•
,
l⁄gs
*4);

108 
tmp_e•
=
e•
;

109 
	`put_fs_l⁄g
((Ë
ß
->
ß_ª°‹î
,
tmp_e•
++);

110 
	`put_fs_l⁄g
(
sigƒ
,
tmp_e•
++);

111 i‡(!(
ß
->
ß_Êags
 & 
SA_NOMASK
))

112 
	`put_fs_l⁄g
(
cuºít
->
blocked
,
tmp_e•
++);

113 
	`put_fs_l⁄g
(
óx
,
tmp_e•
++);

114 
	`put_fs_l⁄g
(
ecx
,
tmp_e•
++);

115 
	`put_fs_l⁄g
(
edx
,
tmp_e•
++);

116 
	`put_fs_l⁄g
(
eÊags
,
tmp_e•
++);

117 
	`put_fs_l⁄g
(
ﬁd_eù
,
tmp_e•
++);

118 
cuºít
->
blocked
 |
ß
->
ß_mask
;

119 
	}
}

	@kernel/sys.c

7 
	~<î∫o.h
>

9 
	~<löux/sched.h
>

10 
	~<löux/ây.h
>

11 
	~<löux/kî√l.h
>

12 
	~<asm/£gmít.h
>

13 
	~<sys/times.h
>

14 
	~<sys/ut¢ame.h
>

16 
	$sys_·ime
()

18  -
ENOSYS
;

19 
	}
}

21 
	$sys_bªak
()

23  -
ENOSYS
;

24 
	}
}

26 
	$sys_±ø˚
()

28  -
ENOSYS
;

29 
	}
}

31 
	$sys_°ty
()

33  -
ENOSYS
;

34 
	}
}

36 
	$sys_gây
()

38  -
ENOSYS
;

39 
	}
}

41 
	$sys_ª«me
()

43  -
ENOSYS
;

44 
	}
}

46 
	$sys_¥of
()

48  -
ENOSYS
;

49 
	}
}

51 
	$sys_£åegid
(
rgid
, 
egid
)

53 i‡(
rgid
>0) {

54 i‡((
cuºít
->
gid
 =
rgid
) ||

55 
	`su£r
())

56 
cuºít
->
gid
 = 
rgid
;

58 (-
EPERM
);

60 i‡(
egid
>0) {

61 i‡((
cuºít
->
gid
 =
egid
) ||

62 (
cuºít
->
egid
 ==Égid) ||

63 (
cuºít
->
sgid
 =
egid
) ||

64 
	`su£r
())

65 
cuºít
->
egid
 =Égid;

67 (-
EPERM
);

70 
	}
}

72 
	$sys_£tgid
(
gid
)

74 (
	`sys_£åegid
(
gid
, gid));

75 
	}
}

77 
	$sys_ac˘
()

79  -
ENOSYS
;

80 
	}
}

82 
	$sys_phys
()

84  -
ENOSYS
;

85 
	}
}

87 
	$sys_lock
()

89  -
ENOSYS
;

90 
	}
}

92 
	$sys_mpx
()

94  -
ENOSYS
;

95 
	}
}

97 
	$sys_ulimô
()

99  -
ENOSYS
;

100 
	}
}

102 
	$sys_time
(* 
éoc
)

104 
i
;

106 
i
 = 
CURRENT_TIME
;

107 i‡(
éoc
) {

108 
	`vîify_¨ó
(
éoc
,4);

109 
	`put_fs_l⁄g
(
i
,(*)
éoc
);

111  
i
;

112 
	}
}

118 
	$sys_£åeuid
(
ruid
, 
euid
)

120 
ﬁd_ruid
 = 
cuºít
->
uid
;

122 i‡(
ruid
>0) {

123 i‡((
cuºít
->
euid
==
ruid
) ||

124 (
ﬁd_ruid
 =
ruid
) ||

125 
	`su£r
())

126 
cuºít
->
uid
 = 
ruid
;

128 (-
EPERM
);

130 i‡(
euid
>0) {

131 i‡((
ﬁd_ruid
 =
euid
) ||

132 (
cuºít
->
euid
 ==Éuid) ||

133 
	`su£r
())

134 
cuºít
->
euid
 =Éuid;

136 
cuºít
->
uid
 = 
ﬁd_ruid
;

137 (-
EPERM
);

141 
	}
}

143 
	$sys_£tuid
(
uid
)

145 (
	`sys_£åeuid
(
uid
, uid));

146 
	}
}

148 
	$sys_°ime
(* 
çå
)

150 i‡(!
	`su£r
())

151  -
EPERM
;

152 
°¨tup_time
 = 
	`gë_fs_l⁄g
((*)
çå
Ë- 
jiffõs
/
HZ
;

154 
	}
}

156 
	$sys_times
(
tms
 * 
tbuf
)

158 i‡(
tbuf
) {

159 
	`vîify_¨ó
(
tbuf
, *tbuf);

160 
	`put_fs_l⁄g
(
cuºít
->
utime
,(*)&
tbuf
->
tms_utime
);

161 
	`put_fs_l⁄g
(
cuºít
->
°ime
,(*)&
tbuf
->
tms_°ime
);

162 
	`put_fs_l⁄g
(
cuºít
->
cutime
,(*)&
tbuf
->
tms_cutime
);

163 
	`put_fs_l⁄g
(
cuºít
->
c°ime
,(*)&
tbuf
->
tms_c°ime
);

165  
jiffõs
;

166 
	}
}

168 
	$sys_brk
(
íd_d©a_£g
)

170 i‡(
íd_d©a_£g
 >
cuºít
->
íd_code
 &&

171 
íd_d©a_£g
 < 
cuºít
->
°¨t_°ack
 - 16384)

172 
cuºít
->
brk
 = 
íd_d©a_£g
;

173  
cuºít
->
brk
;

174 
	}
}

181 
	$sys_£çgid
(
pid
, 
pgid
)

183 
i
;

185 i‡(!
pid
)

186 
pid
 = 
cuºít
->pid;

187 i‡(!
pgid
)

188 
pgid
 = 
cuºít
->
pid
;

189 
i
=0 ; i<
NR_TASKS
 ; i++)

190 i‡(
èsk
[
i
] &&Åask[i]->
pid
==pid) {

191 i‡(
èsk
[
i
]->
Àadî
)

192  -
EPERM
;

193 i‡(
èsk
[
i
]->
£ssi⁄
 !
cuºít
->session)

194  -
EPERM
;

195 
èsk
[
i
]->
pgΩ
 = 
pgid
;

198  -
ESRCH
;

199 
	}
}

201 
	$sys_gëpgΩ
()

203  
cuºít
->
pgΩ
;

204 
	}
}

206 
	$sys_£tsid
()

208 i‡(
cuºít
->
Àadî
 && !
	`su£r
())

209  -
EPERM
;

210 
cuºít
->
Àadî
 = 1;

211 
cuºít
->
£ssi⁄
 = cuºít->
pgΩ
 = cuºít->
pid
;

212 
cuºít
->
ây
 = -1;

213  
cuºít
->
pgΩ
;

214 
	}
}

216 
	$sys_u«me
(
ut¢ame
 * 
«me
)

218 
ut¢ame
 
thi¢ame
 = {

221 
i
;

223 i‡(!
«me
Ë -
ERROR
;

224 
	`vîify_¨ó
(
«me
, *name);

225 
i
=0;i< *
«me
;i++)

226 
	`put_fs_byã
(((*Ë&
thi¢ame
)[
i
],i+(*Ë
«me
);

228 
	}
}

230 
	$sys_umask
(
mask
)

232 
ﬁd
 = 
cuºít
->
umask
;

234 
cuºít
->
umask
 = 
mask
 & 0777;

235  (
ﬁd
);

236 
	}
}

	@kernel/traps.c

13 
	~<°rög.h
>

15 
	~<löux/hód.h
>

16 
	~<löux/sched.h
>

17 
	~<löux/kî√l.h
>

18 
	~<asm/sy°em.h
>

19 
	~<asm/£gmít.h
>

20 
	~<asm/io.h
>

22 
	#gë_£g_byã
(
£g
,
addr
) ({ \

23 
__ªs
; \

24 
	`__asm__
("push %%fs;mov %%ax,%%fs;movb %%fs:%2,%%al;pop %%fs" \

25 :"˜" (
__ªs
):"0" (
£g
),"m" (*(
addr
))); \

26 
__ªs
;})

	)

28 
	#gë_£g_l⁄g
(
£g
,
addr
) ({ \

29 
__ªs
; \

30 
	`__asm__
("push %%fs;mov %%ax,%%fs;movl %%fs:%2,%%eax;pop %%fs" \

31 :"˜" (
__ªs
):"0" (
£g
),"m" (*(
addr
))); \

32 
__ªs
;})

	)

34 
	#_fs
() ({ \

35 
__ªs
; \

36 
	`__asm__
("mov %%fs,%%ax":"˜" (
__ªs
):); \

37 
__ªs
;})

	)

39 
do_exô
(
code
);

41 
∑ge_ex˚±i⁄
();

43 
divide_îr‹
();

44 
debug
();

45 
nmi
();

46 
öt3
();

47 
ovîÊow
();

48 
bounds
();

49 
övÆid_›
();

50 
devi˚_nŸ_avaûabÀ
();

51 
doubÀ_Áu…
();

52 
c›ro˚ss‹_£gmít_ovîrun
();

53 
övÆid_TSS
();

54 
£gmít_nŸ_¥e£¡
();

55 
°ack_£gmít
();

56 
gíîÆ_¥Ÿe˘i⁄
();

57 
∑ge_Áu…
();

58 
c›ro˚ss‹_îr‹
();

59 
ª£rved
();

60 
∑øŒñ_öãºu±
();

61 
úq13
();

63 
	$dõ
(* 
°r
,
e•_±r
,
ƒ
)

65 * 
e•
 = (*Ë
e•_±r
;

66 
i
;

68 
	`¥ötk
("%s: %04x\n\r",
°r
,
ƒ
&0xffff);

69 
	`¥ötk
("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",

70 
e•
[1],esp[0],esp[2],esp[4],esp[3]);

71 
	`¥ötk
("fs: %04x\n",
	`_fs
());

72 
	`¥ötk
("ba£: %p,Üimô: %p\n",
	`gë_ba£
(
cuºít
->
ldt
[1]),
	`gë_limô
(0x17));

73 i‡(
e•
[4] == 0x17) {

74 
	`¥ötk
("Stack: ");

75 
i
=0;i<4;i++)

76 
	`¥ötk
("%∞",
	`gë_£g_l⁄g
(0x17,
i
+(*)
e•
[3]));

77 
	`¥ötk
("\n");

79 
	`°r
(
i
);

80 
	`¥ötk
("Pid: %d,Öro˚s†ƒ: %d\n\r",
cuºít
->
pid
,0xfff‡& 
i
);

81 
i
=0;i<10;i++)

82 
	`¥ötk
("%02x ",0xf‡& 
	`gë_£g_byã
(
e•
[1],(
i
+(*)esp[0])));

83 
	`¥ötk
("\n\r");

84 
	`do_exô
(11);

85 
	}
}

87 
	$do_doubÀ_Áu…
(
e•
, 
îr‹_code
)

89 
	`dõ
("doubÀ fau…",
e•
,
îr‹_code
);

90 
	}
}

92 
	$do_gíîÆ_¥Ÿe˘i⁄
(
e•
, 
îr‹_code
)

94 
	`dõ
("gíîÆÖrŸe˘i⁄",
e•
,
îr‹_code
);

95 
	}
}

97 
	$do_divide_îr‹
(
e•
, 
îr‹_code
)

99 
	`dõ
("dividêîr‹",
e•
,
îr‹_code
);

100 
	}
}

102 
	$do_öt3
(* 
e•
, 
îr‹_code
,

103 
fs
,
es
,
ds
,

104 
ebp
,
esi
,
edi
,

105 
edx
,
ecx
,
ebx
,
óx
)

107 
å
;

109 
	`__asm__
("°∏%%ax":"˜" (
å
):"0" (0));

110 
	`¥ötk
("eax\t\tebx\t\tecx\t\tedx\n\r%8x\t%8x\t%8x\t%8x\n\r",

111 
óx
,
ebx
,
ecx
,
edx
);

112 
	`¥ötk
("esi\t\tedi\t\tebp\t\tesp\n\r%8x\t%8x\t%8x\t%8x\n\r",

113 
esi
,
edi
,
ebp
,(Ë
e•
);

114 
	`¥ötk
("\n\rds\tes\tfs\ttr\n\r%4x\t%4x\t%4x\t%4x\n\r",

115 
ds
,
es
,
fs
,
å
);

116 
	`¥ötk
("EIP: %8x CS: %4x EFLAGS: %8x\n\r",
e•
[0],esp[1],esp[2]);

117 
	}
}

119 
	$do_nmi
(
e•
, 
îr‹_code
)

121 
	`dõ
("nmi",
e•
,
îr‹_code
);

122 
	}
}

124 
	$do_debug
(
e•
, 
îr‹_code
)

126 
	`dõ
("debug",
e•
,
îr‹_code
);

127 
	}
}

129 
	$do_ovîÊow
(
e•
, 
îr‹_code
)

131 
	`dõ
("ovîÊow",
e•
,
îr‹_code
);

132 
	}
}

134 
	$do_bounds
(
e•
, 
îr‹_code
)

136 
	`dõ
("bounds",
e•
,
îr‹_code
);

137 
	}
}

139 
	$do_övÆid_›
(
e•
, 
îr‹_code
)

141 
	`dõ
("övÆid o≥ønd",
e•
,
îr‹_code
);

142 
	}
}

144 
	$do_devi˚_nŸ_avaûabÀ
(
e•
, 
îr‹_code
)

146 
	`dõ
("devi˚ÇŸávaûabÀ",
e•
,
îr‹_code
);

147 
	}
}

149 
	$do_c›ro˚ss‹_£gmít_ovîrun
(
e•
, 
îr‹_code
)

151 
	`dõ
("c›ro˚ss‹ segmíàovîrun",
e•
,
îr‹_code
);

152 
	}
}

154 
	$do_övÆid_TSS
(
e•
,
îr‹_code
)

156 
	`dõ
("övÆid TSS",
e•
,
îr‹_code
);

157 
	}
}

159 
	$do_£gmít_nŸ_¥e£¡
(
e•
,
îr‹_code
)

161 
	`dõ
("£gmíànŸÖª£¡",
e•
,
îr‹_code
);

162 
	}
}

164 
	$do_°ack_£gmít
(
e•
,
îr‹_code
)

166 
	`dõ
("°ack segmít",
e•
,
îr‹_code
);

167 
	}
}

169 
	$do_c›ro˚ss‹_îr‹
(
e•
, 
îr‹_code
)

171 i‡(
œ°_èsk_u£d_m©h
 !
cuºít
)

173 
	`dõ
("c›ro˚ss‹Éº‹",
e•
,
îr‹_code
);

174 
	}
}

176 
	$do_ª£rved
(
e•
, 
îr‹_code
)

178 
	`dõ
("ª£rved (15,17-47Ëîr‹",
e•
,
îr‹_code
);

179 
	}
}

181 
	$å≠_öô
()

183 
i
;

185 
	`£t_å≠_g©e
(0,&
divide_îr‹
);

186 
	`£t_å≠_g©e
(1,&
debug
);

187 
	`£t_å≠_g©e
(2,&
nmi
);

188 
	`£t_sy°em_g©e
(3,&
öt3
);

189 
	`£t_sy°em_g©e
(4,&
ovîÊow
);

190 
	`£t_sy°em_g©e
(5,&
bounds
);

191 
	`£t_å≠_g©e
(6,&
övÆid_›
);

192 
	`£t_å≠_g©e
(7,&
devi˚_nŸ_avaûabÀ
);

193 
	`£t_å≠_g©e
(8,&
doubÀ_Áu…
);

194 
	`£t_å≠_g©e
(9,&
c›ro˚ss‹_£gmít_ovîrun
);

195 
	`£t_å≠_g©e
(10,&
övÆid_TSS
);

196 
	`£t_å≠_g©e
(11,&
£gmít_nŸ_¥e£¡
);

197 
	`£t_å≠_g©e
(12,&
°ack_£gmít
);

198 
	`£t_å≠_g©e
(13,&
gíîÆ_¥Ÿe˘i⁄
);

199 
	`£t_å≠_g©e
(14,&
∑ge_Áu…
);

200 
	`£t_å≠_g©e
(15,&
ª£rved
);

201 
	`£t_å≠_g©e
(16,&
c›ro˚ss‹_îr‹
);

202 
i
=17;i<48;i++)

203 
	`£t_å≠_g©e
(
i
,&
ª£rved
);

204 
	`£t_å≠_g©e
(45,&
úq13
);

205 
	`outb_p
(
	`öb_p
(0x21)&0xfb,0x21);

206 
	`outb
(
	`öb_p
(0xA1)&0xdf,0xA1);

207 
	`£t_å≠_g©e
(39,&
∑øŒñ_öãºu±
);

208 
	}
}

	@kernel/vsprintf.c

12 
	~<°d¨g.h
>

13 
	~<°rög.h
>

16 
	#is_digô
(
c
Ë((cË>'0' && (cË<'9')

	)

18 
	$skù_©oi
(c⁄° **
s
)

20 
i
=0;

22 
	`is_digô
(**
s
))

23 
i
 = i*10 + *((*
s
)++) - '0';

24  
i
;

25 
	}
}

27 
	#ZEROPAD
 1

	)

28 
	#SIGN
 2

	)

29 
	#PLUS
 4

	)

30 
	#SPACE
 8

	)

31 
	#LEFT
 16

	)

32 
	#SPECIAL
 32

	)

33 
	#SMALL
 64

	)

35 
	#do_div
(
n
,
ba£
) ({ \

36 
__ªs
; \

37 
	`__asm__
("div»%4":"˜" (
n
),"=d" (
__ªs
):"0" (n),"1" (0),"r" (
ba£
)); \

38 
__ªs
; })

	)

40 * 
	$numbî
(* 
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄


41 ,
ty≥
)

43 
c
,
sign
,
tmp
[36];

44 c⁄° *
digôs
="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

45 
i
;

47 i‡(
ty≥
&
SMALL
Ë
digôs
="0123456789abcdefghijklmnopqrstuvwxyz";

48 i‡(
ty≥
&
LEFT
Ëty≥ &~
ZEROPAD
;

49 i‡(
ba£
<2 || base>36)

51 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ' ;

52 i‡(
ty≥
&
SIGN
 && 
num
<0) {

53 
sign
='-';

54 
num
 = -num;

56 
sign
=(
ty≥
&
PLUS
Ë? '+' : (—y≥&
SPACE
) ? ' ' : 0);

57 i‡(
sign
Ë
size
--;

58 i‡(
ty≥
&
SPECIAL
)

59 i‡(
ba£
==16Ë
size
 -= 2;

60 i‡(
ba£
==8Ë
size
--;

61 
i
=0;

62 i‡(
num
==0)

63 
tmp
[
i
++]='0';

64 
num
!=0)

65 
tmp
[
i
++]=
digôs
[
	`do_div
(
num
,
ba£
)];

66 i‡(
i
>
¥ecisi⁄
)Örecision=i;

67 
size
 -
¥ecisi⁄
;

68 i‡(!(
ty≥
&(
ZEROPAD
+
LEFT
)))

69 
size
-->0)

70 *
°r
++ = ' ';

71 i‡(
sign
)

72 *
°r
++ = 
sign
;

73 i‡(
ty≥
&
SPECIAL
)

74 i‡(
ba£
==8)

75 *
°r
++ = '0';

76 i‡(
ba£
==16) {

77 *
°r
++ = '0';

78 *
°r
++ = 
digôs
[33];

80 i‡(!(
ty≥
&
LEFT
))

81 
size
-->0)

82 *
°r
++ = 
c
;

83 
i
<
¥ecisi⁄
--)

84 *
°r
++ = '0';

85 
i
-->0)

86 *
°r
++ = 
tmp
[
i
];

87 
size
-->0)

88 *
°r
++ = ' ';

89  
°r
;

90 
	}
}

92 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

94 
Àn
;

95 
i
;

96 * 
°r
;

97 *
s
;

98 *
ù
;

100 
Êags
;

102 
fõld_width
;

103 
¥ecisi⁄
;

105 
quÆifõr
;

107 
°r
=
buf
 ; *
fmt
 ; ++fmt) {

108 i‡(*
fmt
 != '%') {

109 *
°r
++ = *
fmt
;

114 
Êags
 = 0;

115 
ª≥©
:

116 ++
fmt
;

117 *
fmt
) {

118 '-': 
Êags
 |
LEFT
; 
ª≥©
;

119 '+': 
Êags
 |
PLUS
; 
ª≥©
;

120 ' ': 
Êags
 |
SPACE
; 
ª≥©
;

121 '#': 
Êags
 |
SPECIAL
; 
ª≥©
;

122 '0': 
Êags
 |
ZEROPAD
; 
ª≥©
;

126 
fõld_width
 = -1;

127 i‡(
	`is_digô
(*
fmt
))

128 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

129 i‡(*
fmt
 == '*') {

131 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

132 i‡(
fõld_width
 < 0) {

133 
fõld_width
 = -field_width;

134 
Êags
 |
LEFT
;

139 
¥ecisi⁄
 = -1;

140 i‡(*
fmt
 == '.') {

141 ++
fmt
;

142 i‡(
	`is_digô
(*
fmt
))

143 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

144 i‡(*
fmt
 == '*') {

146 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

148 i‡(
¥ecisi⁄
 < 0)

149 
¥ecisi⁄
 = 0;

153 
quÆifõr
 = -1;

154 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L') {

155 
quÆifõr
 = *
fmt
;

156 ++
fmt
;

159 *
fmt
) {

161 i‡(!(
Êags
 & 
LEFT
))

162 --
fõld_width
 > 0)

163 *
°r
++ = ' ';

164 *
°r
++ = (Ë
	`va_¨g
(
¨gs
, );

165 --
fõld_width
 > 0)

166 *
°r
++ = ' ';

170 
s
 = 
	`va_¨g
(
¨gs
, *);

171 
Àn
 = 
	`°æí
(
s
);

172 i‡(
¥ecisi⁄
 < 0)

173 
¥ecisi⁄
 = 
Àn
;

174 i‡(
Àn
 > 
¥ecisi⁄
)

175 
Àn
 = 
¥ecisi⁄
;

177 i‡(!(
Êags
 & 
LEFT
))

178 
Àn
 < 
fõld_width
--)

179 *
°r
++ = ' ';

180 
i
 = 0; i < 
Àn
; ++i)

181 *
°r
++ = *
s
++;

182 
Àn
 < 
fõld_width
--)

183 *
°r
++ = ' ';

187 
°r
 = 
	`numbî
(°r, 
	`va_¨g
(
¨gs
, ), 8,

188 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

192 i‡(
fõld_width
 == -1) {

193 
fõld_width
 = 8;

194 
Êags
 |
ZEROPAD
;

196 
°r
 = 
	`numbî
(str,

197 (Ë
	`va_¨g
(
¨gs
, *), 16,

198 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

202 
Êags
 |
SMALL
;

204 
°r
 = 
	`numbî
(°r, 
	`va_¨g
(
¨gs
, ), 16,

205 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

210 
Êags
 |
SIGN
;

212 
°r
 = 
	`numbî
(°r, 
	`va_¨g
(
¨gs
, ), 10,

213 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

217 
ù
 = 
	`va_¨g
(
¨gs
, *);

218 *
ù
 = (
°r
 - 
buf
);

222 i‡(*
fmt
 != '%')

223 *
°r
++ = '%';

224 i‡(*
fmt
)

225 *
°r
++ = *
fmt
;

227 --
fmt
;

231 *
°r
 = '\0';

232  
°r
-
buf
;

233 
	}
}

	@lib/_exit.c

7 
	#__LIBRARY__


	)

8 
	~<uni°d.h
>

10 vﬁ©ûê
	$_exô
(
exô_code
)

12 
	`__asm__
("öà$0x80"::"a" (
__NR_exô
),"b" (
exô_code
));

13 
	}
}

	@lib/close.c

7 
	#__LIBRARY__


	)

8 
	~<uni°d.h
>

10 
_sysˇŒ1
(,
˛o£
,,
fd
)

	@lib/ctype.c

7 
	~<˘y≥.h
>

9 
	g_˘mp
;

10 
	g_˘y≥
[] = {0x00,

11 
_C
,_C,_C,_C,_C,_C,_C,_C,

12 
_C
,_C|
_S
,_C|_S,_C|_S,_C|_S,_C|_S,_C,_C,

13 
_C
,_C,_C,_C,_C,_C,_C,_C,

14 
_C
,_C,_C,_C,_C,_C,_C,_C,

15 
_S
|
_SP
,
_P
,_P,_P,_P,_P,_P,_P,

16 
_P
,_P,_P,_P,_P,_P,_P,_P,

17 
_D
,_D,_D,_D,_D,_D,_D,_D,

18 
_D
,_D,
_P
,_P,_P,_P,_P,_P,

19 
_P
,
_U
|
_X
,_U|_X,_U|_X,_U|_X,_U|_X,_U|_X,_U,

20 
_U
,_U,_U,_U,_U,_U,_U,_U,

21 
_U
,_U,_U,_U,_U,_U,_U,_U,

22 
_U
,_U,_U,
_P
,_P,_P,_P,_P,

23 
_P
,
_L
|
_X
,_L|_X,_L|_X,_L|_X,_L|_X,_L|_X,_L,

24 
_L
,_L,_L,_L,_L,_L,_L,_L,

25 
_L
,_L,_L,_L,_L,_L,_L,_L,

26 
_L
,_L,_L,
_P
,_P,_P,_P,
_C
,

	@lib/dup.c

7 
	#__LIBRARY__


	)

8 
	~<uni°d.h
>

10 
_sysˇŒ1
(,
dup
,,
fd
)

	@lib/errno.c

7 
	gî∫o
;

	@lib/execve.c

7 
	#__LIBRARY__


	)

8 
	~<uni°d.h
>

10 
_sysˇŒ3
(,
execve
,c⁄° *,
fûe
,**,
¨gv
,**,
ívp
)

	@lib/malloc.c

48 
	~<löux/kî√l.h
>

49 
	~<löux/mm.h
>

50 
	~<asm/sy°em.h
>

52 
	sbuckë_desc
 {

53 *
	m∑ge
;

54 
buckë_desc
 *
	m√xt
;

55 *
	m‰ì±r
;

56 
	mªf˙t
;

57 
	mbuckë_size
;

60 
	s_buckë_dú
 {

61 
	msize
;

62 
buckë_desc
 *
	mchaö
;

77 
_buckë_dú
 
	gbuckë_dú
[] = {

78 { 16, (
buckë_desc
 *) 0},

79 { 32, (
buckë_desc
 *) 0},

80 { 64, (
buckë_desc
 *) 0},

81 { 128, (
buckë_desc
 *) 0},

82 { 256, (
buckë_desc
 *) 0},

83 { 512, (
buckë_desc
 *) 0},

84 { 1024, (
buckë_desc
 *) 0},

85 { 2048, (
buckë_desc
 *) 0},

86 { 4096, (
buckë_desc
 *) 0},

87 { 0, (
buckë_desc
 *) 0}};

92 
buckë_desc
 *
	g‰ì_buckë_desc
 = (bucket_desc *) 0;

97 
ölöe
 
	$öô_buckë_desc
()

99 
buckë_desc
 *
bdesc
, *
fú°
;

100 
i
;

102 
fú°
 = 
bdesc
 = (
buckë_desc
 *Ë
	`gë_‰ì_∑ge
();

103 i‡(!
bdesc
)

104 
	`∑nic
("Out of memory in init_bucket_desc()");

105 
i
 = 
PAGE_SIZE
/(
buckë_desc
); i > 1; i--) {

106 
bdesc
->
√xt
 = bdesc+1;

107 
bdesc
++;

113 
bdesc
->
√xt
 = 
‰ì_buckë_desc
;

114 
‰ì_buckë_desc
 = 
fú°
;

115 
	}
}

117 *
	$mÆloc
(
Àn
)

119 
_buckë_dú
 *
bdú
;

120 
buckë_desc
 *
bdesc
;

121 *
ªtvÆ
;

127 
bdú
 = 
buckë_dú
; bdú->
size
; bdir++)

128 i‡(
bdú
->
size
 >
Àn
)

130 i‡(!
bdú
->
size
) {

131 
	`¥ötk
("malloc called with impossiblyÜargeárgument (%d)\n",

132 
Àn
);

133 
	`∑nic
("malloc: badárg");

138 
	`˛i
();

139 
bdesc
 = 
bdú
->
chaö
; bdesc; bdes¯bdesc->
√xt
)

140 i‡(
bdesc
->
‰ì±r
)

146 i‡(!
bdesc
) {

147 *
˝
;

148 
i
;

150 i‡(!
‰ì_buckë_desc
)

151 
	`öô_buckë_desc
();

152 
bdesc
 = 
‰ì_buckë_desc
;

153 
‰ì_buckë_desc
 = 
bdesc
->
√xt
;

154 
bdesc
->
ªf˙t
 = 0;

155 
bdesc
->
buckë_size
 = 
bdú
->
size
;

156 
bdesc
->
∑ge
 = bdesc->
‰ì±r
 = (*Ë
˝
 = 
	`gë_‰ì_∑ge
();

157 i‡(!
˝
)

158 
	`∑nic
("Out of memory in kernel malloc()");

160 
i
=
PAGE_SIZE
/
bdú
->
size
; i > 1; i--) {

161 *((**Ë
˝
Ë˝ + 
bdú
->
size
;

162 
˝
 +
bdú
->
size
;

164 *((**Ë
˝
) = 0;

165 
bdesc
->
√xt
 = 
bdú
->
chaö
;

166 
bdú
->
chaö
 = 
bdesc
;

168 
ªtvÆ
 = (*Ë
bdesc
->
‰ì±r
;

169 
bdesc
->
‰ì±r
 = *((**Ë
ªtvÆ
);

170 
bdesc
->
ªf˙t
++;

171 
	`°i
();

172 (
ªtvÆ
);

173 
	}
}

182 
	$‰ì_s
(*
obj
, 
size
)

184 *
∑ge
;

185 
_buckë_dú
 *
bdú
;

186 
buckë_desc
 *
bdesc
, *
¥ev
;

189 
∑ge
 = (*Ë((Ë
obj
 & 0xfffff000);

191 
bdú
 = 
buckë_dú
; bdú->
size
; bdir++) {

192 
¥ev
 = 0;

194 i‡(
bdú
->
size
 < size)

196 
bdesc
 = 
bdú
->
chaö
; bdesc; bdes¯bdesc->
√xt
) {

197 i‡(
bdesc
->
∑ge
 ==Öage)

198 
found
;

199 
¥ev
 = 
bdesc
;

202 
	`∑nic
("BadáddressÖassedÅo kernel free_s()");

203 
found
:

204 
	`˛i
();

205 *((**)
obj
Ë
bdesc
->
‰ì±r
;

206 
bdesc
->
‰ì±r
 = 
obj
;

207 
bdesc
->
ªf˙t
--;

208 i‡(
bdesc
->
ªf˙t
 == 0) {

213 i‡((
¥ev
 && (¥ev->
√xt
 !
bdesc
)) ||

214 (!
¥ev
 && (
bdú
->
chaö
 !
bdesc
)))

215 
¥ev
 = 
bdú
->
chaö
;Öªv;Öªv =Öªv->
√xt
)

216 i‡(
¥ev
->
√xt
 =
bdesc
)

218 i‡(
¥ev
)

219 
¥ev
->
√xt
 = 
bdesc
->next;

221 i‡(
bdú
->
chaö
 !
bdesc
)

222 
	`∑nic
("malloc bucket chains corrupted");

223 
bdú
->
chaö
 = 
bdesc
->
√xt
;

225 
	`‰ì_∑ge
((Ë
bdesc
->
∑ge
);

226 
bdesc
->
√xt
 = 
‰ì_buckë_desc
;

227 
‰ì_buckë_desc
 = 
bdesc
;

229 
	`°i
();

231 
	}
}

	@lib/open.c

7 
	#__LIBRARY__


	)

8 
	~<uni°d.h
>

9 
	~<°d¨g.h
>

11 
	$›í
(c⁄° * 
fûíame
, 
Êag
, ...)

13 
ªs
;

14 
va_li°
 
¨g
;

16 
	`va_°¨t
(
¨g
,
Êag
);

17 
	`__asm__
("int $0x80"

18 :"˜" (
ªs
)

19 :"0" (
__NR_›í
),"b" (
fûíame
),"c" (
Êag
),

20 "d" (
	`va_¨g
(
¨g
,)));

21 i‡(
ªs
>=0)

22  
ªs
;

23 
î∫o
 = -
ªs
;

25 
	}
}

	@lib/setsid.c

7 
	#__LIBRARY__


	)

8 
	~<uni°d.h
>

10 
_sysˇŒ0
(
pid_t
,
£tsid
)

	@lib/string.c

7 #i‚de‡
__GNUC__


8 #îr‹ 
I
 
w™t
 
gcc
!

11 

	)

12 
	#ölöe


	)

13 
	#__LIBRARY__


	)

14 
	~<°rög.h
>

	@lib/wait.c

7 
	#__LIBRARY__


	)

8 
	~<uni°d.h
>

9 
	~<sys/waô.h
>

11 
	$_sysˇŒ3
(
pid_t
,
waôpid
,pid_t,
pid
,*,
waô_°©
,,
›ti⁄s
)

13 
pid_t
 
	$waô
(* 
waô_°©
)

15  
	`waôpid
(-1,
waô_°©
,0);

16 
	}
}

	@lib/write.c

7 
	#__LIBRARY__


	)

8 
	~<uni°d.h
>

10 
_sysˇŒ3
(,
wrôe
,,
fd
,c⁄° *,
buf
,
off_t
,
cou¡
)

	@mm/memory.c

23 
	~<sig«l.h
>

25 
	~<asm/sy°em.h
>

27 
	~<löux/sched.h
>

28 
	~<löux/hód.h
>

29 
	~<löux/kî√l.h
>

31 vﬁ©ûê
do_exô
(
code
);

33 
ölöe
 vﬁ©ûê
	$oom
()

35 
	`¥ötk
("out of memory\n\r");

36 
	`do_exô
(
SIGSEGV
);

37 
	}
}

39 
	#övÆid©e
() \

40 
	`__asm__
("mov»%%óx,%%¸3"::"a" (0))

	)

43 
	#LOW_MEM
 0x100000

	)

44 
	#PAGING_MEMORY
 (15*1024*1024)

	)

45 
	#PAGING_PAGES
 (
PAGING_MEMORY
>>12)

	)

46 
	#MAP_NR
(
addr
Ë((◊ddr)-
LOW_MEM
)>>12)

	)

47 
	#USED
 100

	)

49 
	#CODE_SPACE
(
addr
) ((((addr)+4095)&~4095) < \

50 
cuºít
->
°¨t_code
 + cuºít->
íd_code
)

	)

52 
	gHIGH_MEMORY
 = 0;

54 
	#c›y_∑ge
(
‰om
,
to
) \

55 
	`__asm__
("˛d ;Ñï ; mov¶"::"S" (
‰om
),"D" (
to
),"c" (1024):"cx","di","si")

	)

57 
	gmem_m≠
 [ 
PAGING_PAGES
 ] = {0,};

63 
	$gë_‰ì_∑ge
()

65 
__ªs
 
	`asm
("ax");

67 
	`__asm__
("std ;Ñepne ; scasb\n\t"

78 :"˜" (
__ªs
)

79 :"0" (0),"i" (
LOW_MEM
),"c" (
PAGING_PAGES
),

80 "D" (
mem_m≠
+
PAGING_PAGES
-1)

82  
__ªs
;

83 
	}
}

89 
	$‰ì_∑ge
(
addr
)

91 i‡(
addr
 < 
LOW_MEM
) ;

92 i‡(
addr
 >
HIGH_MEMORY
)

93 
	`∑nic
("tryingÅo freeÇonexistentÖage");

94 
addr
 -
LOW_MEM
;

95 
addr
 >>= 12;

96 i‡(
mem_m≠
[
addr
]--) ;

97 
mem_m≠
[
addr
]=0;

98 
	`∑nic
("tryingÅo free freeÖage");

99 
	}
}

105 
	$‰ì_∑ge_èbÀs
(
‰om
,
size
)

107 *
pg_èbÀ
;

108 * 
dú
, 
ƒ
;

110 i‡(
‰om
 & 0x3fffff)

111 
	`∑nic
("free_page_tables called with wrongálignment");

112 i‡(!
‰om
)

113 
	`∑nic
("TryingÅo free up swapper memory space");

114 
size
 = (size + 0x3fffff) >> 22;

115 
dú
 = (*Ë((
‰om
>>20) & 0xffc);

116  ; 
size
-->0 ; 
dú
++) {

117 i‡(!(1 & *
dú
))

119 
pg_èbÀ
 = (*Ë(0xfffff000 & *
dú
);

120 
ƒ
=0 ;Çr<1024 ;Çr++) {

121 i‡(1 & *
pg_èbÀ
)

122 
	`‰ì_∑ge
(0xfffff000 & *
pg_èbÀ
);

123 *
pg_èbÀ
 = 0;

124 
pg_èbÀ
++;

126 
	`‰ì_∑ge
(0xfffff000 & *
dú
);

127 *
dú
 = 0;

129 
	`övÆid©e
();

131 
	}
}

150 
	$c›y_∑ge_èbÀs
(
‰om
,
to
,
size
)

152 * 
‰om_∑ge_èbÀ
;

153 * 
to_∑ge_èbÀ
;

154 
this_∑ge
;

155 * 
‰om_dú
, * 
to_dú
;

156 
ƒ
;

158 i‡((
‰om
&0x3fffffË|| (
to
&0x3fffff))

159 
	`∑nic
("copy_page_tables called with wrongálignment");

160 
‰om_dú
 = (*Ë((
‰om
>>20) & 0xffc);

161 
to_dú
 = (*Ë((
to
>>20) & 0xffc);

162 
size
 = (() (size+0x3fffff)) >> 22;

163  ; 
size
-->0 ; 
‰om_dú
++,
to_dú
++) {

164 i‡(1 & *
to_dú
)

165 
	`∑nic
("copy_page_tables:álreadyÉxist");

166 i‡(!(1 & *
‰om_dú
))

168 
‰om_∑ge_èbÀ
 = (*Ë(0xfffff000 & *
‰om_dú
);

169 i‡(!(
to_∑ge_èbÀ
 = (*Ë
	`gë_‰ì_∑ge
()))

171 *
to_dú
 = ((Ë
to_∑ge_èbÀ
) | 7;

172 
ƒ
 = (
‰om
==0)?0xA0:1024;

173  ; 
ƒ
-- > 0 ; 
‰om_∑ge_èbÀ
++,
to_∑ge_èbÀ
++) {

174 
this_∑ge
 = *
‰om_∑ge_èbÀ
;

175 i‡(!(1 & 
this_∑ge
))

177 
this_∑ge
 &= ~2;

178 *
to_∑ge_èbÀ
 = 
this_∑ge
;

179 i‡(
this_∑ge
 > 
LOW_MEM
) {

180 *
‰om_∑ge_èbÀ
 = 
this_∑ge
;

181 
this_∑ge
 -
LOW_MEM
;

182 
this_∑ge
 >>= 12;

183 
mem_m≠
[
this_∑ge
]++;

187 
	`övÆid©e
();

189 
	}
}

197 
	$put_∑ge
(
∑ge
,
addªss
)

199 
tmp
, *
∑ge_èbÀ
;

203 i‡(
∑ge
 < 
LOW_MEM
 ||Öagê>
HIGH_MEMORY
)

204 
	`¥ötk
("TryögÅÿpuà∑gê%∞© %p\n",
∑ge
,
addªss
);

205 i‡(
mem_m≠
[(
∑ge
-
LOW_MEM
)>>12] != 1)

206 
	`¥ötk
("mem_m≠ dißgªe†wôh %∞© %p\n",
∑ge
,
addªss
);

207 
∑ge_èbÀ
 = (*Ë((
addªss
>>20) & 0xffc);

208 i‡((*
∑ge_èbÀ
)&1)

209 
∑ge_èbÀ
 = (*) (0xfffff000 & *page_table);

211 i‡(!(
tmp
=
	`gë_‰ì_∑ge
()))

213 *
∑ge_èbÀ
 = 
tmp
|7;

214 
∑ge_èbÀ
 = (*Ë
tmp
;

216 
∑ge_èbÀ
[(
addªss
>>12Ë& 0x3ff] = 
∑ge
 | 7;

218  
∑ge
;

219 
	}
}

221 
	$un_wp_∑ge
(* 
èbÀ_íåy
)

223 
ﬁd_∑ge
,
√w_∑ge
;

225 
ﬁd_∑ge
 = 0xfffff000 & *
èbÀ_íåy
;

226 i‡(
ﬁd_∑ge
 >
LOW_MEM
 && 
mem_m≠
[
	`MAP_NR
(old_page)]==1) {

227 *
èbÀ_íåy
 |= 2;

228 
	`övÆid©e
();

231 i‡(!(
√w_∑ge
=
	`gë_‰ì_∑ge
()))

232 
	`oom
();

233 i‡(
ﬁd_∑ge
 >
LOW_MEM
)

234 
mem_m≠
[
	`MAP_NR
(
ﬁd_∑ge
)]--;

235 *
èbÀ_íåy
 = 
√w_∑ge
 | 7;

236 
	`övÆid©e
();

237 
	`c›y_∑ge
(
ﬁd_∑ge
,
√w_∑ge
);

238 
	}
}

247 
	$do_wp_∑ge
(
îr‹_code
,
addªss
)

252 i‡(
	`CODE_SPACE
(
addªss
))

253 
	`do_exô
(
SIGSEGV
);

255 
	`un_wp_∑ge
((*)

256 (((
addªss
>>10) & 0xffc) + (0xfffff000 &

257 *((*Ë((
addªss
>>20) &0xffc)))));

259 
	}
}

261 
	$wrôe_vîify
(
addªss
)

263 
∑ge
;

265 i‡(!–(
∑ge
 = *((*Ë((
addªss
>>20) & 0xffc)) )&1))

267 
∑ge
 &= 0xfffff000;

268 
∑ge
 +((
addªss
>>10) & 0xffc);

269 i‡((3 & *(*Ë
∑ge
) == 1)

270 
	`un_wp_∑ge
((*Ë
∑ge
);

272 
	}
}

274 
	$gë_em±y_∑ge
(
addªss
)

276 
tmp
;

278 i‡(!(
tmp
=
	`gë_‰ì_∑ge
()Ë|| !
	`put_∑ge
—mp,
addªss
)) {

279 
	`‰ì_∑ge
(
tmp
);

280 
	`oom
();

282 
	}
}

292 
	$åy_to_sh¨e
(
addªss
, 
èsk_°ru˘
 * 
p
)

294 
‰om
;

295 
to
;

296 
‰om_∑ge
;

297 
to_∑ge
;

298 
phys_addr
;

300 
‰om_∑ge
 = 
to_∑ge
 = ((
addªss
>>20) & 0xffc);

301 
‰om_∑ge
 +((
p
->
°¨t_code
>>20) & 0xffc);

302 
to_∑ge
 +((
cuºít
->
°¨t_code
>>20) & 0xffc);

304 
‰om
 = *(*Ë
‰om_∑ge
;

305 i‡(!(
‰om
 & 1))

307 
‰om
 &= 0xfffff000;

308 
‰om_∑ge
 = 
‰om
 + ((
addªss
>>10) & 0xffc);

309 
phys_addr
 = *(*Ë
‰om_∑ge
;

311 i‡((
phys_addr
 & 0x41) != 0x01)

313 
phys_addr
 &= 0xfffff000;

314 i‡(
phys_addr
 >
HIGH_MEMORY
 ||Öhys_add∏< 
LOW_MEM
)

316 
to
 = *(*Ë
to_∑ge
;

317 i‡(!(
to
 & 1))

318 i‡(
to
 = 
	`gë_‰ì_∑ge
())

319 *(*Ë
to_∑ge
 = 
to
 | 7;

321 
	`oom
();

322 
to
 &= 0xfffff000;

323 
to_∑ge
 = 
to
 + ((
addªss
>>10) & 0xffc);

324 i‡(1 & *(*Ë
to_∑ge
)

325 
	`∑nic
("try_to_share:Åo_pageálreadyÉxists");

327 *(*Ë
‰om_∑ge
 &= ~2;

328 *(*Ë
to_∑ge
 = *(*Ë
‰om_∑ge
;

329 
	`övÆid©e
();

330 
phys_addr
 -
LOW_MEM
;

331 
phys_addr
 >>= 12;

332 
mem_m≠
[
phys_addr
]++;

334 
	}
}

344 
	$sh¨e_∑ge
(
addªss
)

346 
èsk_°ru˘
 ** 
p
;

348 i‡(!
cuºít
->
execuèbÀ
)

350 i‡(
cuºít
->
execuèbÀ
->
i_cou¡
 < 2)

352 
p
 = &
LAST_TASK
 ;Ö > &
FIRST_TASK
 ; --p) {

353 i‡(!*
p
)

355 i‡(
cuºít
 =*
p
)

357 i‡((*
p
)->
execuèbÀ
 !
cuºít
->executable)

359 i‡(
	`åy_to_sh¨e
(
addªss
,*
p
))

363 
	}
}

365 
	$do_no_∑ge
(
îr‹_code
,
addªss
)

367 
ƒ
[4];

368 
tmp
;

369 
∑ge
;

370 
block
,
i
;

372 
addªss
 &= 0xfffff000;

373 
tmp
 = 
addªss
 - 
cuºít
->
°¨t_code
;

374 i‡(!
cuºít
->
execuèbÀ
 || 
tmp
 >cuºít->
íd_d©a
) {

375 
	`gë_em±y_∑ge
(
addªss
);

378 i‡(
	`sh¨e_∑ge
(
tmp
))

380 i‡(!(
∑ge
 = 
	`gë_‰ì_∑ge
()))

381 
	`oom
();

383 
block
 = 1 + 
tmp
/
BLOCK_SIZE
;

384 
i
=0 ; i<4 ; 
block
++,i++)

385 
ƒ
[
i
] = 
	`bm≠
(
cuºít
->
execuèbÀ
,
block
);

386 
	`bªad_∑ge
(
∑ge
,
cuºít
->
execuèbÀ
->
i_dev
,
ƒ
);

387 
i
 = 
tmp
 + 4096 - 
cuºít
->
íd_d©a
;

388 
tmp
 = 
∑ge
 + 4096;

389 
i
-- > 0) {

390 
tmp
--;

391 *(*)
tmp
 = 0;

393 i‡(
	`put_∑ge
(
∑ge
,
addªss
))

395 
	`‰ì_∑ge
(
∑ge
);

396 
	`oom
();

397 
	}
}

399 
	$mem_öô
(
°¨t_mem
, 
íd_mem
)

401 
i
;

403 
HIGH_MEMORY
 = 
íd_mem
;

404 
i
=0 ; i<
PAGING_PAGES
 ; i++)

405 
mem_m≠
[
i
] = 
USED
;

406 
i
 = 
	`MAP_NR
(
°¨t_mem
);

407 
íd_mem
 -
°¨t_mem
;

408 
íd_mem
 >>= 12;

409 
íd_mem
-->0)

410 
mem_m≠
[
i
++]=0;

411 
	}
}

413 
	$ˇlc_mem
()

415 
i
,
j
,
k
,
‰ì
=0;

416 * 
pg_tbl
;

418 
i
=0 ; i<
PAGING_PAGES
 ; i++)

419 i‡(!
mem_m≠
[
i
]Ë
‰ì
++;

420 
	`¥ötk
("%dÖage†‰ì (o‡%d)\n\r",
‰ì
,
PAGING_PAGES
);

421 
i
=2 ; i<1024 ; i++) {

422 i‡(1&
pg_dú
[
i
]) {

423 
pg_tbl
=(*Ë(0xfffff000 & 
pg_dú
[
i
]);

424 
j
=
k
=0 ; j<1024 ; j++)

425 i‡(
pg_tbl
[
j
]&1)

426 
k
++;

427 
	`¥ötk
("Pg-dú[%d] u£†%dÖages\n",
i
,
k
);

430 
	}
}

	@tools/build.c

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<°dlib.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/°©.h
>

28 
	~<löux/fs.h
>

29 
	~<uni°d.h
>

30 
	~<f˙é.h
>

32 
	#MINIX_HEADER
 32

	)

33 
	#GCC_HEADER
 1024

	)

35 
	#SYS_SIZE
 0x2000

	)

37 
	#DEFAULT_MAJOR_ROOT
 3

	)

38 
	#DEFAULT_MINOR_ROOT
 6

	)

42 
	#SETUP_SECTS
 4

	)

44 
	#STRINGIFY
(
x
Ë#x

	)

46 
	$dõ
(* 
°r
)

48 
	`Ârötf
(
°dîr
,"%s\n",
°r
);

49 
	`exô
(1);

50 
	}
}

52 
	$ußge
()

54 
	`dõ
("Usage: build bootsect setup system [rootdev] [> image]");

55 
	}
}

57 
	$maö
(
¨gc
, ** 
¨gv
)

59 
i
,
c
,
id
;

60 
buf
[1024];

61 
maj‹_roŸ
, 
mö‹_roŸ
;

62 
°©
 
sb
;

64 i‡((
¨gc
 != 4) && (argc != 5))

65 
	`ußge
();

66 i‡(
¨gc
 == 5) {

67 i‡(
	`°rcmp
(
¨gv
[4], "FLOPPY")) {

68 i‡(
	`°©
(
¨gv
[4], &
sb
)) {

69 
	`≥º‹
(
¨gv
[4]);

70 
	`dõ
("Couldn't statÑoot device.");

72 
maj‹_roŸ
 = 
	`MAJOR
(
sb
.
°_rdev
);

73 
mö‹_roŸ
 = 
	`MINOR
(
sb
.
°_rdev
);

75 
maj‹_roŸ
 = 0;

76 
mö‹_roŸ
 = 0;

79 
maj‹_roŸ
 = 
DEFAULT_MAJOR_ROOT
;

80 
mö‹_roŸ
 = 
DEFAULT_MINOR_ROOT
;

82 
	`Ârötf
(
°dîr
, "RoŸ devi˚ i†(%d, %d)\n", 
maj‹_roŸ
, 
mö‹_roŸ
);

83 i‡((
maj‹_roŸ
 != 2) && (major_root != 3) &&

84 (
maj‹_roŸ
 != 0)) {

85 
	`Ârötf
(
°dîr
, "IllegalÑoot device (major = %d)\n",

86 
maj‹_roŸ
);

87 
	`dõ
("BadÑoot device --- major #");

89 
i
=0;i< 
buf
; i++) buf[i]=0;

90 i‡((
id
=
	`›í
(
¨gv
[1],
O_RDONLY
,0))<0)

91 
	`dõ
("UnableÅo open 'boot'");

92 i‡(
	`ªad
(
id
,
buf
,
MINIX_HEADER
) != MINIX_HEADER)

93 
	`dõ
("UnableÅoÑead header of 'boot'");

94 i‡(((*Ë
buf
)[0]!=0x04100301)

95 
	`dõ
("Non-Minix header of 'boot'");

96 i‡(((*Ë
buf
)[1]!=
MINIX_HEADER
)

97 
	`dõ
("Non-Minix header of 'boot'");

98 i‡(((*Ë
buf
)[3]!=0)

99 
	`dõ
("Illegal data segment in 'boot'");

100 i‡(((*Ë
buf
)[4]!=0)

101 
	`dõ
("Illegal bss in 'boot'");

102 i‡(((*Ë
buf
)[5] != 0)

103 
	`dõ
("Non-Minix header of 'boot'");

104 i‡(((*Ë
buf
)[7] != 0)

105 
	`dõ
("Illegal symbolÅable in 'boot'");

106 
i
=
	`ªad
(
id
,
buf
, buf);

107 
	`Ârötf
(
°dîr
,"BoŸ se˘‹ %d byãs.\n",
i
);

108 i‡(
i
 != 512)

109 
	`dõ
("Boot block must beÉxactly 512 bytes");

110 i‡((*(*)(
buf
+510)) != 0xAA55)

111 
	`dõ
("Boot block hasn't got boot flag (0xAA55)");

112 
buf
[508] = (Ë
mö‹_roŸ
;

113 
buf
[509] = (Ë
maj‹_roŸ
;

114 
i
=
	`wrôe
(1,
buf
,512);

115 i‡(
i
!=512)

116 
	`dõ
("Write call failed");

117 
	`˛o£
 (
id
);

119 i‡((
id
=
	`›í
(
¨gv
[2],
O_RDONLY
,0))<0)

120 
	`dõ
("UnableÅo open 'setup'");

121 i‡(
	`ªad
(
id
,
buf
,
MINIX_HEADER
) != MINIX_HEADER)

122 
	`dõ
("UnableÅoÑead header of 'setup'");

123 i‡(((*Ë
buf
)[0]!=0x04100301)

124 
	`dõ
("Non-Minix header of 'setup'");

125 i‡(((*Ë
buf
)[1]!=
MINIX_HEADER
)

126 
	`dõ
("Non-Minix header of 'setup'");

127 i‡(((*Ë
buf
)[3]!=0)

128 
	`dõ
("Illegal data segment in 'setup'");

129 i‡(((*Ë
buf
)[4]!=0)

130 
	`dõ
("Illegal bss in 'setup'");

131 i‡(((*Ë
buf
)[5] != 0)

132 
	`dõ
("Non-Minix header of 'setup'");

133 i‡(((*Ë
buf
)[7] != 0)

134 
	`dõ
("Illegal symbolÅable in 'setup'");

135 
i
=0 ; (
c
=
	`ªad
(
id
,
buf
, buf))>0 ; i+=c )

136 i‡(
	`wrôe
(1,
buf
,
c
)!=c)

137 
	`dõ
("Write call failed");

138 
	`˛o£
 (
id
);

139 i‡(
i
 > 
SETUP_SECTS
*512)

140 
	`dõ
("Sëu∞ex˚ed†" 
	`STRINGIFY
(
SETUP_SECTS
)

142 
	`Ârötf
(
°dîr
,"Sëu∞i†%d byãs.\n",
i
);

143 
c
=0 ; c<(
buf
) ; c++)

144 
buf
[
c
] = '\0';

145 
i
<
SETUP_SECTS
*512) {

146 
c
 = 
SETUP_SECTS
*512-
i
;

147 i‡(
c
 > (
buf
))

148 
c
 = (
buf
);

149 i‡(
	`wrôe
(1,
buf
,
c
) != c)

150 
	`dõ
("Write call failed");

151 
i
 +
c
;

154 i‡((
id
=
	`›í
(
¨gv
[3],
O_RDONLY
,0))<0)

155 
	`dõ
("UnableÅo open 'system'");

156 i‡(
	`ªad
(
id
,
buf
,
GCC_HEADER
) != GCC_HEADER)

157 
	`dõ
("UnableÅoÑead header of 'system'");

158 i‡(((*Ë
buf
)[5] != 0)

159 
	`dõ
("Non-GCC header of 'system'");

160 
i
=0 ; (
c
=
	`ªad
(
id
,
buf
, buf))>0 ; i+=c )

161 i‡(
	`wrôe
(1,
buf
,
c
)!=c)

162 
	`dõ
("Write call failed");

163 
	`˛o£
(
id
);

164 
	`Ârötf
(
°dîr
,"Sy°em i†%d byãs.\n",
i
);

165 i‡(
i
 > 
SYS_SIZE
*16)

166 
	`dõ
("System isÅoo big");

168 
	}
}

	@
1
.
0
84
1392
fs/bitmap.c
fs/block_dev.c
fs/buffer.c
fs/char_dev.c
fs/exec.c
fs/fcntl.c
fs/file_dev.c
fs/file_table.c
fs/inode.c
fs/ioctl.c
fs/namei.c
fs/open.c
fs/pipe.c
fs/read_write.c
fs/stat.c
fs/super.c
fs/truncate.c
include/a.out.h
include/asm/io.h
include/asm/memory.h
include/asm/segment.h
include/asm/system.h
include/const.h
include/ctype.h
include/errno.h
include/fcntl.h
include/linux/config.h
include/linux/fdreg.h
include/linux/fs.h
include/linux/hdreg.h
include/linux/head.h
include/linux/kernel.h
include/linux/mm.h
include/linux/sched.h
include/linux/sys.h
include/linux/tty.h
include/signal.h
include/stdarg.h
include/stddef.h
include/string.h
include/sys/stat.h
include/sys/times.h
include/sys/types.h
include/sys/utsname.h
include/sys/wait.h
include/termios.h
include/time.h
include/unistd.h
include/utime.h
init/main.c
kernel/blk_drv/blk.h
kernel/blk_drv/floppy.c
kernel/blk_drv/hd.c
kernel/blk_drv/ll_rw_blk.c
kernel/blk_drv/ramdisk.c
kernel/chr_drv/console.c
kernel/chr_drv/serial.c
kernel/chr_drv/tty_io.c
kernel/chr_drv/tty_ioctl.c
kernel/exit.c
kernel/fork.c
kernel/math/math_emulate.c
kernel/mktime.c
kernel/panic.c
kernel/printk.c
kernel/sched.c
kernel/signal.c
kernel/sys.c
kernel/traps.c
kernel/vsprintf.c
lib/_exit.c
lib/close.c
lib/ctype.c
lib/dup.c
lib/errno.c
lib/execve.c
lib/malloc.c
lib/open.c
lib/setsid.c
lib/string.c
lib/wait.c
lib/write.c
mm/memory.c
tools/build.c
