cscope 15 $HOME/github/linux0.11/linux0.11-with-comments               0000234687
	@VC/Documents/ÂæÆÊú∫‰∏≠Êñ≠ÁöÑËµÑÊñô.cpp

	@VC/keyboard.i

7 .586
	gp


8 .
modñ
 
Ê©


106 
_do_ây_öãºu±
:
¥oc
, 
_show_°©
:proc

107 
_èbÀ_li°
:
dw‹d


108 
public
 
_keybﬂrd_öãºu±


117 
bsize
 = 1024

121 
hód
 = 4

122 
èû
 = 8

123 
¥oc_li°
 = 12

124 
buf
 = 16

126 .
code


128 
mode
 
db
 0

140 
Àds
 
db
 2

147 
e0
 
db
 0

161 
_keybﬂrd_öãºu±
:

162 
push
 
óx


163 
push
 
ebx


164 
push
 
ecx


165 
push
 
edx


166 
push
 
ds


167 
push
 
es


168 
mov
 
óx
,10
h


169 
mov
 
ds
,
ax


170 
mov
 
es
,
ax


171 
x‹
 
Æ
,al

172 
ö
 
Æ
,60
h


173 
cmp
 
Æ
,0e0
h


174 
je
 
£t_e0


175 
cmp
 
Æ
,0e1
h


176 
je
 
£t_e1


177 
ˇŒ
 
key_èbÀ
[
óx
*4]

178 
mov
 
e0
,0

182 
e0_e1
:

183 
ö
 
Æ
,61
h


184 
jmp
 
l1


185 
l1
: 
jmp
 
l2


186 
l2
: 
‹
 
Æ
,80
h


187 
jmp
 
l3


188 
l3
: 
jmp
 
l4


189 
l4
: 
out
 61
h
,
Æ


190 
jmp
 
l5


191 
l5
: 
jmp
 
l6


192 
l6
: 
™d
 
Æ
,7F
h


193 
out
 61
h
,
Æ


194 
mov
 
Æ
,20
h


195 
out
 20
h
,
Æ


196 
push
 0

197 
ˇŒ
 
_do_ây_öãºu±


198 
add
 
e•
,4

199 
p›
 
es


200 
p›
 
ds


201 
p›
 
edx


202 
p›
 
ecx


203 
p›
 
ebx


204 
p›
 
óx


205 
úëd


206 
£t_e0
:

207 
mov
 
e0
,1

208 
jmp
 
e0_e1


209 
£t_e1
:

210 
mov
 
e0
,2

211 
jmp
 
e0_e1


217 
put_queue
:

218 
push
 
ecx


219 
push
 
edx


220 
mov
 
edx
,
_èbÀ_li°


221 
mov
 
ecx
,
hód
[
edx
]

222 
l7
: 
mov
 
buf
[
edx
+
ecx
],
Æ


223 
öc
 
ecx


224 
™d
 
ecx
,
bsize
-1

225 
cmp
 
ecx
,
èû
[
edx
]

227 
je
 
l9


228 
shrd
 
óx
,
ebx
,8

229 
je
 
l8


230 
shr
 
ebx
,8

231 
jmp
 
l7


232 
l8
: 
mov
 
hód
[
edx
],
ecx


233 
mov
 
ecx
,
¥oc_li°
[
edx
]

234 
ã°
 
ecx
,ecx

235 
je
 
l9


236 
mov
 
dw‹d
 
±r
 [
ecx
],0

237 
l9
: 
p›
 
edx


238 
p›
 
ecx


239 
ªt


244 
˘æ
:

245 
mov
 
Æ
,04
h


246 
jmp
 
l10


247 
Æt
:

248 
mov
 
Æ
,10
h


249 
l10
:

250 
cmp
 
e0
,0

251 
je
 
l11


252 
add
 
Æ
,al

253 
l11
:

254 
‹
 
mode
,
Æ


255 
ªt


258 
un˘æ
:

259 
mov
 
Æ
,04
h


260 
jmp
 
l12


261 
u«…
:

262 
mov
 
Æ
,10
h


263 
l12
:

264 
cmp
 
e0
,0

265 
je
 
l13


266 
add
 
Æ
,al

267 
l13
:

268 
nŸ
 
Æ


269 
™d
 
mode
,
Æ


270 
ªt


272 
lshi·
:

273 
‹
 
mode
,01
h


274 
ªt


275 
u∆shi·
:

276 
™d
 
mode
,0„
h


277 
ªt


278 
rshi·
:

279 
‹
 
mode
,02
h


280 
ªt


281 
uƒshi·
:

282 
™d
 
mode
,0fd
h


283 
ªt


285 
ˇps
:

286 
ã°
 
mode
,80
h


287 
j√
 
l14


288 
x‹
 
Àds
,4

289 
x‹
 
mode
,40
h


290 
‹
 
mode
,80
h


292 
£t_Àds
:

293 
ˇŒ
 
kb_waô


294 
mov
 
Æ
,0ed
h


295 
out
 60
h
,
Æ


296 
ˇŒ
 
kb_waô


297 
mov
 
Æ
,
Àds


298 
out
 60
h
,
Æ


299 
ªt


300 
unˇps
:

301 
™d
 
mode
,7f
h


302 
ªt


303 
s¸ﬁl
:

304 
x‹
 
Àds
,1

305 
jmp
 
£t_Àds


306 
num
:

307 
x‹
 
Àds
,2

308 
jmp
 
£t_Àds


317 
curs‹
:

318 
sub
 
Æ
,47
h


319 
jb
 
l14


320 
cmp
 
Æ
,12

321 
ja
 
l14


322 
j√
 
cur2


325 
ã°
 
mode
,0c
h


326 
je
 
cur2


327 
ã°
 
mode
,30
h


328 
j√
 
ªboŸ


329 
cur2
:

330 
cmp
 
e0
,01
h


332 
je
 
cur


333 
ã°
 
Àds
,02
h


335 
je
 
cur


336 
ã°
 
mode
,03
h


338 
j√
 
cur


339 
x‹
 
ebx
,ebx

340 
mov
 
Æ
,
num_èbÀ
[
óx
]

341 
jmp
 
put_queue


342 
l14
:

343 
ªt


346 
cur
:

347 
mov
 
Æ
,
cur_èbÀ
[
óx
]

348 
cmp
 
Æ
,'9'

349 
ja
 
ok_cur


350 
mov
 
ah
,'~'

351 
ok_cur
:

352 
shl
 
óx
,16

353 
mov
 
ax
,5b1b
h


354 
x‹
 
ebx
,ebx

355 
jmp
 
put_queue


360 
num_èbÀ
 
db
 "789 456 1230,"

362 
cur_èbÀ
 
db
 "HA5 DGC YB623"

368 
func
:

369 
push
 
óx


370 
push
 
ecx


371 
push
 
edx


372 
ˇŒ
 
_show_°©


373 
p›
 
edx


374 
p›
 
ecx


375 
p›
 
óx


376 
sub
 
Æ
,3B
h


377 
jb
 
íd_func


378 
cmp
 
Æ
,9

379 
jbe
 
ok_func


380 
sub
 
Æ
,18

381 
cmp
 
Æ
,10

382 
jb
 
íd_func


383 
cmp
 
Æ
,11

384 
ja
 
íd_func


385 
ok_func
:

386 
cmp
 
ecx
,4

387 
jl
 
íd_func


388 
mov
 
óx
,
func_èbÀ
[eax*4]

389 
x‹
 
ebx
,ebx

390 
jmp
 
put_queue


391 
íd_func
:

392 
ªt


397 
func_èbÀ
:

398 
DD
 415b5b1b
h
,425b5b1bh,435b5b1bh,445b5b1bh

399 
DD
 455b5b1b
h
,465b5b1bh,475b5b1bh,485b5b1bh

400 
DD
 495b5b1b
h
,4a5b5b1bh,4b5b5b1bh,4c5b5b1bh

461 
key_m≠
:

462 
db
 0,27

463 
db
 "1234567890-="

464 
db
 127,9

465 
db
 "qwertyuiop[]"

466 
db
 13,0

467 
db
 "asdfghjkl;'"

468 
db
 '`',0

469 
db
 "\zxcvbnm,./"

470 
db
 0,'*',0,32

471 
db
 16 
	$dup
(0)

472 
db
 '-',0,0,0,'+'

473 
db
 0,0,0,0,0,0,0

474 
db
 '<'

475 
db
 10 
	$dup
(0)

478 
shi·_m≠
:

479 
db
 0,27

480 
db
 "!@#$%^&*()_+"

481 
db
 127,9

482 
db
 "QWERTYUIOP{}"

483 
db
 13,0

484 
db
 "ASDFGHJKL:",'"'

485 
db
 '~',0

486 
db
 "|ZXCVBNM<>?"

487 
db
 0,'*',0,32

488 
db
 16 
	$dup
(0)

489 
db
 '-',0,0,0,'+'

490 
db
 0,0,0,0,0,0,0

491 
db
 '>'

492 
db
 10 
	$dup
(0)

494 
Æt_m≠
:

495 
db
 0,0

496 
db
 0,'@',0,'$',0,0,"{[]}","\",0

497 
db
 0,0

498 
db
 0,0,0,0,0,0,0,0,0,0,0

499 
db
 '~',13,0

500 
db
 0,0,0,0,0,0,0,0,0,0,0

501 
db
 0,0

502 
db
 0,0,0,0,0,0,0,0,0,0,0

503 
db
 0,0,0,0

504 
db
 16 
	$dup
(0)

505 
db
 0,0,0,0,0

506 
db
 0,0,0,0,0,0,0

507 
db
 '|'

508 
db
 10 
	$dup
(0)

624 
do_£lf
:

626 
Àa
 
ebx
,
Æt_m≠


627 
ã°
 
mode
,20

628 
j√
 
l15


629 
Àa
 
ebx
,
shi·_m≠


630 
ã°
 
mode
,03
h


631 
j√
 
l15


632 
Àa
 
ebx
,
key_m≠


634 
l15
:

635 
mov
 
Æ
,[
ebx
+
óx
]

636 
‹
 
Æ
,al

637 
je
 
n⁄e


640 
ã°
 
mode
,4c
h


641 
je
 
l16


642 
cmp
 
Æ
,'a'

643 
jb
 
l16


644 
cmp
 
Æ
,'}'

645 
ja
 
l16


646 
sub
 
Æ
,32

649 
l16
:

650 
ã°
 
mode
,0c
h


651 
je
 
l17


652 
cmp
 
Æ
,64

653 
jb
 
l17


654 
cmp
 
Æ
,64+32

655 
j´
 
l17


656 
sub
 
Æ
,64

659 
l17
:

660 
ã°
 
mode
,10
h


661 
je
 
l18


662 
‹
 
Æ
,80
h


664 
l18
:

665 
™d
 
óx
,0ff
h


666 
x‹
 
ebx
,ebx

667 
ˇŒ
 
put_queue


668 
n⁄e
:

669 
ªt


680 
möus
:

681 
cmp
 
e0
,1

682 
j√
 
do_£lf


683 
mov
 
óx
,'/'

684 
x‹
 
ebx
,ebx

685 
jmp
 
put_queue


695 
key_èbÀ
:

696 
DD
 
n⁄e
, 
do_£lf
,do_self,do_self

697 
DD
 
do_£lf
,do_self,do_self,do_self

698 
DD
 
do_£lf
,do_self,do_self,do_self

699 
DD
 
do_£lf
,do_self,do_self,do_self

700 
DD
 
do_£lf
,do_self,do_self,do_self

701 
DD
 
do_£lf
,do_self,do_self,do_self

702 
DD
 
do_£lf
,do_self,do_self,do_self

703 
DD
 
do_£lf
,
˘æ
, do_self,do_self

704 
DD
 
do_£lf
,do_self,do_self,do_self

705 
DD
 
do_£lf
,do_self,do_self,do_self

706 
DD
 
do_£lf
,do_£lf,
lshi·
, do_self

707 
DD
 
do_£lf
,do_self,do_self,do_self

708 
DD
 
do_£lf
,do_self,do_self,do_self

709 
DD
 
do_£lf
,
möus
, 
rshi·
, do_self

710 
DD
 
Æt
, 
do_£lf
,
ˇps
, 
func


711 
DD
 
func
, func, func, func

712 
DD
 
func
, func, func, func

713 
DD
 
func
, 
num
, 
s¸ﬁl
, 
curs‹


714 
DD
 
curs‹
, curs‹, 
do_£lf
,cursor

715 
DD
 
curs‹
, curs‹, 
do_£lf
,cursor

716 
DD
 
curs‹
, cursor, cursor, cursor

717 
DD
 
n⁄e
,Ç⁄e, 
do_£lf
,
func


718 
DD
 
func
, 
n⁄e
,Çone,Çone

719 
DD
 
n⁄e
,Çone,Çone,Çone

720 
DD
 
n⁄e
,Çone,Çone,Çone

721 
DD
 
n⁄e
,Çone,Çone,Çone

722 
DD
 
n⁄e
,Çone,Çone,Çone

723 
DD
 
n⁄e
,Çone,Çone,Çone

724 
DD
 
n⁄e
,Çone,Çone,Çone

725 
DD
 
n⁄e
,Çone,Çone,Çone

726 
DD
 
n⁄e
,Çone,Çone,Çone

727 
DD
 
n⁄e
,Çone,Çone,Çone

728 
DD
 
n⁄e
,Çone,Çone,Çone

729 
DD
 
n⁄e
,Çone,Çone,Çone

730 
DD
 
n⁄e
,Çone,Çone,Çone

731 
DD
 
n⁄e
,Çone,Çone,Çone

732 
DD
 
n⁄e
,Çone,Çone,Çone

733 
DD
 
n⁄e
,Çone,Çone,Çone

734 
DD
 
n⁄e
,Çone,Çone,Çone

735 
DD
 
n⁄e
, 
un˘æ
,Çone,Çone

736 
DD
 
n⁄e
,Çone,Çone,Çone

737 
DD
 
n⁄e
,Çone,Çone,Çone

738 
DD
 
n⁄e
,Ç⁄e, 
u∆shi·
,none

739 
DD
 
n⁄e
,Çone,Çone,Çone

740 
DD
 
n⁄e
,Çone,Çone,Çone

741 
DD
 
n⁄e
,Ç⁄e, 
uƒshi·
,none

742 
DD
 
u«…
, 
n⁄e
, 
unˇps
,Çone

743 
DD
 
n⁄e
,none,none,none

744 
DD
 
n⁄e
,none,none,none

745 
DD
 
n⁄e
,none,none,none

746 
DD
 
n⁄e
,none,none,none

747 
DD
 
n⁄e
,none,none,none

748 
DD
 
n⁄e
,none,none,none

749 
DD
 
n⁄e
,none,none,none

750 
DD
 
n⁄e
,none,none,none

751 
DD
 
n⁄e
,none,none,none

752 
DD
 
n⁄e
,none,none,none

753 
DD
 
n⁄e
,none,none,none

754 
DD
 
n⁄e
,none,none,none

755 
DD
 
n⁄e
,none,none,none

756 
DD
 
n⁄e
,none,none,none

757 
DD
 
n⁄e
,none,none,none

758 
DD
 
n⁄e
,none,none,none

759 
DD
 
n⁄e
,none,none,none

769 
kb_waô
:

770 
push
 
óx


771 
l19
:

772 
ö
 
Æ
,64
h


773 
ã°
 
Æ
,02
h


774 
j√
 
l19


775 
p›
 
óx


776 
ªt


784 
ªboŸ
:

785 
ˇŒ
 
kb_waô


786 
mov
 
w‹d
 
±r
 
ds
:[472
h
],1234h

787 
mov
 
Æ
,0fc
h


788 
out
 64
h
,
Æ


789 
dõ
:

790 
jmp
 
dõ


792 
íd


	@build/build.cpp

1 
	~<°dio.h
>

2 
	~<wödows.h
>

3 
	~<°dlib.h
>

5 
DWORD
 
	gg_dwFûeHódî
[1024] = {0};

7 
	s__ègFILE_HEADER
{

8 
	mucN›
[4];

9 
DWORD
 
	mdwJmpAddr
;

10 }
	t__FILL_HEADER
;

12 
__FILL_HEADER
 
	gg_FûlHódî
 = {0x90,0x90,0x90,0xe9,0x00000000};

15 * 
	gg_ÕszT¨gëP©h
 = "E:\\book\\Temp\\linux011VC\\VC\\Release\\system";

17 
	$maö
(
¨gc
,
¨gv
[])

19 
IMAGE_DOS_HEADER
* 
ImageDosHódî
 = 
NULL
;

20 
IMAGE_NT_HEADERS
* 
ImageNtHódî
 = 
NULL
;

21 
IMAGE_OPTIONAL_HEADER
* 
ImageO±i⁄ÆHódî
 = 
NULL
;

22 
HANDLE
 
hFûe
 = 
INVALID_HANDLE_VALUE
;

23 
DWORD
 
dwRódByãs
 = 0L;

24 
BOOL
 
bResu…
 = 
FALSE
;

25 
DWORD
 
dwA˘uÆByãs
 = 0L;

26 
DWORD
 
dwOff£t
 = 0L;

27 
UCHAR
* 
ÕucSour˚
 = 
NULL
;

28 
UCHAR
* 
ÕucDes
 = 
NULL
;

29 
DWORD
 
dwLo›
 = 0;

31 
hFûe
 = 
	`Cª©eFûe
(

32 
g_ÕszT¨gëP©h
,

33 
GENERIC_READ
 | 
GENERIC_WRITE
,

35 
NULL
,

36 
OPEN_ALWAYS
,

38 
NULL
);

39 if(
INVALID_HANDLE_VALUE
 =
hFûe
)

41 
	`¥ötf
("CanÇot openÅheÅarget fileÅoÑead.");

42 
__TERMINAL
;

45 
dwRódByãs
 = 4096;

46 
bResu…
 = 
	`RódFûe
(
hFûe
,
g_dwFûeHódî
,
dwRódByãs
,&
dwA˘uÆByãs
,
NULL
);

47 if(!
bResu…
)

48 
__TERMINAL
;

50 
	`Clo£H™dÀ
(
hFûe
);

51 
hFûe
 = 
INVALID_HANDLE_VALUE
;

56 
ImageDosHódî
 = (
IMAGE_DOS_HEADER
*)&
g_dwFûeHódî
[0];

57 
dwOff£t
 = 
ImageDosHódî
->
e_lÁ√w
;

59 
ImageNtHódî
 = (
IMAGE_NT_HEADERS
*)((
UCHAR
*)&
g_dwFûeHódî
[0] + 
dwOff£t
);

60 
ImageO±i⁄ÆHódî
 = &(
ImageNtHódî
->
O±i⁄ÆHódî
);

62 
g_FûlHódî
.
dwJmpAddr
 = 
ImageO±i⁄ÆHódî
->
AddªssOfE¡ryPoöt
;

63 
	`¥ötf
(" E¡ry Poöà: %d\r\n",
ImageO±i⁄ÆHódî
->
AddªssOfE¡ryPoöt
);

64 
g_FûlHódî
.
dwJmpAddr
 -(
__FILL_HEADER
);

70 
ÕucSour˚
 = (
UCHAR
*)&
g_FûlHódî
.
ucN›
[0];

71 
ÕucDes
 = (
UCHAR
*)&
g_dwFûeHódî
[0];

73 
dwLo›
 = 0;dwLo› < (
__FILL_HEADER
);dwLoop ++)

75 *
ÕucDes
 = *
ÕucSour˚
;

76 
ÕucDes
 ++;

77 
ÕucSour˚
 ++;

80 
hFûe
 = 
	`Cª©eFûe
(

81 
g_ÕszT¨gëP©h
,

82 
GENERIC_READ
 | 
GENERIC_WRITE
,

84 
NULL
,

85 
OPEN_ALWAYS
,

87 
NULL
);

88 if(
INVALID_HANDLE_VALUE
 =
hFûe
)

90 
	`¥ötf
("CanÇot openÅheÅarget fileÅo write.");

91 
__TERMINAL
;

94 
	`WrôeFûe
(
hFûe
,(
LPVOID
)&
g_dwFûeHódî
[0],(
__FILL_HEADER
),&
dwA˘uÆByãs
,

95 
NULL
);

97 
	`¥ötf
("Se˘i⁄Aligmíà: %d\r\n",
ImageO±i⁄ÆHódî
->
Se˘i⁄Alignmít
);

98 
	`¥ötf
(" FûeAligmíà: %d\r\n",
ImageO±i⁄ÆHódî
->
FûeAlignmít
);

100 
__TERMINAL
:

101 if(
INVALID_HANDLE_VALUE
 !
hFûe
)

102 
	`Clo£H™dÀ
(
hFûe
);

103 
	}
}

	@fs/bitmap.c

6 
	~<£t_£g.h
>

12 
	~<°rög.h
>

15 
	~<löux/sched.h
>

17 
	~<löux/kî√l.h
>

21 
_ölöe
 
	$˛ór_block
(*
addr
)

22 {
_asm
{

23 
pushf


24 
mov
 
edi
,
addr


25 
mov
 
ecx
,
BLOCK_SIZE
/4

26 
x‹
 
óx
,eax

27 
˛d


28 
ªp
 
°osd


29 
p›f


30 }
	}
}

39 
_ölöe
 
	$£t_bô
(
ƒ
,* 
addr
)

42 
_asm
{

43 
x‹
 
óx
,eax

44 
mov
 
ebx
,
ƒ


45 
mov
 
edx
,
addr


46 
bts
 [
edx
],
ebx


47 
£tb
 
Æ


51 
	}
}

60 
_ölöe
 
	$˛ór_bô
(
ƒ
,* 
addr
)

63 
_asm
{

64 
x‹
 
óx
,eax

65 
mov
 
ebx
,
ƒ


66 
mov
 
edx
,
addr


67 
bå
 [
edx
],
ebx


68 
£äb
 
Æ


72 
	}
}

82 
_ölöe
 
	$föd_fú°_zîo
(*
addr
)

85 
_asm
{

86 
pushf


87 
x‹
 
ecx
,ecx

88 
mov
 
esi
,
addr


89 
˛d


90 
l1
: 
lodsd


91 
nŸ
 
óx


92 
bsf
 
edx
,
óx


93 
je
 
l2


94 
add
 
ecx
,
edx


95 
jmp
 
l3


96 
l2
: 
add
 
ecx
,32

97 
cmp
 
ecx
,8192

98 
jl
 
l1


100 
l3
: 
mov
 
óx
,
ecx


101 
p›f


104 
	}
}

124 
	$‰ì_block
(
dev
, 
block
)

126 
su≥r_block
 * 
sb
;

127 
buf„r_hód
 * 
bh
;

130 i‡(!(
sb
 = 
	`gë_su≥r
(
dev
)))

131 
	`∑nic
("tryingÅo free block onÇonexistent device");

133 i‡(
block
 < 
sb
->
s_fú°d©az⁄e
 || block >sb->
s_nz⁄es
)

134 
	`∑nic
("tryingÅo free blockÇot in datazone");

137 
bh
 = 
	`gë_hash_èbÀ
(
dev
,
block
);

138 i‡(
bh
) {

139 i‡(
bh
->
b_cou¡
 != 1) {

140 
	`¥ötk
("tryingÅo free block (%04x:%d), count=%d\n",

141 
dev
,
block
,
bh
->
b_cou¡
);

144 
bh
->
b_dút
=0;

145 
bh
->
b_u±od©e
=0;

146 
	`bªl£
(
bh
);

150 
block
 -
sb
->
s_fú°d©az⁄e
 - 1 ;

151 i‡(
	`˛ór_bô
(
block
&8191,
sb
->
s_zm≠
[block/8192]->
b_d©a
)) {

152 
	`¥ötk
("block (%04x:%dË",
dev
,
block
+
sb
->
s_fú°d©az⁄e
-1);

153 
	`∑nic
("free_block: bitálready cleared");

156 
sb
->
s_zm≠
[
block
/8192]->
b_dút
 = 1;

157 
	}
}

161 
	$√w_block
(
dev
)

163 
buf„r_hód
 * 
bh
;

164 
su≥r_block
 * 
sb
;

165 
i
,
j
;

168 i‡(!(
sb
 = 
	`gë_su≥r
(
dev
)))

169 
	`∑nic
("tryingÅo getÇew block fromÇonexistant device");

171 
j
 = 8192;

172 
i
=0 ; i<8 ; i++)

173 i‡(
bh
=
sb
->
s_zm≠
[
i
])

174 i‡((
j
=
	`föd_fú°_zîo
(
bh
->
b_d©a
))<8192)

178 i‡(
i
>=8 || !
bh
 || 
j
>=8192)

181 i‡(
	`£t_bô
(
j
,
bh
->
b_d©a
))

182 
	`∑nic
("new_block: bitálready set");

185 
bh
->
b_dút
 = 1;

186 
j
 +
i
*8192 + 
sb
->
s_fú°d©az⁄e
-1;

187 i‡(
j
 >
sb
->
s_nz⁄es
)

190 i‡(!(
bh
=
	`gëblk
(
dev
,
j
)))

191 
	`∑nic
("new_block: cannot get block");

193 i‡(
bh
->
b_cou¡
 != 1)

194 
	`∑nic
("new block: count is != 1");

196 
	`˛ór_block
(
bh
->
b_d©a
);

197 
bh
->
b_u±od©e
 = 1;

198 
bh
->
b_dút
 = 1;

199 
	`bªl£
(
bh
);

200  
j
;

201 
	}
}

205 
	$‰ì_öode
(
m_öode
 * 
öode
)

207 
su≥r_block
 * 
sb
;

208 
buf„r_hód
 * 
bh
;

211 i‡(!
öode
)

214 i‡(!
öode
->
i_dev
) {

215 
	`mem£t
(
öode
,0,(*inode));

219 i‡(
öode
->
i_cou¡
>1) {

220 
	`¥ötk
("åyögÅÿ‰ì inodêwôh cou¡=%d\n",
öode
->
i_cou¡
);

221 
	`∑nic
("free_inode");

225 i‡(
öode
->
i_∆öks
)

226 
	`∑nic
("tryingÅo free inode withÜinks");

228 i‡(!(
sb
 = 
	`gë_su≥r
(
öode
->
i_dev
)))

229 
	`∑nic
("tryingÅo free inode onÇonexistent device");

231 i‡(
öode
->
i_num
 < 1 || inode->i_num > 
sb
->
s_nöodes
)

232 
	`∑nic
("tryingÅo free inode 0 orÇonexistant inode");

234 i‡(!(
bh
=
sb
->
s_im≠
[
öode
->
i_num
>>13]))

235 
	`∑nic
("nonexistent imap in superblock");

237 i‡(
	`˛ór_bô
(
öode
->
i_num
&8191,
bh
->
b_d©a
))

238 
	`¥ötk
("free_inode: bitálready cleared.\n\r");

240 
bh
->
b_dút
 = 1;

241 
	`mem£t
(
öode
,0,(*inode));

242 
	}
}

246 
m_öode
 * 
	$√w_öode
(
dev
)

248 
m_öode
 * 
öode
;

249 
su≥r_block
 * 
sb
;

250 
buf„r_hód
 * 
bh
;

251 
i
,
j
;

254 i‡(!(
öode
=
	`gë_em±y_öode
()))

255  
NULL
;

257 i‡(!(
sb
 = 
	`gë_su≥r
(
dev
)))

258 
	`∑nic
("new_inode with unknown device");

260 
j
 = 8192;

261 
i
=0 ; i<8 ; i++)

262 i‡(
bh
=
sb
->
s_im≠
[
i
])

263 i‡((
j
=
	`föd_fú°_zîo
(
bh
->
b_d©a
))<8192)

266 i‡(!
bh
 || 
j
 >8192 || j+
i
*8192 > 
sb
->
s_nöodes
) {

267 
	`ùut
(
öode
);

268  
NULL
;

271 i‡(
	`£t_bô
(
j
,
bh
->
b_d©a
))

272 
	`∑nic
("new_inode: bitálready set");

274 
bh
->
b_dút
 = 1;

276 
öode
->
i_cou¡
=1;

277 
öode
->
i_∆öks
=1;

278 
öode
->
i_dev
=
dev
;

279 
öode
->
i_uid
=
cuºít
->
euid
;

280 
öode
->
i_gid
=
cuºít
->
egid
;

281 
öode
->
i_dút
=1;

282 
öode
->
i_num
 = 
j
 + 
i
*8192;

283 
öode
->
i_mtime
 = inode->
i_©ime
 = inode->
i_˘ime
 = 
CURRENT_TIME
;

284  
öode
;

285 
	}
}

	@fs/block_dev.c

10 
	~<£t_£g.h
>

13 
	~<î∫o.h
>

16 
	~<löux/sched.h
>

18 
	~<löux/kî√l.h
>

20 
	~<asm/£gmít.h
>

22 
	~<asm/sy°em.h
>

31 
	$block_wrôe
(
dev
, * 
pos
, * 
buf
, 
cou¡
)

34 
block
 = *
pos
 >> 
BLOCK_SIZE_BITS
;

35 
off£t
 = *
pos
 & (
BLOCK_SIZE
-1);

36 
ch¨s
;

37 
wrôãn
 = 0;

38 
buf„r_hód
 * 
bh
;

39 * 
p
;

42 
cou¡
 > 0) {

44 
ch¨s
 = 
BLOCK_SIZE
 - 
off£t
;

45 i‡(
ch¨s
 > 
cou¡
)

46 
ch¨s
=
cou¡
;

49 i‡(
ch¨s
 =
BLOCK_SIZE
)

50 
bh
 = 
	`gëblk
(
dev
,
block
);

52 
bh
 = 
	`bªada
(
dev
,
block
,block+1,block+2,-1);

53 
block
++;

55 i‡(!
bh
)

56  
wrôãn
?wrôãn:-
EIO
;

59 
p
 = 
off£t
 + 
bh
->
b_d©a
;

60 
off£t
 = 0;

62 *
pos
 +
ch¨s
;

63 
wrôãn
 +
ch¨s
;

64 
cou¡
 -
ch¨s
;

66 
ch¨s
-- > 0)

67 *(
p
++Ë
	`gë_fs_byã
(
buf
++);

69 
bh
->
b_dút
 = 1;

70 
	`bªl£
(
bh
);

72  
wrôãn
;

73 
	}
}

76 
	$block_ªad
(
dev
, * 
pos
, * 
buf
, 
cou¡
)

79 
block
 = *
pos
 >> 
BLOCK_SIZE_BITS
;

80 
off£t
 = *
pos
 & (
BLOCK_SIZE
-1);

81 
ch¨s
;

82 
ªad
 = 0;

83 
buf„r_hód
 * 
bh
;

84 * 
p
;

87 
cou¡
>0) {

89 
ch¨s
 = 
BLOCK_SIZE
-
off£t
;

90 i‡(
ch¨s
 > 
cou¡
)

91 
ch¨s
 = 
cou¡
;

94 i‡(!(
bh
 = 
	`bªada
(
dev
,
block
,block+1,block+2,-1)))

95  
ªad
?ªad:-
EIO
;

96 
block
++;

99 
p
 = 
off£t
 + 
bh
->
b_d©a
;

100 
off£t
 = 0;

102 *
pos
 +
ch¨s
;

103 
ªad
 +
ch¨s
;

104 
cou¡
 -
ch¨s
;

106 
ch¨s
-->0)

107 
	`put_fs_byã
(*(
p
++),
buf
++);

108 
	`bªl£
(
bh
);

110  
ªad
;

111 
	}
}

	@fs/buffer.c

6 
	~<£t_£g.h
>

22 
	~<°d¨g.h
>

24 
	~<löux/c⁄fig.h
>

27 
	~<löux/sched.h
>

29 
	~<löux/kî√l.h
>

31 
	~<asm/sy°em.h
>

33 
	~<asm/io.h
>

35 
íd
;

36 
put_su≥r
();

37 
övÆid©e_öodes
();

39 
buf„r_hód
 * 
	g°¨t_buf„r
 = (buf„r_hód *)(&
íd
);

40 
buf„r_hód
 * 
	ghash_èbÀ
[
NR_HASH
] = {0};

41 
buf„r_hód
 * 
	g‰ì_li°
 = 0;

42 
èsk_°ru˘
 * 
	gbuf„r_waô
 = 
NULL
;

43 
	gNR_BUFFERS
 = 0;

46 
_ölöe
 
	$waô_⁄_buf„r
(
buf„r_hód
 * 
bh
)

48 
	`˛i
();

49 
bh
->
b_lock
)

50 
	`¶ìp_⁄
(&
bh
->
b_waô
);

51 
	`°i
();

52 
	}
}

55 
	$sys_sync
()

57 
i
;

58 
buf„r_hód
 * 
bh
;

60 
	`sync_öodes
();

62 
bh
 = 
°¨t_buf„r
;

63 
i
=0 ; i<
NR_BUFFERS
 ; i++,
bh
++) {

64 
	`waô_⁄_buf„r
(
bh
);

65 i‡(
bh
->
b_dút
)

66 
	`Œ_rw_block
(
WRITE
,
bh
);

69 
	}
}

72 
	$sync_dev
(
dev
)

74 
i
;

75 
buf„r_hód
 * 
bh
;

77 
bh
 = 
°¨t_buf„r
;

78 
i
=0 ; i<
NR_BUFFERS
 ; i++,
bh
++) {

79 i‡(
bh
->
b_dev
 !
dev
)

81 
	`waô_⁄_buf„r
(
bh
);

82 i‡(
bh
->
b_dev
 =
dev
 && bh->
b_dút
)

83 
	`Œ_rw_block
(
WRITE
,
bh
);

85 
	`sync_öodes
();

86 
bh
 = 
°¨t_buf„r
;

87 
i
=0 ; i<
NR_BUFFERS
 ; i++,
bh
++) {

88 i‡(
bh
->
b_dev
 !
dev
)

90 
	`waô_⁄_buf„r
(
bh
);

91 i‡(
bh
->
b_dev
 =
dev
 && bh->
b_dút
)

92 
	`Œ_rw_block
(
WRITE
,
bh
);

95 
	}
}

99 
_ölöe
 
	$övÆid©e_buf„rs
(
dev
)

101 
i
;

102 
buf„r_hód
 * 
bh
;

104 
bh
 = 
°¨t_buf„r
;

105 
i
=0 ; i<
NR_BUFFERS
 ; i++,
bh
++) {

106 i‡(
bh
->
b_dev
 !
dev
)

108 
	`waô_⁄_buf„r
(
bh
);

110 i‡(
bh
->
b_dev
 =
dev
)

111 
bh
->
b_u±od©e
 = bh->
b_dút
 = 0;

113 
	}
}

125 
	$check_disk_ch™ge
(
dev
)

127 
i
;

130 i‡(
	`MAJOR
(
dev
) != 2)

133 i‡(!
	`Ê›py_ch™ge
(
dev
 & 0x03))

137 
i
=0 ; i<
NR_SUPER
 ; i++)

138 i‡(
su≥r_block
[
i
].
s_dev
 =
dev
)

139 
	`put_su≥r
(
su≥r_block
[
i
].
s_dev
);

140 
	`övÆid©e_öodes
(
dev
);

141 
	`övÆid©e_buf„rs
(
dev
);

142 
	}
}

145 
	#_hash‚
(
dev
,
block
Ë((()(dev^block))%
NR_HASH
)

	)

146 
	#hash
(
dev
,
block
Ë
hash_èbÀ
[
	`_hash‚
(dev,block)]

	)

149 
_ölöe
 
	$ªmove_‰om_queues
(
buf„r_hód
 * 
bh
)

152 i‡(
bh
->
b_√xt
)

153 
bh
->
b_√xt
->
b_¥ev
 = bh->b_prev;

154 i‡(
bh
->
b_¥ev
)

155 
bh
->
b_¥ev
->
b_√xt
 = bh->b_next;

157 i‡(
	`hash
(
bh
->
b_dev
,bh->
b_blockƒ
) == bh)

158 
	`hash
(
bh
->
b_dev
,bh->
b_blockƒ
Ëbh->
b_√xt
;

160 i‡(!(
bh
->
b_¥ev_‰ì
Ë|| !(bh->
b_√xt_‰ì
))

161 
	`∑nic
("Free blockÜist corrupted");

162 
bh
->
b_¥ev_‰ì
->
b_√xt_‰ì
 = bh->b_next_free;

163 
bh
->
b_√xt_‰ì
->
b_¥ev_‰ì
 = bh->b_prev_free;

165 i‡(
‰ì_li°
 =
bh
)

166 
‰ì_li°
 = 
bh
->
b_√xt_‰ì
;

167 
	}
}

170 
_ölöe
 
	$ö£π_öto_queues
(
buf„r_hód
 * 
bh
)

173 
bh
->
b_√xt_‰ì
 = 
‰ì_li°
;

174 
bh
->
b_¥ev_‰ì
 = 
‰ì_li°
->b_prev_free;

175 
‰ì_li°
->
b_¥ev_‰ì
->
b_√xt_‰ì
 = 
bh
;

176 
‰ì_li°
->
b_¥ev_‰ì
 = 
bh
;

178 
bh
->
b_¥ev
 = 
NULL
;

179 
bh
->
b_√xt
 = 
NULL
;

180 i‡(!
bh
->
b_dev
)

182 
bh
->
b_√xt
 = 
	`hash
(bh->
b_dev
,bh->
b_blockƒ
);

183 
	`hash
(
bh
->
b_dev
,bh->
b_blockƒ
) = bh;

184 
bh
->
b_√xt
->
b_¥ev
 = bh;

185 
	}
}

189 
buf„r_hód
 * 
	$föd_buf„r
(
dev
, 
block
)

191 
buf„r_hód
 * 
tmp
;

193 
tmp
 = 
	`hash
(
dev
,
block
Ë;Åm∞!
NULL
 ;Åm∞tmp->
b_√xt
)

194 i‡(
tmp
->
b_dev
==
dev
 &&Åmp->
b_blockƒ
==
block
)

195  
tmp
;

196  
NULL
;

197 
	}
}

205 
buf„r_hód
 * 
	$gë_hash_èbÀ
(
dev
, 
block
)

207 
buf„r_hód
 * 
bh
;

211 i‡(!(
bh
=
	`föd_buf„r
(
dev
,
block
)))

212  
NULL
;

214 
bh
->
b_cou¡
++;

215 
	`waô_⁄_buf„r
(
bh
);

217 i‡(
bh
->
b_dev
 =
dev
 && bh->
b_blockƒ
 =
block
)

218  
bh
;

220 
bh
->
b_cou¡
--;

222 
	}
}

232 
	#BADNESS
(
bh
Ë(((bh)->
b_dút
<<1)+(bh)->
b_lock
)

	)

236 
buf„r_hód
 * 
	$gëblk
(
dev
,
block
)

238 
buf„r_hód
 * 
tmp
, * 
bh
;

240 
ª≥©
:

242 i‡(
bh
 = 
	`gë_hash_èbÀ
(
dev
,
block
))

243  
bh
;

246 
tmp
 = 
‰ì_li°
;

249 i‡(
tmp
->
b_cou¡
)

254 i‡(!
bh
 || 
	`BADNESS
(
tmp
)<BADNESS(bh)) {

255 
bh
 = 
tmp
;

256 i‡(!
	`BADNESS
(
tmp
))

260 } (
tmp
 =Åmp->
b_√xt_‰ì
Ë!
‰ì_li°
);

263 i‡(!
bh
) {

264 
	`¶ìp_⁄
(&
buf„r_waô
);

265 
ª≥©
;

268 
	`waô_⁄_buf„r
(
bh
);

270 i‡(
bh
->
b_cou¡
)

271 
ª≥©
;

274 
bh
->
b_dút
) {

275 
	`sync_dev
(
bh
->
b_dev
);

276 
	`waô_⁄_buf„r
(
bh
);

277 i‡(
bh
->
b_cou¡
)

278 
ª≥©
;

284 i‡(
	`föd_buf„r
(
dev
,
block
))

285 
ª≥©
;

289 
bh
->
b_cou¡
=1;

290 
bh
->
b_dút
=0;

291 
bh
->
b_u±od©e
=0;

293 
	`ªmove_‰om_queues
(
bh
);

294 
bh
->
b_dev
=
dev
;

295 
bh
->
b_blockƒ
=
block
;

297 
	`ö£π_öto_queues
(
bh
);

298  
bh
;

299 
	}
}

303 
	$bªl£
(
buf„r_hód
 * 
buf
)

305 i‡(!
buf
)

307 
	`waô_⁄_buf„r
(
buf
);

308 i‡(!(
buf
->
b_cou¡
--))

309 
	`∑nic
("TryingÅo free free buffer");

310 
	`wake_up
(&
buf„r_waô
);

311 
	}
}

318 
buf„r_hód
 * 
	$bªad
(
dev
,
block
)

320 
buf„r_hód
 * 
bh
;

323 i‡(!(
bh
=
	`gëblk
(
dev
,
block
)))

324 
	`∑nic
("bread: getblkÑeturned NULL\n");

326 i‡(
bh
->
b_u±od©e
)

327  
bh
;

329 
	`Œ_rw_block
(
READ
,
bh
);

330 
	`waô_⁄_buf„r
(
bh
);

332 i‡(
bh
->
b_u±od©e
)

333  
bh
;

335 
	`bªl£
(
bh
);

336  
NULL
;

337 
	}
}

341 
__ölöe
 
	$COPYBLK
(* 
‰om
, * 
to
)

342 {
_asm
{

343 
pushf


344 
mov
 
ecx
,
BLOCK_SIZE
/4

345 
mov
 
esi
,
‰om


346 
mov
 
edi
,
to


347 
˛d


348 
ªp
 
movsd


349 
p›f


350 }
	}
}

363 
	$bªad_∑ge
(
addªss
,
dev
,
b
[4])

365 
buf„r_hód
 * 
bh
[4];

366 
i
;

369 
i
=0 ; i<4 ; i++)

370 i‡(
b
[
i
]) {

372 i‡(
bh
[
i
] = 
	`gëblk
(
dev
,
b
[i]))

373 i‡(!
bh
[
i
]->
b_u±od©e
)

374 
	`Œ_rw_block
(
READ
,
bh
[
i
]);

376 
bh
[
i
] = 
NULL
;

378 
i
=0 ; i<4 ; i++,
addªss
 +
BLOCK_SIZE
)

379 i‡(
bh
[
i
]) {

380 
	`waô_⁄_buf„r
(
bh
[
i
]);

381 i‡(
bh
[
i
]->
b_u±od©e
)

382 
	`COPYBLK
(
bh
[
i
]->
b_d©a
,(*)
addªss
);

383 
	`bªl£
(
bh
[
i
]);

385 
	}
}

393 
buf„r_hód
 * 
	$bªada
(
dev
,
fú°
, ...)

395 
va_li°
 
¨gs
;

396 
buf„r_hód
 * 
bh
, *
tmp
;

399 
	`va_°¨t
(
¨gs
,
fú°
);

401 i‡(!(
bh
=
	`gëblk
(
dev
,
fú°
)))

402 
	`∑nic
("bread: getblkÑeturned NULL\n");

403 i‡(!
bh
->
b_u±od©e
)

404 
	`Œ_rw_block
(
READ
,
bh
);

406 (
fú°
=
	`va_¨g
(
¨gs
,))>=0) {

407 
tmp
=
	`gëblk
(
dev
,
fú°
);

408 i‡(
tmp
) {

409 i‡(!
tmp
->
b_u±od©e
)

410 
	`Œ_rw_block
(
READA
,
bh
);

411 
tmp
->
b_cou¡
--;

415 
	`va_íd
(
¨gs
);

416 
	`waô_⁄_buf„r
(
bh
);

418 i‡(
bh
->
b_u±od©e
)

419  
bh
;

420 
	`bªl£
(
bh
);

421  (
NULL
);

422 
	}
}

427 
	$buf„r_öô
(
buf„r_íd
)

429 
buf„r_hód
 * 
h
 = 
°¨t_buf„r
;

430 * 
b
;

431 
i
;

435 i‡(
buf„r_íd
 == 1<<20)

436 
b
 = (*) (640*1024);

438 
b
 = (*Ë
buf„r_íd
;

445  (
b
 = (*)b - 
BLOCK_SIZE
Ë>((*Ë(
h
+1)) ) {

446 
h
->
b_dev
 = 0;

447 
h
->
b_dút
 = 0;

448 
h
->
b_cou¡
 = 0;

449 
h
->
b_lock
 = 0;

450 
h
->
b_u±od©e
 = 0;

451 
h
->
b_waô
 = 
NULL
;

452 
h
->
b_√xt
 = 
NULL
;

453 
h
->
b_¥ev
 = 
NULL
;

454 
h
->
b_d©a
 = (*Ë
b
;

455 
h
->
b_¥ev_‰ì
 = h-1;

456 
h
->
b_√xt_‰ì
 = h+1;

457 
h
++;

458 
NR_BUFFERS
++;

459 i‡(
b
 == (*) 0x100000)

460 
b
 = (*) 0xA0000;

462 
h
--;

463 
‰ì_li°
 = 
°¨t_buf„r
;

464 
‰ì_li°
->
b_¥ev_‰ì
 = 
h
;

465 
h
->
b_√xt_‰ì
 = 
‰ì_li°
;

467 
i
=0;i<
NR_HASH
;i++)

468 
hash_èbÀ
[
i
]=
NULL
;

469 
	}
}

	@fs/char_dev.c

6 
	~<£t_£g.h
>

9 
	~<î∫o.h
>

11 
	~<sys/ty≥s.h
>

15 
	~<löux/sched.h
>

17 
	~<löux/kî√l.h
>

20 
	~<asm/£gmít.h
>

22 
	~<asm/io.h
>

24 
ây_ªad
(
mö‹
,* 
buf
,
cou¡
);

25 
ây_wrôe
(
mö‹
,* 
buf
,
cou¡
);

28 (*
¸w_±r
)(
	trw
,
	tmö‹
,* 
	tbuf
,
	tcou¡
,
	toff_t
 * 
	tpos
);

34 
	$rw_âyx
(
rw
,
mö‹
,* 
buf
,
cou¡
,
off_t
 * 
pos
)

36  ((
rw
==
READ
)?
	`ây_ªad
(
mö‹
,
buf
,
cou¡
):

37 
	`ây_wrôe
(
mö‹
,
buf
,
cou¡
));

38 
	}
}

42 
	$rw_ây
(
rw
,
mö‹
,* 
buf
,
cou¡
, 
off_t
 * 
pos
)

45 i‡(
cuºít
->
ây
<0)

46  -
EPERM
;

48  
	`rw_âyx
(
rw
,
cuºít
->
ây
,
buf
,
cou¡
,
pos
);

49 
	}
}

52 
	$rw_øm
(
rw
,* 
buf
, 
cou¡
, 
off_t
 *
pos
)

54  -
EIO
;

55 
	}
}

58 
	$rw_mem
(
rw
,* 
buf
, 
cou¡
, 
off_t
 * 
pos
)

60  -
EIO
;

61 
	}
}

64 
	$rw_kmem
(
rw
,* 
buf
, 
cou¡
, 
off_t
 * 
pos
)

66  -
EIO
;

67 
	}
}

72 
	$rw_p‹t
(
rw
,* 
buf
, 
cou¡
, 
off_t
 * 
pos
)

74 
i
=*
pos
;

77 
cou¡
-->0 && 
i
<65536) {

79 i‡(
rw
==
READ
)

80 
	`put_fs_byã
(
	`öb
(
i
),
buf
++);

83 
	`outb
(
	`gë_fs_byã
(
buf
++),
i
);

85 
i
++;

88 
i
 -*
pos
;

89 *
pos
 +
i
;

91  
i
;

92 
	}
}

95 
	$rw_mem‹y
(
rw
, 
mö‹
, * 
buf
, 
cou¡
, 
off_t
 * 
pos
)

98 
mö‹
) {

100  
	`rw_øm
(
rw
,
buf
,
cou¡
,
pos
);

102  
	`rw_mem
(
rw
,
buf
,
cou¡
,
pos
);

104  
	`rw_kmem
(
rw
,
buf
,
cou¡
,
pos
);

106  (
rw
==
READ
)?0:
cou¡
;

108  
	`rw_p‹t
(
rw
,
buf
,
cou¡
,
pos
);

110  -
EIO
;

112 
	}
}

115 
	#NRDEVS
 (( (
¸w_èbÀ
))/( (
¸w_±r
)))

	)

118 
¸w_±r
 
	g¸w_èbÀ
[]={

119 
NULL
,

120 
rw_mem‹y
,

121 
NULL
,

122 
NULL
,

123 
rw_âyx
,

124 
rw_ây
,

125 
NULL
,

126 
NULL
};

131 
	$rw_ch¨
(
rw
,
dev
, * 
buf
, 
cou¡
, 
off_t
 * 
pos
)

133 
¸w_±r
 
ˇŒ_addr
;

136 i‡(
	`MAJOR
(
dev
)>=
NRDEVS
)

137  -
ENODEV
;

139 i‡(!(
ˇŒ_addr
=
¸w_èbÀ
[
	`MAJOR
(
dev
)]))

140  -
ENODEV
;

142  
	`ˇŒ_addr
(
rw
,
	`MINOR
(
dev
),
buf
,
cou¡
,
pos
);

143 
	}
}

	@fs/exec.c

6 
	~<£t_£g.h
>

21 
	~<î∫o.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<a.out.h
>

26 
	~<löux/fs.h
>

27 
	~<löux/sched.h
>

29 
	~<löux/kî√l.h
>

30 
	~<löux/mm.h
>

31 
	~<asm/£gmít.h
>

33 
sys_exô
(
exô_code
);

34 
sys_˛o£
(
fd
);

40 
	#MAX_ARG_PAGES
 32

	)

49 * 
	$¸óã_èbÀs
(* 
p
,
¨gc
,
ívc
)

51 *
¨gv
,*
ívp
;

52 * 
•
;

55 
•
 = (*Ë(0xfffffff¯& (Ë
p
);

57 
•
 -
ívc
+1;

58 
ívp
 = 
•
;

61 
•
 -
¨gc
+1;

62 
¨gv
 = 
•
;

64 
	`put_fs_l⁄g
(()
ívp
,--
•
);

65 
	`put_fs_l⁄g
(()
¨gv
,--
•
);

66 
	`put_fs_l⁄g
(()
¨gc
,--
•
);

68 
¨gc
-->0) {

69 
	`put_fs_l⁄g
((Ë
p
,
¨gv
++);

70 
	`gë_fs_byã
(
p
++)) ;

72 
	`put_fs_l⁄g
(0,
¨gv
);

74 
ívc
-->0) {

75 
	`put_fs_l⁄g
((Ë
p
,
ívp
++);

76 
	`gë_fs_byã
(
p
++)) ;

78 
	`put_fs_l⁄g
(0,
ívp
);

79  
•
;

80 
	}
}

88 
	$cou¡
(** 
¨gv
)

90 
i
=0;

91 ** 
tmp
;

93 i‡(
tmp
 = 
¨gv
)

94 
	`gë_fs_l⁄g
((*Ë(
tmp
++)))

95 
i
++;

97  
i
;

98 
	}
}

121 
	$c›y_°rögs
(
¨gc
,** 
¨gv
,*
∑ge
,

122 
p
, 
‰om_kmem
)

124 *
tmp
, *
∑g
;

125 
Àn
, 
off£t
 = 0;

126 
ﬁd_fs
, 
√w_fs
;

128 i‡(!
p
)

131 
√w_fs
 = 
	`gë_ds
();

132 
ﬁd_fs
 = 
	`gë_fs
();

134 i‡(
‰om_kmem
==2)

135 
	`£t_fs
(
√w_fs
);

137 
¨gc
-- > 0) {

139 i‡(
‰om_kmem
 == 1)

140 
	`£t_fs
(
√w_fs
);

142 i‡(!(
tmp
 = (*)
	`gë_fs_l⁄g
(((*)
¨gv
)+
¨gc
)))

143 
	`∑nic
("argc is wrong");

145 i‡(
‰om_kmem
 == 1)

146 
	`£t_fs
(
ﬁd_fs
);

148 
Àn
=0;

150 
Àn
++;

151 } 
	`gë_fs_byã
(
tmp
++));

153 i‡(
p
-
Àn
 < 0) {

154 
	`£t_fs
(
ﬁd_fs
);

158 
Àn
) {

159 --
p
; --
tmp
; --
Àn
;

162 i‡(--
off£t
 < 0) {

163 
off£t
 = 
p
 % 
PAGE_SIZE
;

165 i‡(
‰om_kmem
==2)

166 
	`£t_fs
(
ﬁd_fs
);

170 i‡(!(
∑g
 = (*Ë
∑ge
[
p
/
PAGE_SIZE
]) &&

171 !(
∑g
 = (*Ë
∑ge
[
p
/
PAGE_SIZE
] =

172 (*Ë
	`gë_‰ì_∑ge
()))

175 i‡(
‰om_kmem
==2)

176 
	`£t_fs
(
√w_fs
);

180 *(
∑g
 + 
off£t
Ë
	`gë_fs_byã
(
tmp
);

184 i‡(
‰om_kmem
==2)

185 
	`£t_fs
(
ﬁd_fs
);

187  
p
;

188 
	}
}

194 
	$ch™ge_ldt
(
ãxt_size
,* 
∑ge
)

196 
code_limô
,
d©a_limô
,
code_ba£
,
d©a_ba£
;

197 
i
;

200 
code_limô
 = 
ãxt_size
+
PAGE_SIZE
 -1;

201 
code_limô
 &= 0xFFFFF000;

202 
d©a_limô
 = 0x4000000;

204 
code_ba£
 = 
	`gë_ba£
(
cuºít
->
ldt
[1]);

205 
d©a_ba£
 = 
code_ba£
;

207 
	`£t_ba£
(
cuºít
->
ldt
[1],
code_ba£
);

208 
	`£t_limô
(
cuºít
->
ldt
[1],
code_limô
);

209 
	`£t_ba£
(
cuºít
->
ldt
[2],
d©a_ba£
);

210 
	`£t_limô
(
cuºít
->
ldt
[2],
d©a_limô
);

214 
_asm
 {

215 
push
 0x17

216 
p›
 
fs


220 
d©a_ba£
 +
d©a_limô
;

221 
i
=
MAX_ARG_PAGES
-1 ; i>=0 ; i--) {

222 
d©a_ba£
 -
PAGE_SIZE
;

223 i‡(
∑ge
[
i
])

224 
	`put_∑ge
(
∑ge
[
i
],
d©a_ba£
);

226  
d©a_limô
;

227 
	}
}

239 
	$do_execve
(* 
eù
,
tmp
,* 
fûíame
,

240 ** 
¨gv
, ** 
ívp
)

242 
m_öode
 * 
öode
;

243 
buf„r_hód
 * 
bh
;

244 
exec
 
ex
;

245 
∑ge
[
MAX_ARG_PAGES
];

246 
i
,
¨gc
,
ívc
;

247 
e_uid
, 
e_gid
;

248 
ªtvÆ
;

249 
sh_b™g
 = 0;

251 
p
=
PAGE_SIZE
*
MAX_ARG_PAGES
-4;

254 i‡((0xfff‡& 
eù
[1]) != 0x000f)

255 
	`∑nic
("execve called from supervisor mode");

257 
i
=0 ; i<
MAX_ARG_PAGES
 ; i++)

258 
∑ge
[
i
]=0;

260 i‡(!(
öode
=
	`«mei
(
fûíame
)))

261  -
ENOENT
;

263 
¨gc
 = 
	`cou¡
(
¨gv
);

264 
ívc
 = 
	`cou¡
(
ívp
);

267 
ª°¨t_öãΩ
:

268 i‡(!
	`S_ISREG
(
öode
->
i_mode
)) {

269 
ªtvÆ
 = -
EACCES
;

270 
exec_îr‹2
;

273 
i
 = 
öode
->
i_mode
;

274 
e_uid
 = (
i
 & 
S_ISUID
Ë? 
öode
->
i_uid
 : 
cuºít
->
euid
;

275 
e_gid
 = (
i
 & 
S_ISGID
Ë? 
öode
->
i_gid
 : 
cuºít
->
egid
;

276 i‡(
cuºít
->
euid
 =
öode
->
i_uid
)

277 
i
 >>= 6;

278 i‡(
cuºít
->
egid
 =
öode
->
i_gid
)

279 
i
 >>= 3;

280 i‡(!(
i
 & 1) &&

281 !((
öode
->
i_mode
 & 0111Ë&& 
	`su£r
())) {

282 
ªtvÆ
 = -
ENOEXEC
;

283 
exec_îr‹2
;

286 i‡(!(
bh
 = 
	`bªad
(
öode
->
i_dev
,öode->
i_z⁄e
[0]))) {

287 
ªtvÆ
 = -
EACCES
;

288 
exec_îr‹2
;

291 
ex
 = *((
exec
 *Ë
bh
->
b_d©a
);

293 i‡((
bh
->
b_d©a
[0] ='#'Ë&& (bh->b_d©a[1] ='!'Ë&& (!
sh_b™g
)) {

298 
buf
[1023], *
˝
, *
öãΩ
, *
i_«me
, *
i_¨g
;

299 
ﬁd_fs
;

302 
	`°∫˝y
(
buf
, 
bh
->
b_d©a
+2, 1022);

304 
	`bªl£
(
bh
);

305 
	`ùut
(
öode
);

307 
buf
[1022] = '\0';

308 i‡(
˝
 = 
	`°rchr
(
buf
, '\n')) {

309 *
˝
 = '\0';

310 
˝
 = 
buf
; (*cp == ' ') || (*cp == '\t'); cp++);

313 i‡(!
˝
 || *cp == '\0') {

314 
ªtvÆ
 = -
ENOEXEC
;

315 
exec_îr‹1
;

318 
öãΩ
 = 
i_«me
 = 
˝
;

320 
i_¨g
 = 0;

321  ; *
˝
 && (*cp != ' ') && (*cp != '\t'); cp++) {

322 i‡(*
˝
 == '/')

323 
i_«me
 = 
˝
+1;

326 i‡(*
˝
) {

327 *
˝
++ = '\0';

328 
i_¨g
 = 
˝
;

334 i‡(
sh_b™g
++ == 0) {

335 
p
 = 
	`c›y_°rögs
(
ívc
, 
ívp
, 
∑ge
,Ö, 0);

336 
p
 = 
	`c›y_°rögs
(--
¨gc
, 
¨gv
+1, 
∑ge
,Ö, 0);

346 
p
 = 
	`c›y_°rögs
(1, &
fûíame
, 
∑ge
,Ö, 1);

348 
¨gc
++;

349 i‡(
i_¨g
) {

350 
p
 = 
	`c›y_°rögs
(1, &
i_¨g
, 
∑ge
,Ö, 2);

351 
¨gc
++;

354 
p
 = 
	`c›y_°rögs
(1, &
i_«me
, 
∑ge
,Ö, 2);

355 
¨gc
++;

356 i‡(!
p
) {

357 
ªtvÆ
 = -
ENOMEM
;

358 
exec_îr‹1
;

364 
ﬁd_fs
 = 
	`gë_fs
();

365 
	`£t_fs
(
	`gë_ds
());

367 i‡(!(
öode
=
	`«mei
(
öãΩ
))) {

368 
	`£t_fs
(
ﬁd_fs
);

369 
ªtvÆ
 = -
ENOENT
;

370 
exec_îr‹1
;

372 
	`£t_fs
(
ﬁd_fs
);

373 
ª°¨t_öãΩ
;

376 
	`bªl£
(
bh
);

381 i‡(
	`N_MAGIC
(
ex
Ë!
ZMAGIC
 ||Éx.
a_åsize
 ||Éx.
a_drsize
 ||

382 
ex
.
a_ãxt
+ex.
a_d©a
+ex.
a_bss
>0x3000000 ||

383 
öode
->
i_size
 < 
ex
.
a_ãxt
+ex.
a_d©a
+ex.
a_syms
+
	`N_TXTOFF
(ex)) {

384 
ªtvÆ
 = -
ENOEXEC
;

385 
exec_îr‹2
;

388 i‡(
	`N_TXTOFF
(
ex
Ë!
BLOCK_SIZE
) {

389 
	`¥ötk
("%s: N_TXTOFF !BLOCK_SIZE. Sìá.out.h.", 
fûíame
);

390 
ªtvÆ
 = -
ENOEXEC
;

391 
exec_îr‹2
;

395 i‡(!
sh_b™g
) {

396 
p
 = 
	`c›y_°rögs
(
ívc
,
ívp
,
∑ge
,p,0);

397 
p
 = 
	`c›y_°rögs
(
¨gc
,
¨gv
,
∑ge
,p,0);

399 i‡(!
p
) {

400 
ªtvÆ
 = -
ENOMEM
;

401 
exec_îr‹2
;

406 i‡(
cuºít
->
execuèbÀ
)

407 
	`ùut
(
cuºít
->
execuèbÀ
);

408 
cuºít
->
execuèbÀ
 = 
öode
;

411 
i
=0 ; i<32 ; i++)

412 
cuºít
->
siga˘i⁄
[
i
].
ß_h™dÀr
 = 
NULL
;

414 
i
=0 ; i<
NR_OPEN
 ; i++)

415 i‡((
cuºít
->
˛o£_⁄_exec
>>
i
)&1)

416 
	`sys_˛o£
(
i
);

417 
cuºít
->
˛o£_⁄_exec
 = 0;

419 
	`‰ì_∑ge_èbÀs
(
	`gë_ba£
(
cuºít
->
ldt
[1]),
	`gë_limô
(0x0f));

420 
	`‰ì_∑ge_èbÀs
(
	`gë_ba£
(
cuºít
->
ldt
[2]),
	`gë_limô
(0x17));

422 i‡(
œ°_èsk_u£d_m©h
 =
cuºít
)

423 
œ°_èsk_u£d_m©h
 = 
NULL
;

424 
cuºít
->
u£d_m©h
 = 0;

428 
p
 +
	`ch™ge_ldt
(
ex
.
a_ãxt
,
∑ge
)-
MAX_ARG_PAGES
*
PAGE_SIZE
;

430 
p
 = (Ë
	`¸óã_èbÀs
((*Ì,
¨gc
,
ívc
);

433 
cuºít
->
brk
 = 
ex
.
a_bss
 +

434 (
cuºít
->
íd_d©a
 = 
ex
.
a_d©a
 +

435 (
cuºít
->
íd_code
 = 
ex
.
a_ãxt
));

437 
cuºít
->
°¨t_°ack
 = 
p
 & 0xfffff000;

438 
cuºít
->
euid
 = 
e_uid
;

439 
cuºít
->
egid
 = 
e_gid
;

441 
i
 = 
ex
.
a_ãxt
+ex.
a_d©a
;

442 
i
&0xfff)

443 
	`put_fs_byã
(0,(*Ë(
i
++));

447 
eù
[0] = 
ex
.
a_íåy
;

448 
eù
[3] = 
p
;

450 
exec_îr‹2
:

451 
	`ùut
(
öode
);

452 
exec_îr‹1
:

453 
i
=0 ; i<
MAX_ARG_PAGES
 ; i++)

454 
	`‰ì_∑ge
(
∑ge
[
i
]);

455 (
ªtvÆ
);

456 
	}
}

	@fs/fcntl.c

6 
	~<£t_£g.h
>

8 
	~<°rög.h
>

9 
	~<î∫o.h
>

10 
	~<löux/sched.h
>

12 
	~<löux/kî√l.h
>

13 
	~<asm/£gmít.h
>

15 
	~<f˙é.h
>

16 
	~<sys/°©.h
>

18 
sys_˛o£
(
fd
);

23 
	$dupfd
(
fd
, 
¨g
)

27 i‡(
fd
 >
NR_OPEN
 || !
cuºít
->
fûp
[fd])

28  -
EBADF
;

30 i‡(
¨g
 >
NR_OPEN
)

31  -
EINVAL
;

33 
¨g
 < 
NR_OPEN
)

34 i‡(
cuºít
->
fûp
[
¨g
])

35 
¨g
++;

39 i‡(
¨g
 >
NR_OPEN
)

40  -
EMFILE
;

42 
cuºít
->
˛o£_⁄_exec
 &~(1<<
¨g
);

44 (
cuºít
->
fûp
[
¨g
] = cuºít->fûp[
fd
])->
f_cou¡
++;

45  
¨g
;

46 
	}
}

50 
	$sys_dup2
(
ﬁdfd
, 
√wfd
)

52 
	`sys_˛o£
(
√wfd
);

53  
	`dupfd
(
ﬁdfd
,
√wfd
);

54 
	}
}

58 
	$sys_dup
(
fûdes
)

60  
	`dupfd
(
fûdes
,0);

61 
	}
}

65 
	$sys_f˙é
(
fd
, 
cmd
, 
¨g
)

67 
fûe
 * 
fûp
;

71 i‡(
fd
 >
NR_OPEN
 || !(
fûp
 = 
cuºít
->filp[fd]))

72  -
EBADF
;

74 
cmd
) {

75 
F_DUPFD
:

76  
	`dupfd
(
fd
,
¨g
);

77 
F_GETFD
:

78  (
cuºít
->
˛o£_⁄_exec
>>
fd
)&1;

79 
F_SETFD
:

80 i‡(
¨g
&1)

81 
cuºít
->
˛o£_⁄_exec
 |(1<<
fd
);

83 
cuºít
->
˛o£_⁄_exec
 &~(1<<
fd
);

85 
F_GETFL
:

86  
fûp
->
f_Êags
;

87 
F_SETFL
:

88 
fûp
->
f_Êags
 &~(
O_APPEND
 | 
O_NONBLOCK
);

89 
fûp
->
f_Êags
 |
¨g
 & (
O_APPEND
 | 
O_NONBLOCK
);

91 
F_GETLK
: 
F_SETLK
: 
F_SETLKW
:

96 
	}
}

	@fs/file_dev.c

6 
	~<£t_£g.h
>

8 
	~<î∫o.h
>

9 
	~<f˙é.h
>

11 
	~<löux/sched.h
>

13 
	~<löux/kî√l.h
>

14 
	~<asm/£gmít.h
>

16 
	#MIN
(
a
,
b
) (((a)<(b))?(a):(b))

17 
	#MAX
(
a
,
b
) (((a)>(b))?(a):(b))

18 

	)

22 
	$fûe_ªad
(
m_öode
 * 
öode
, 
fûe
 * 
fûp
, * 
buf
, 
cou¡
)

24 
À·
,
ch¨s
,
ƒ
;

25 
buf„r_hód
 * 
bh
;

28 i‡((
À·
=
cou¡
)<=0)

31 
À·
) {

35 i‡(
ƒ
 = 
	`bm≠
(
öode
,(
fûp
->
f_pos
)/
BLOCK_SIZE
)) {

36 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,
ƒ
)))

39 
bh
 = 
NULL
;

43 
ƒ
 = 
fûp
->
f_pos
 % 
BLOCK_SIZE
;

44 
ch¨s
 = 
	`MIN
–
BLOCK_SIZE
-
ƒ
 , 
À·
 );

46 
fûp
->
f_pos
 +
ch¨s
;

47 
À·
 -
ch¨s
;

50 i‡(
bh
) {

51 * 
p
 = 
ƒ
 + 
bh
->
b_d©a
;

52 
ch¨s
-->0)

53 
	`put_fs_byã
(*(
p
++),
buf
++);

54 
	`bªl£
(
bh
);

56 
ch¨s
-->0)

57 
	`put_fs_byã
(0,
buf
++);

61 
öode
->
i_©ime
 = 
CURRENT_TIME
;

62  (
cou¡
-
À·
)?(cou¡-À·):-
ERROR
;

63 
	}
}

68 
	$fûe_wrôe
(
m_öode
 * 
öode
, 
fûe
 * 
fûp
, * 
buf
, 
cou¡
)

70 
off_t
 
pos
;

71 
block
,
c
;

72 
buf„r_hód
 * 
bh
;

73 * 
p
;

74 
i
=0;

81 i‡(
fûp
->
f_Êags
 & 
O_APPEND
)

82 
pos
 = 
öode
->
i_size
;

84 
pos
 = 
fûp
->
f_pos
;

86 
i
<
cou¡
) {

89 i‡(!(
block
 = 
	`¸óã_block
(
öode
,
pos
/
BLOCK_SIZE
)))

92 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,
block
)))

96 
c
 = 
pos
 % 
BLOCK_SIZE
;

97 
p
 = 
c
 + 
bh
->
b_d©a
;

98 
bh
->
b_dút
 = 1;

101 
c
 = 
BLOCK_SIZE
-c;

102 i‡(
c
 > 
cou¡
-
i
) c = count-i;

105 
pos
 +
c
;

106 i‡(
pos
 > 
öode
->
i_size
) {

107 
öode
->
i_size
 = 
pos
;

108 
öode
->
i_dút
 = 1;

112 
i
 +
c
;

113 
c
-->0)

114 *(
p
++Ë
	`gë_fs_byã
(
buf
++);

115 
	`bªl£
(
bh
);

118 
öode
->
i_mtime
 = 
CURRENT_TIME
;

121 i‡(!(
fûp
->
f_Êags
 & 
O_APPEND
)) {

122 
fûp
->
f_pos
 = 
pos
;

123 
öode
->
i_˘ime
 = 
CURRENT_TIME
;

126  (
i
?i:-1);

127 
	}
}

	@fs/file_table.c

6 
	~<£t_£g.h
>

9 
	~<löux/fs.h
>

11 
fûe
 
	gfûe_èbÀ
[
NR_FILE
] = {0};

	@fs/inode.c

6 
	~<£t_£g.h
>

8 
	~<°rög.h
>

9 
	~<sys/°©.h
>

11 
	~<löux/sched.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/mm.h
>

15 
	~<asm/sy°em.h
>

17 
m_öode
 
	göode_èbÀ
[
NR_INODE
]={0};

19 
ªad_öode
(
m_öode
 * 
öode
);

20 
wrôe_öode
(
m_öode
 * 
öode
);

24 
_ölöe
 
	$waô_⁄_öode
(
m_öode
 * 
öode
)

26 
	`˛i
();

27 
öode
->
i_lock
)

28 
	`¶ìp_⁄
(&
öode
->
i_waô
);

29 
	`°i
();

30 
	}
}

35 
_ölöe
 
	$lock_öode
(
m_öode
 * 
öode
)

37 
	`˛i
();

38 
öode
->
i_lock
)

39 
	`¶ìp_⁄
(&
öode
->
i_waô
);

40 
öode
->
i_lock
=1;

41 
	`°i
();

42 
	}
}

46 
_ölöe
 
	$u∆ock_öode
(
m_öode
 * 
öode
)

48 
öode
->
i_lock
=0;

49 
	`wake_up
(&
öode
->
i_waô
);

50 
	}
}

54 
	$övÆid©e_öodes
(
dev
)

56 
i
;

57 
m_öode
 * 
öode
;

59 
öode
 = 0+
öode_èbÀ
;

60 
i
=0 ; i<
NR_INODE
 ; i++,
öode
++) {

61 
	`waô_⁄_öode
(
öode
);

62 i‡(
öode
->
i_dev
 =
dev
) {

63 i‡(
öode
->
i_cou¡
)

64 
	`¥ötk
("inode in use onÑemoved disk\n\r");

65 
öode
->
i_dev
 = inode->
i_dút
 = 0;

68 
	}
}

72 
	$sync_öodes
()

74 
i
;

75 
m_öode
 * 
öode
;

77 
öode
 = 0+
öode_èbÀ
;

78 
i
=0 ; i<
NR_INODE
 ; i++,
öode
++) {

79 
	`waô_⁄_öode
(
öode
);

80 i‡(
öode
->
i_dút
 && !öode->
i_pùe
)

81 
	`wrôe_öode
(
öode
);

83 
	}
}

89 
	$_bm≠
(
m_öode
 * 
öode
,
block
,
¸óã
)

91 
buf„r_hód
 * 
bh
;

92 
i
;

95 i‡(
block
<0)

96 
	`∑nic
("_bmap: block<0");

98 i‡(
block
 >= 7+512+512*512)

99 
	`∑nic
("_bmap: block>big");

101 i‡(
block
<7) {

105 i‡(
¸óã
 && !
öode
->
i_z⁄e
[
block
])

106 i‡(
öode
->
i_z⁄e
[
block
]=
	`√w_block
(öode->
i_dev
)) {

107 
öode
->
i_˘ime
=
CURRENT_TIME
;

108 
öode
->
i_dút
=1;

110  
öode
->
i_z⁄e
[
block
];

113 
block
 -= 7;

114 i‡(
block
<512) {

118 i‡(
¸óã
 && !
öode
->
i_z⁄e
[7])

119 i‡(
öode
->
i_z⁄e
[7]=
	`√w_block
(öode->
i_dev
)) {

120 
öode
->
i_dút
=1;

121 
öode
->
i_˘ime
=
CURRENT_TIME
;

124 i‡(!
öode
->
i_z⁄e
[7])

127 i‡(!(
bh
 = 
	`bªad
(
öode
->
i_dev
,öode->
i_z⁄e
[7])))

130 
i
 = ((*Ë(
bh
->
b_d©a
))[
block
];

133 i‡(
¸óã
 && !
i
)

134 i‡(
i
=
	`√w_block
(
öode
->
i_dev
)) {

135 ((*Ë(
bh
->
b_d©a
))[
block
]=
i
;

136 
bh
->
b_dút
=1;

139 
	`bªl£
(
bh
);

140  
i
;

144 
block
 -= 512;

147 i‡(
¸óã
 && !
öode
->
i_z⁄e
[8])

148 i‡(
öode
->
i_z⁄e
[8]=
	`√w_block
(öode->
i_dev
)) {

149 
öode
->
i_dút
=1;

150 
öode
->
i_˘ime
=
CURRENT_TIME
;

153 i‡(!
öode
->
i_z⁄e
[8])

156 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,öode->
i_z⁄e
[8])))

159 
i
 = ((*)
bh
->
b_d©a
)[
block
>>9];

163 i‡(
¸óã
 && !
i
)

164 i‡(
i
=
	`√w_block
(
öode
->
i_dev
)) {

165 ((*Ë(
bh
->
b_d©a
))[
block
>>9]=
i
;

166 
bh
->
b_dút
=1;

168 
	`bªl£
(
bh
);

170 i‡(!
i
)

173 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,
i
)))

176 
i
 = ((*)
bh
->
b_d©a
)[
block
&511];

180 i‡(
¸óã
 && !
i
)

181 i‡(
i
=
	`√w_block
(
öode
->
i_dev
)) {

182 ((*Ë(
bh
->
b_d©a
))[
block
&511]=
i
;

183 
bh
->
b_dút
=1;

186 
	`bªl£
(
bh
);

187  
i
;

188 
	}
}

191 
	$bm≠
(
m_öode
 * 
öode
,
block
)

193  
	`_bm≠
(
öode
,
block
,0);

194 
	}
}

197 
	$¸óã_block
(
m_öode
 * 
öode
, 
block
)

199  
	`_bm≠
(
öode
,
block
,1);

200 
	}
}

203 
	$ùut
(
m_öode
 * 
öode
)

205 i‡(!
öode
)

207 
	`waô_⁄_öode
(
öode
);

208 i‡(!
öode
->
i_cou¡
)

209 
	`∑nic
("iput:ÅryingÅo free free inode");

213 i‡(
öode
->
i_pùe
) {

214 
	`wake_up
(&
öode
->
i_waô
);

215 i‡(--
öode
->
i_cou¡
)

217 
	`‰ì_∑ge
(
öode
->
i_size
);

218 
öode
->
i_cou¡
=0;

219 
öode
->
i_dút
=0;

220 
öode
->
i_pùe
=0;

224 i‡(!
öode
->
i_dev
) {

225 
öode
->
i_cou¡
--;

229 i‡(
	`S_ISBLK
(
öode
->
i_mode
)) {

230 
	`sync_dev
(
öode
->
i_z⁄e
[0]);

231 
	`waô_⁄_öode
(
öode
);

233 
ª≥©
:

235 i‡(
öode
->
i_cou¡
>1) {

236 
öode
->
i_cou¡
--;

240 i‡(!
öode
->
i_∆öks
) {

241 
	`åunˇã
(
öode
);

242 
	`‰ì_öode
(
öode
);

246 i‡(
öode
->
i_dút
) {

247 
	`wrôe_öode
(
öode
);

248 
	`waô_⁄_öode
(
öode
);

249 
ª≥©
;

252 
öode
->
i_cou¡
--;

254 
	}
}

258 
m_öode
 * 
	$gë_em±y_öode
()

260 
m_öode
 * 
öode
;

261 
m_öode
 * 
œ°_öode
 = 
öode_èbÀ
;

262 
i
;

266 
öode
 = 
NULL
;

267 
i
 = 
NR_INODE
; i ; i--) {

269 i‡(++
œ°_öode
 >
öode_èbÀ
 + 
NR_INODE
)

270 
œ°_öode
 = 
öode_èbÀ
;

273 i‡(!
œ°_öode
->
i_cou¡
) {

274 
öode
 = 
œ°_öode
;

275 i‡(!
öode
->
i_dút
 && !öode->
i_lock
)

280 i‡(!
öode
) {

281 
i
=0 ; i<
NR_INODE
 ; i++)

282 
	`¥ötk
("%04x: %6d\t",
öode_èbÀ
[
i
].
i_dev
,

283 
öode_èbÀ
[
i
].
i_num
);

284 
	`∑nic
("No free inodes in mem");

287 
	`waô_⁄_öode
(
öode
);

289 
öode
->
i_dút
) {

290 
	`wrôe_öode
(
öode
);

291 
	`waô_⁄_öode
(
öode
);

293 } 
öode
->
i_cou¡
);

295 
	`mem£t
(
öode
,0,(*inode));

296 
öode
->
i_cou¡
 = 1;

297  
öode
;

298 
	}
}

303 
m_öode
 * 
	$gë_pùe_öode
()

305 
m_öode
 * 
öode
;

307 i‡(!(
öode
 = 
	`gë_em±y_öode
()))

308  
NULL
;

309 i‡(!(
öode
->
i_size
=
	`gë_‰ì_∑ge
())) {

310 
öode
->
i_cou¡
 = 0;

311  
NULL
;

313 
öode
->
i_cou¡
 = 2;

314 
	`PIPE_HEAD
(*
öode
Ë
	`PIPE_TAIL
(*inode) = 0;

315 
öode
->
i_pùe
 = 1;

316  
öode
;

317 
	}
}

321 
m_öode
 * 
	$igë
(
dev
,
ƒ
)

323 
m_öode
 * 
öode
, * 
em±y
;

325 i‡(!
dev
)

326 
	`∑nic
("iget with dev==0");

328 
em±y
 = 
	`gë_em±y_öode
();

330 
öode
 = 
öode_èbÀ
;

331 
öode
 < 
NR_INODE
+
öode_èbÀ
) {

333 i‡(
öode
->
i_dev
 !
dev
 || inode->
i_num
 !
ƒ
) {

334 
öode
++;

338 
	`waô_⁄_öode
(
öode
);

341 i‡(
öode
->
i_dev
 !
dev
 || inode->
i_num
 !
ƒ
) {

342 
öode
 = 
öode_èbÀ
;

346 
öode
->
i_cou¡
++;

347 i‡(
öode
->
i_mou¡
) {

348 
i
;

352 
i
 = 0 ; i<
NR_SUPER
 ; i++)

353 i‡(
su≥r_block
[
i
].
s_imou¡
==
öode
)

355 i‡(
i
 >
NR_SUPER
) {

356 
	`¥ötk
("Mounted inode hasn't got sb\n");

357 i‡(
em±y
)

358 
	`ùut
(
em±y
);

359  
öode
;

363 
	`ùut
(
öode
);

364 
dev
 = 
su≥r_block
[
i
].
s_dev
;

365 
ƒ
 = 
ROOT_INO
;

366 
öode
 = 
öode_èbÀ
;

370 i‡(
em±y
)

371 
	`ùut
(
em±y
);

372  
öode
;

376 i‡(!
em±y
)

377  (
NULL
);

378 
öode
=
em±y
;

379 
öode
->
i_dev
 = 
dev
;

380 
öode
->
i_num
 = 
ƒ
;

381 
	`ªad_öode
(
öode
);

382  
öode
;

383 
	}
}

386 
	$ªad_öode
(
m_öode
 * 
öode
)

388 
su≥r_block
 * 
sb
;

389 
buf„r_hód
 * 
bh
;

390 
block
;

393 
	`lock_öode
(
öode
);

394 i‡(!(
sb
=
	`gë_su≥r
(
öode
->
i_dev
)))

395 
	`∑nic
("tryingÅoÑead inode without dev");

398 
block
 = 2 + 
sb
->
s_im≠_blocks
 + sb->
s_zm≠_blocks
 +

399 (
öode
->
i_num
-1)/
INODES_PER_BLOCK
;

401 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,
block
)))

402 
	`∑nic
("unableÅoÑead i-node block");

403 *(
d_öode
 *)
öode
 =

404 ((
d_öode
 *)
bh
->
b_d©a
)

405 [(
öode
->
i_num
-1)%
INODES_PER_BLOCK
];

407 
	`bªl£
(
bh
);

408 
	`u∆ock_öode
(
öode
);

409 
	}
}

412 
	$wrôe_öode
(
m_öode
 * 
öode
)

414 
su≥r_block
 * 
sb
;

415 
buf„r_hód
 * 
bh
;

416 
block
;

420 
	`lock_öode
(
öode
);

421 i‡(!
öode
->
i_dút
 || !öode->
i_dev
) {

422 
	`u∆ock_öode
(
öode
);

426 i‡(!(
sb
=
	`gë_su≥r
(
öode
->
i_dev
)))

427 
	`∑nic
("tryingÅo write inode without device");

430 
block
 = 2 + 
sb
->
s_im≠_blocks
 + sb->
s_zm≠_blocks
 +

431 (
öode
->
i_num
-1)/
INODES_PER_BLOCK
;

433 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,
block
)))

434 
	`∑nic
("unableÅoÑead i-node block");

436 ((
d_öode
 *)
bh
->
b_d©a
)

437 [(
öode
->
i_num
-1)%
INODES_PER_BLOCK
] =

438 *(
d_öode
 *)
öode
;

440 
bh
->
b_dút
=1;

441 
öode
->
i_dút
=0;

442 
	`bªl£
(
bh
);

443 
	`u∆ock_öode
(
öode
);

444 
	}
}

	@fs/ioctl.c

6 
	~<£t_£g.h
>

8 
	~<°rög.h
>

9 
	~<î∫o.h
>

10 
	~<sys/°©.h
>

12 
	~<löux/sched.h
>

16 
ây_io˘l
(
dev
, 
cmd
, 
¨g
);

19 (*
	tio˘l_±r
)(
	tdev
,
	tcmd
,
	t¨g
);

22 
	#NRDEVS
 (( (
io˘l_èbÀ
))/( (
io˘l_±r
)))

	)

25 
io˘l_±r
 
io˘l_èbÀ
[]={

26 
NULL
,

27 
NULL
,

28 
NULL
,

29 
NULL
,

30 
ây_io˘l
,

31 
ây_io˘l
,

32 
NULL
,

33 
NULL


34 
	}
};

39 
	$sys_io˘l
(
fd
, 
cmd
, 
¨g
)

41 
fûe
 * 
fûp
;

42 
dev
,
mode
;

45 i‡(
fd
 >
NR_OPEN
 || !(
fûp
 = 
cuºít
->filp[fd]))

46  -
EBADF
;

48 
mode
=
fûp
->
f_öode
->
i_mode
;

49 i‡(!
	`S_ISCHR
(
mode
Ë&& !
	`S_ISBLK
(mode))

50  -
EINVAL
;

52 
dev
 = 
fûp
->
f_öode
->
i_z⁄e
[0];

53 i‡(
	`MAJOR
(
dev
Ë>
NRDEVS
)

54  -
ENODEV
;

56 i‡(!
io˘l_èbÀ
[
	`MAJOR
(
dev
)])

57  -
ENOTTY
;

59  
io˘l_èbÀ
[
	`MAJOR
(
dev
)](dev,
cmd
,
¨g
);

60 
	}
}

	@fs/namei.c

6 
	~<£t_£g.h
>

12 
	~<löux/sched.h
>

14 
	~<löux/kî√l.h
>

15 
	~<asm/£gmít.h
>

17 
	~<°rög.h
>

18 
	~<f˙é.h
>

19 
	~<î∫o.h
>

20 
	~<c⁄°.h
>

21 
	~<sys/°©.h
>

25 
	#ACC_MODE
(
x
Ë("\004\002\006\377"[(x)&
O_ACCMODE
])

	)

32 
	#MAY_EXEC
 1

33 
	#MAY_WRITE
 2

34 
	#MAY_READ
 4

35 

	)

45 
	$≥rmissi⁄
(
m_öode
 * 
öode
,
mask
)

47 
mode
 = 
öode
->
i_mode
;

51 i‡(
öode
->
i_dev
 && !öode->
i_∆öks
)

54 i‡(
cuºít
->
euid
==
öode
->
i_uid
)

55 
mode
 >>= 6;

57 i‡(
cuºít
->
egid
==
öode
->
i_gid
)

58 
mode
 >>= 3;

60 i‡(((
mode
 & 
mask
 & 0007Ë=maskË|| 
	`su£r
())

63 
	}
}

74 
	$m©ch
(
Àn
,c⁄° * 
«me
,
dú_íåy
 * 
de
)

76 
ßme
;

77 *
de_«me
;

80 i‡(!
de
 || !de->
öode
 || 
Àn
 > 
NAME_LEN
)

83 i‡(
Àn
 < 
NAME_LEN
 && 
de
->
«me
[len])

94 
de_«me
 = 
de
->
«me
;

95 
_asm
{

96 
pushf


97 
x‹
 
óx
,eax

98 
mov
 
esi
,
«me


99 
mov
 
edi
,
de_«me


100 
mov
 
ecx
,
Àn


101 
˛d


103 
ª≥
 
cmps
 
byã
 
±r
 
fs
:[
edi
],[
esi
]

105 
£tz
 
Æ


106 
mov
 
ßme
,
óx


107 
p›f


109  
ßme
;

110 
	}
}

125 
buf„r_hód
 * 
	$föd_íåy
(
m_öode
 ** 
dú
,

126 c⁄° * 
«me
, 
«mñí
, 
dú_íåy
 ** 
ªs_dú
)

128 
íåõs
;

129 
block
,
i
;

130 
buf„r_hód
 * 
bh
;

131 
dú_íåy
 * 
de
;

132 
su≥r_block
 * 
sb
;

135 #ifde‡
NO_TRUNCATE


136 i‡(
«mñí
 > 
NAME_LEN
)

137  
NULL
;

140 i‡(
«mñí
 > 
NAME_LEN
)

141 
«mñí
 = 
NAME_LEN
;

144 
íåõs
 = (*
dú
)->
i_size
 / ( (
dú_íåy
));

145 *
ªs_dú
 = 
NULL
;

147 i‡(!
«mñí
)

148  
NULL
;

150 i‡(
«mñí
==2 && 
	`gë_fs_byã
(
«me
)=='.' && get_fs_byte(name+1)=='.') {

153 i‡((*
dú
Ë=
cuºít
->
roŸ
)

154 
«mñí
=1;

156 i‡((*
dú
)->
i_num
 =
ROOT_INO
) {

159 
sb
=
	`gë_su≥r
((*
dú
)->
i_dev
);

162 i‡(
sb
->
s_imou¡
) {

163 
	`ùut
(*
dú
);

164 (*
dú
)=
sb
->
s_imou¡
;

165 (*
dú
)->
i_cou¡
++;

170 i‡(!(
block
 = (*
dú
)->
i_z⁄e
[0]))

171  
NULL
;

173 i‡(!(
bh
 = 
	`bªad
((*
dú
)->
i_dev
,
block
)))

174  
NULL
;

177 
i
 = 0;

178 
de
 = (
dú_íåy
 *Ë
bh
->
b_d©a
;

179 
i
 < 
íåõs
) {

181 i‡((*)
de
 >
BLOCK_SIZE
+
bh
->
b_d©a
) {

182 
	`bªl£
(
bh
);

183 
bh
 = 
NULL
;

186 i‡(!(
block
 = 
	`bm≠
(*
dú
,
i
/
DIR_ENTRIES_PER_BLOCK
)) ||

187 !(
bh
 = 
	`bªad
((*
dú
)->
i_dev
,
block
))) {

188 
i
 +
DIR_ENTRIES_PER_BLOCK
;

191 
de
 = (
dú_íåy
 *Ë
bh
->
b_d©a
;

194 i‡(
	`m©ch
(
«mñí
,
«me
,
de
)) {

195 *
ªs_dú
 = 
de
;

196  
bh
;

199 
de
++;

200 
i
++;

203 
	`bªl£
(
bh
);

204  
NULL
;

205 
	}
}

220 
buf„r_hód
 * 
	$add_íåy
(
m_öode
 * 
dú
,

221 c⁄° * 
«me
, 
«mñí
, 
dú_íåy
 ** 
ªs_dú
)

223 
block
,
i
;

224 
buf„r_hód
 * 
bh
;

225 
dú_íåy
 * 
de
;

227 *
ªs_dú
 = 
NULL
;

229 #ifde‡
NO_TRUNCATE


230 i‡(
«mñí
 > 
NAME_LEN
)

231  
NULL
;

234 i‡(
«mñí
 > 
NAME_LEN
)

235 
«mñí
 = 
NAME_LEN
;

238 i‡(!
«mñí
)

239  
NULL
;

241 i‡(!(
block
 = 
dú
->
i_z⁄e
[0]))

242  
NULL
;

244 i‡(!(
bh
 = 
	`bªad
(
dú
->
i_dev
,
block
)))

245  
NULL
;

248 
i
 = 0;

249 
de
 = (
dú_íåy
 *Ë
bh
->
b_d©a
;

253 i‡((*)
de
 >
BLOCK_SIZE
+
bh
->
b_d©a
) {

254 
	`bªl£
(
bh
);

255 
bh
 = 
NULL
;

256 
block
 = 
	`¸óã_block
(
dú
,
i
/
DIR_ENTRIES_PER_BLOCK
);

257 i‡(!
block
)

258  
NULL
;

260 i‡(!(
bh
 = 
	`bªad
(
dú
->
i_dev
,
block
))) {

261 
i
 +
DIR_ENTRIES_PER_BLOCK
;

265 
de
 = (
dú_íåy
 *Ë
bh
->
b_d©a
;

271 i‡(
i
*(
dú_íåy
Ë>
dú
->
i_size
) {

272 
de
->
öode
=0;

273 
dú
->
i_size
 = (
i
+1)*(
dú_íåy
);

274 
dú
->
i_dút
 = 1;

275 
dú
->
i_˘ime
 = 
CURRENT_TIME
;

280 i‡(!
de
->
öode
) {

281 
dú
->
i_mtime
 = 
CURRENT_TIME
;

282 
i
=0; i < 
NAME_LEN
 ; i++)

283 
de
->
«me
[
i
]=(i<
«mñí
)?
	`gë_fs_byã
(name+i):0;

284 
bh
->
b_dút
 = 1;

285 *
ªs_dú
 = 
de
;

286  
bh
;

289 
de
++;

290 
i
++;

293 
	`bªl£
(
bh
);

294  
NULL
;

295 
	}
}

306 
m_öode
 * 
	$gë_dú
(c⁄° * 
∑th«me
)

308 
c
;

309 c⁄° * 
thi¢ame
;

310 
m_öode
 * 
öode
;

311 
buf„r_hód
 * 
bh
;

312 
«mñí
,
ör
,
idev
;

313 
dú_íåy
 * 
de
;

316 i‡(!
cuºít
->
roŸ
 || !cuºít->roŸ->
i_cou¡
)

317 
	`∑nic
("NoÑoot inode");

319 i‡(!
cuºít
->
pwd
 || !cuºít->pwd->
i_cou¡
)

320 
	`∑nic
("No cwd inode");

322 i‡((
c
=
	`gë_fs_byã
(
∑th«me
))=='/') {

323 
öode
 = 
cuºít
->
roŸ
;

324 
∑th«me
++;

327 } i‡(
c
)

328 
öode
 = 
cuºít
->
pwd
;

331  
NULL
;

333 
öode
->
i_cou¡
++;

336 
thi¢ame
 = 
∑th«me
;

337 i‡(!
	`S_ISDIR
(
öode
->
i_mode
Ë|| !
	`≥rmissi⁄
(öode,
MAY_EXEC
)) {

338 
	`ùut
(
öode
);

339  
NULL
;

344 
«mñí
=0;(
c
=
	`gë_fs_byã
(
∑th«me
++))&&(c!='/');namelen++)

347 i‡(!
c
)

348  
öode
;

351 i‡(!(
bh
 = 
	`föd_íåy
(&
öode
,
thi¢ame
,
«mñí
,&
de
))) {

352 
	`ùut
(
öode
);

353  
NULL
;

356 
ör
 = 
de
->
öode
;

357 
idev
 = 
öode
->
i_dev
;

358 
	`bªl£
(
bh
);

359 
	`ùut
(
öode
);

361 i‡(!(
öode
 = 
	`igë
(
idev
,
ör
)))

362  
NULL
;

364 
	}
}

373 
m_öode
 * 
	$dú_«mei
(c⁄° * 
∑th«me
,

374 * 
«mñí
, c⁄° ** 
«me
)

376 
c
;

377 c⁄° * 
ba£«me
;

378 
m_öode
 * 
dú
;

381 i‡(!(
dú
 = 
	`gë_dú
(
∑th«me
)))

382  
NULL
;

385 
ba£«me
 = 
∑th«me
;

386 
c
=
	`gë_fs_byã
(
∑th«me
++))

387 i‡(
c
=='/')

388 
ba£«me
=
∑th«me
;

389 *
«mñí
 = 
∑th«me
-
ba£«me
-1;

390 *
«me
 = 
ba£«me
;

391  
dú
;

392 
	}
}

403 
m_öode
 * 
	$«mei
(c⁄° * 
∑th«me
)

405 c⁄° * 
ba£«me
;

406 
ör
,
dev
,
«mñí
;

407 
m_öode
 * 
dú
;

408 
buf„r_hód
 * 
bh
;

409 
dú_íåy
 * 
de
;

412 i‡(!(
dú
 = 
	`dú_«mei
(
∑th«me
,&
«mñí
,&
ba£«me
)))

413  
NULL
;

415 i‡(!
«mñí
)

416  
dú
;

421 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

422 i‡(!
bh
) {

423 
	`ùut
(
dú
);

424  
NULL
;

427 
ör
 = 
de
->
öode
;

428 
dev
 = 
dú
->
i_dev
;

429 
	`bªl£
(
bh
);

430 
	`ùut
(
dú
);

432 
dú
=
	`igë
(
dev
,
ör
);

433 i‡(
dú
) {

434 
dú
->
i_©ime
=
CURRENT_TIME
;

435 
dú
->
i_dút
=1;

437  
dú
;

438 
	}
}

448 
	$›í_«mei
(c⁄° * 
∑th«me
, 
Êag
, 
mode
,

449 
m_öode
 ** 
ªs_öode
)

451 c⁄° * 
ba£«me
;

452 
ör
,
dev
,
«mñí
;

453 
m_öode
 * 
dú
, *
öode
;

454 
buf„r_hód
 * 
bh
;

455 
dú_íåy
 * 
de
;

458 i‡((
Êag
 & 
O_TRUNC
Ë&& !(Êag & 
O_ACCMODE
))

459 
Êag
 |
O_WRONLY
;

461 
mode
 &0777 & ~
cuºít
->
umask
;

462 
mode
 |
I_REGULAR
;

464 i‡(!(
dú
 = 
	`dú_«mei
(
∑th«me
,&
«mñí
,&
ba£«me
)))

465  -
ENOENT
;

468 i‡(!
«mñí
) {

469 i‡(!(
Êag
 & (
O_ACCMODE
|
O_CREAT
|
O_TRUNC
))) {

470 *
ªs_öode
=
dú
;

474 
	`ùut
(
dú
);

475  -
EISDIR
;

478 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

480 i‡(!
bh
) {

482 i‡(!(
Êag
 & 
O_CREAT
)) {

483 
	`ùut
(
dú
);

484  -
ENOENT
;

487 i‡(!
	`≥rmissi⁄
(
dú
,
MAY_WRITE
)) {

488 
	`ùut
(
dú
);

489  -
EACCES
;

492 
öode
 = 
	`√w_öode
(
dú
->
i_dev
);

493 i‡(!
öode
) {

494 
	`ùut
(
dú
);

495  -
ENOSPC
;

498 
öode
->
i_uid
 = 
cuºít
->
euid
;

499 
öode
->
i_mode
 = 
mode
;

500 
öode
->
i_dút
 = 1;

502 
bh
 = 
	`add_íåy
(
dú
,
ba£«me
,
«mñí
,&
de
);

505 i‡(!
bh
) {

506 
öode
->
i_∆öks
--;

507 
	`ùut
(
öode
);

508 
	`ùut
(
dú
);

509  -
ENOSPC
;

513 
de
->
öode
 = inode->
i_num
;

514 
bh
->
b_dút
 = 1;

515 
	`bªl£
(
bh
);

516 
	`ùut
(
dú
);

517 *
ªs_öode
 = 
öode
;

522 
ör
 = 
de
->
öode
;

523 
dev
 = 
dú
->
i_dev
;

524 
	`bªl£
(
bh
);

525 
	`ùut
(
dú
);

527 i‡(
Êag
 & 
O_EXCL
)

528  -
EEXIST
;

530 i‡(!(
öode
=
	`igë
(
dev
,
ör
)))

531  -
EACCES
;

534 i‡((
	`S_ISDIR
(
öode
->
i_mode
Ë&& (
Êag
 & 
O_ACCMODE
)) ||

535 !
	`≥rmissi⁄
(
öode
,
	`ACC_MODE
(
Êag
))) {

536 
	`ùut
(
öode
);

537  -
EPERM
;

540 
öode
->
i_©ime
 = 
CURRENT_TIME
;

542 i‡(
Êag
 & 
O_TRUNC
)

543 
	`åunˇã
(
öode
);

545 *
ªs_öode
 = 
öode
;

547 
	}
}

553 
	$sys_mknod
(c⁄° * 
fûíame
, 
mode
, 
dev
)

555 c⁄° * 
ba£«me
;

556 
«mñí
;

557 
m_öode
 * 
dú
, * 
öode
;

558 
buf„r_hód
 * 
bh
;

559 
dú_íåy
 * 
de
;

562 i‡(!
	`su£r
())

563  -
EPERM
;

565 i‡(!(
dú
 = 
	`dú_«mei
(
fûíame
,&
«mñí
,&
ba£«me
)))

566  -
ENOENT
;

569 i‡(!
«mñí
) {

570 
	`ùut
(
dú
);

571  -
ENOENT
;

574 i‡(!
	`≥rmissi⁄
(
dú
,
MAY_WRITE
)) {

575 
	`ùut
(
dú
);

576  -
EPERM
;

580 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

581 i‡(
bh
) {

582 
	`bªl£
(
bh
);

583 
	`ùut
(
dú
);

584  -
EEXIST
;

587 
öode
 = 
	`√w_öode
(
dú
->
i_dev
);

588 i‡(!
öode
) {

589 
	`ùut
(
dú
);

590  -
ENOSPC
;

594 
öode
->
i_mode
 = 
mode
;

595 i‡(
	`S_ISBLK
(
mode
Ë|| 
	`S_ISCHR
(mode))

596 
öode
->
i_z⁄e
[0] = 
dev
;

598 
öode
->
i_mtime
 = inode->
i_©ime
 = 
CURRENT_TIME
;

599 
öode
->
i_dút
 = 1;

602 
bh
 = 
	`add_íåy
(
dú
,
ba£«me
,
«mñí
,&
de
);

603 i‡(!
bh
) {

604 
	`ùut
(
dú
);

605 
öode
->
i_∆öks
=0;

606 
	`ùut
(
öode
);

607  -
ENOSPC
;

611 
de
->
öode
 = inode->
i_num
;

612 
bh
->
b_dút
 = 1;

613 
	`ùut
(
dú
);

614 
	`ùut
(
öode
);

615 
	`bªl£
(
bh
);

617 
	}
}

622 
	$sys_mkdú
(c⁄° * 
∑th«me
, 
mode
)

624 c⁄° * 
ba£«me
;

625 
«mñí
;

626 
m_öode
 * 
dú
, * 
öode
;

627 
buf„r_hód
 * 
bh
, *
dú_block
;

628 
dú_íåy
 * 
de
;

631 i‡(!
	`su£r
())

632  -
EPERM
;

634 i‡(!(
dú
 = 
	`dú_«mei
(
∑th«me
,&
«mñí
,&
ba£«me
)))

635  -
ENOENT
;

638 i‡(!
«mñí
) {

639 
	`ùut
(
dú
);

640  -
ENOENT
;

643 i‡(!
	`≥rmissi⁄
(
dú
,
MAY_WRITE
)) {

644 
	`ùut
(
dú
);

645  -
EPERM
;

649 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

650 i‡(
bh
) {

651 
	`bªl£
(
bh
);

652 
	`ùut
(
dú
);

653  -
EEXIST
;

656 
öode
 = 
	`√w_öode
(
dú
->
i_dev
);

657 i‡(!
öode
) {

658 
	`ùut
(
dú
);

659  -
ENOSPC
;

663 
öode
->
i_size
 = 32;

664 
öode
->
i_dút
 = 1;

665 
öode
->
i_mtime
 = inode->
i_©ime
 = 
CURRENT_TIME
;

668 i‡(!(
öode
->
i_z⁄e
[0]=
	`√w_block
(öode->
i_dev
))) {

669 
	`ùut
(
dú
);

670 
öode
->
i_∆öks
--;

671 
	`ùut
(
öode
);

672  -
ENOSPC
;

675 
öode
->
i_dút
 = 1;

678 i‡(!(
dú_block
=
	`bªad
(
öode
->
i_dev
,öode->
i_z⁄e
[0]))) {

679 
	`ùut
(
dú
);

680 
	`‰ì_block
(
öode
->
i_dev
,öode->
i_z⁄e
[0]);

681 
öode
->
i_∆öks
--;

682 
	`ùut
(
öode
);

683  -
ERROR
;

686 
de
 = (
dú_íåy
 *Ë
dú_block
->
b_d©a
;

687 
de
->
öode
=öode->
i_num
;

688 
	`°r˝y
(
de
->
«me
,".");

690 
de
++;

691 
de
->
öode
 = 
dú
->
i_num
;

692 
	`°r˝y
(
de
->
«me
,"..");

693 
öode
->
i_∆öks
 = 2;

695 
dú_block
->
b_dút
 = 1;

696 
	`bªl£
(
dú_block
);

698 
öode
->
i_mode
 = 
I_DIRECTORY
 | (
mode
 & 0777 & ~
cuºít
->
umask
);

699 
öode
->
i_dút
 = 1;

702 
bh
 = 
	`add_íåy
(
dú
,
ba£«me
,
«mñí
,&
de
);

703 i‡(!
bh
) {

704 
	`ùut
(
dú
);

705 
	`‰ì_block
(
öode
->
i_dev
,öode->
i_z⁄e
[0]);

706 
öode
->
i_∆öks
=0;

707 
	`ùut
(
öode
);

708  -
ENOSPC
;

712 
de
->
öode
 = inode->
i_num
;

713 
bh
->
b_dút
 = 1;

714 
dú
->
i_∆öks
++;

715 
dú
->
i_dút
 = 1;

716 
	`ùut
(
dú
);

717 
	`ùut
(
öode
);

718 
	`bªl£
(
bh
);

720 
	}
}

728 
	$em±y_dú
(
m_öode
 * 
öode
)

730 
ƒ
,
block
;

731 
Àn
;

732 
buf„r_hód
 * 
bh
;

733 
dú_íåy
 * 
de
;

736 
Àn
 = 
öode
->
i_size
 /  (
dú_íåy
);

739 i‡(
Àn
<2 || !
öode
->
i_z⁄e
[0] ||

740 !(
bh
=
	`bªad
(
öode
->
i_dev
,öode->
i_z⁄e
[0]))) {

741 
	`¥ötk
("w¨nög - bad dúe˘‹y o¿dev %04x\n",
öode
->
i_dev
);

745 
de
 = (
dú_íåy
 *Ë
bh
->
b_d©a
;

749 i‡(
de
[0].
öode
 !öode->
i_num
 || !de[1].inode ||

750 
	`°rcmp
(".",
de
[0].
«me
) || strcmp("..",de[1].name)) {

751 
	`¥ötk
("w¨nög - bad dúe˘‹y o¿dev %04x\n",
öode
->
i_dev
);

755 
ƒ
 = 2;

756 
de
 += 2;

758 
ƒ
<
Àn
) {

762 i‡((*Ë
de
 >(*Ë(
bh
->
b_d©a
+
BLOCK_SIZE
)) {

763 
	`bªl£
(
bh
);

764 
block
=
	`bm≠
(
öode
,
ƒ
/
DIR_ENTRIES_PER_BLOCK
);

765 i‡(!
block
) {

766 
ƒ
 +
DIR_ENTRIES_PER_BLOCK
;

769 i‡(!(
bh
=
	`bªad
(
öode
->
i_dev
,
block
)))

771 
de
 = (
dú_íåy
 *Ë
bh
->
b_d©a
;

775 i‡(
de
->
öode
) {

776 
	`bªl£
(
bh
);

780 
de
++;

781 
ƒ
++;

784 
	`bªl£
(
bh
);

786 
	}
}

791 
	$sys_rmdú
(c⁄° * 
«me
)

793 c⁄° * 
ba£«me
;

794 
«mñí
;

795 
m_öode
 * 
dú
, * 
öode
;

796 
buf„r_hód
 * 
bh
;

797 
dú_íåy
 * 
de
;

800 i‡(!
	`su£r
())

801  -
EPERM
;

803 i‡(!(
dú
 = 
	`dú_«mei
(
«me
,&
«mñí
,&
ba£«me
)))

804  -
ENOENT
;

807 i‡(!
«mñí
) {

808 
	`ùut
(
dú
);

809  -
ENOENT
;

812 i‡(!
	`≥rmissi⁄
(
dú
,
MAY_WRITE
)) {

813 
	`ùut
(
dú
);

814  -
EPERM
;

819 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

820 i‡(!
bh
) {

821 
	`ùut
(
dú
);

822  -
ENOENT
;

826 i‡(!(
öode
 = 
	`igë
(
dú
->
i_dev
, 
de
->inode))) {

827 
	`ùut
(
dú
);

828 
	`bªl£
(
bh
);

829  -
EPERM
;

834 i‡((
dú
->
i_mode
 & 
S_ISVTX
Ë&& 
cuºít
->
euid
 &&

835 
öode
->
i_uid
 !
cuºít
->
euid
) {

836 
	`ùut
(
dú
);

837 
	`ùut
(
öode
);

838 
	`bªl£
(
bh
);

839  -
EPERM
;

844 i‡(
öode
->
i_dev
 !
dú
->i_dev || inode->
i_cou¡
>1) {

845 
	`ùut
(
dú
);

846 
	`ùut
(
öode
);

847 
	`bªl£
(
bh
);

848  -
EPERM
;

853 i‡(
öode
 =
dú
) {

854 
	`ùut
(
öode
);

855 
	`ùut
(
dú
);

856 
	`bªl£
(
bh
);

857  -
EPERM
;

861 i‡(!
	`S_ISDIR
(
öode
->
i_mode
)) {

862 
	`ùut
(
öode
);

863 
	`ùut
(
dú
);

864 
	`bªl£
(
bh
);

865  -
ENOTDIR
;

869 i‡(!
	`em±y_dú
(
öode
)) {

870 
	`ùut
(
öode
);

871 
	`ùut
(
dú
);

872 
	`bªl£
(
bh
);

873  -
ENOTEMPTY
;

876 i‡(
öode
->
i_∆öks
 != 2)

877 
	`¥ötk
("em±y dúe˘‹y ha†∆ök!=2 (%d)",
öode
->
i_∆öks
);

880 
de
->
öode
 = 0;

881 
bh
->
b_dút
 = 1;

882 
	`bªl£
(
bh
);

884 
öode
->
i_∆öks
=0;

885 
öode
->
i_dút
=1;

888 
dú
->
i_∆öks
--;

889 
dú
->
i_˘ime
 = dú->
i_mtime
 = 
CURRENT_TIME
;

890 
dú
->
i_dút
=1;

892 
	`ùut
(
dú
);

893 
	`ùut
(
öode
);

895 
	}
}

902 
	$sys_u∆ök
(c⁄° * 
«me
)

904 c⁄° * 
ba£«me
;

905 
«mñí
;

906 
m_öode
 * 
dú
, * 
öode
;

907 
buf„r_hód
 * 
bh
;

908 
dú_íåy
 * 
de
;

911 i‡(!(
dú
 = 
	`dú_«mei
(
«me
,&
«mñí
,&
ba£«me
)))

912  -
ENOENT
;

915 i‡(!
«mñí
) {

916 
	`ùut
(
dú
);

917  -
ENOENT
;

920 i‡(!
	`≥rmissi⁄
(
dú
,
MAY_WRITE
)) {

921 
	`ùut
(
dú
);

922  -
EPERM
;

927 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

928 i‡(!
bh
) {

929 
	`ùut
(
dú
);

930  -
ENOENT
;

934 i‡(!(
öode
 = 
	`igë
(
dú
->
i_dev
, 
de
->inode))) {

935 
	`ùut
(
dú
);

936 
	`bªl£
(
bh
);

937  -
ENOENT
;

942 i‡((
dú
->
i_mode
 & 
S_ISVTX
Ë&& !
	`su£r
() &&

943 
cuºít
->
euid
 !
öode
->
i_uid
 &&

944 
cuºít
->
euid
 !
dú
->
i_uid
) {

945 
	`ùut
(
dú
);

946 
	`ùut
(
öode
);

947 
	`bªl£
(
bh
);

948  -
EPERM
;

952 i‡(
	`S_ISDIR
(
öode
->
i_mode
)) {

953 
	`ùut
(
öode
);

954 
	`ùut
(
dú
);

955 
	`bªl£
(
bh
);

956  -
EPERM
;

959 i‡(!
öode
->
i_∆öks
) {

960 
	`¥ötk
("DeletingÇonexistent file (%04x:%d), %d\n",

961 
öode
->
i_dev
,öode->
i_num
,öode->
i_∆öks
);

962 
öode
->
i_∆öks
=1;

966 
de
->
öode
 = 0;

967 
bh
->
b_dút
 = 1;

968 
	`bªl£
(
bh
);

971 
öode
->
i_∆öks
--;

972 
öode
->
i_dút
 = 1;

973 
öode
->
i_˘ime
 = 
CURRENT_TIME
;

974 
	`ùut
(
öode
);

975 
	`ùut
(
dú
);

977 
	}
}

983 
	$sys_lök
(c⁄° * 
ﬁd«me
, c⁄° * 
√w«me
)

985 
dú_íåy
 * 
de
;

986 
m_öode
 * 
ﬁdöode
, * 
dú
;

987 
buf„r_hód
 * 
bh
;

988 c⁄° * 
ba£«me
;

989 
«mñí
;

992 
ﬁdöode
=
	`«mei
(
ﬁd«me
);

993 i‡(!
ﬁdöode
)

994  -
ENOENT
;

996 i‡(
	`S_ISDIR
(
ﬁdöode
->
i_mode
)) {

997 
	`ùut
(
ﬁdöode
);

998  -
EPERM
;

1002 
dú
 = 
	`dú_«mei
(
√w«me
,&
«mñí
,&
ba£«me
);

1003 i‡(!
dú
) {

1004 
	`ùut
(
ﬁdöode
);

1005  -
EACCES
;

1008 i‡(!
«mñí
) {

1009 
	`ùut
(
ﬁdöode
);

1010 
	`ùut
(
dú
);

1011  -
EPERM
;

1015 i‡(
dú
->
i_dev
 !
ﬁdöode
->i_dev) {

1016 
	`ùut
(
dú
);

1017 
	`ùut
(
ﬁdöode
);

1018  -
EXDEV
;

1022 i‡(!
	`≥rmissi⁄
(
dú
,
MAY_WRITE
)) {

1023 
	`ùut
(
dú
);

1024 
	`ùut
(
ﬁdöode
);

1025  -
EACCES
;

1029 
bh
 = 
	`föd_íåy
(&
dú
,
ba£«me
,
«mñí
,&
de
);

1030 i‡(
bh
) {

1031 
	`bªl£
(
bh
);

1032 
	`ùut
(
dú
);

1033 
	`ùut
(
ﬁdöode
);

1034  -
EEXIST
;

1037 
bh
 = 
	`add_íåy
(
dú
,
ba£«me
,
«mñí
,&
de
);

1038 i‡(!
bh
) {

1039 
	`ùut
(
dú
);

1040 
	`ùut
(
ﬁdöode
);

1041  -
ENOSPC
;

1045 
de
->
öode
 = 
ﬁdöode
->
i_num
;

1046 
bh
->
b_dút
 = 1;

1047 
	`bªl£
(
bh
);

1048 
	`ùut
(
dú
);

1051 
ﬁdöode
->
i_∆öks
++;

1052 
ﬁdöode
->
i_˘ime
 = 
CURRENT_TIME
;

1053 
ﬁdöode
->
i_dút
 = 1;

1054 
	`ùut
(
ﬁdöode
);

1056 
	}
}

	@fs/open.c

6 
	~<£t_£g.h
>

8 
	~<°rög.h
>

9 
	~<î∫o.h
>

10 
	~<f˙é.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<utime.h
>

13 
	~<sys/°©.h
>

15 
	~<löux/sched.h
>

17 
	~<löux/ây.h
>

18 
	~<löux/kî√l.h
>

19 
	~<asm/£gmít.h
>

22 
	$sys_u°©
(
dev
, 
u°©
 * 
ubuf
)

24  -
ENOSYS
;

25 
	}
}

31 
	$sys_utime
(* 
fûíame
, 
utimbuf
 * 
times
)

33 
m_öode
 * 
öode
;

34 
a˘ime
,
modtime
;

37 i‡(!(
öode
=
	`«mei
(
fûíame
)))

38  -
ENOENT
;

40 i‡(
times
) {

41 
a˘ime
 = 
	`gë_fs_l⁄g
((*Ë&
times
->actime);

42 
modtime
 = 
	`gë_fs_l⁄g
((*Ë&
times
->modtime);

45 
a˘ime
 = 
modtime
 = 
CURRENT_TIME
;

47 
öode
->
i_©ime
 = 
a˘ime
;

48 
öode
->
i_mtime
 = 
modtime
;

50 
öode
->
i_dút
 = 1;

51 
	`ùut
(
öode
);

53 
	}
}

62 
	$sys_ac˚ss
(c⁄° * 
fûíame
,
mode
)

64 
m_öode
 * 
öode
;

65 
ªs
, 
i_mode
;

68 
mode
 &= 0007;

70 i‡(!(
öode
=
	`«mei
(
fûíame
)))

71  -
EACCES
;

73 
i_mode
 = 
ªs
 = 
öode
->i_mode & 0777;

74 
	`ùut
(
öode
);

76 i‡(
cuºít
->
uid
 =
öode
->
i_uid
)

77 
ªs
 >>= 6;

79 i‡(
cuºít
->
gid
 =
öode
->
i_gid
)

80 
ªs
 >>= 6;

82 i‡((
ªs
 & 0007 & 
mode
) == mode)

90 i‡((!
cuºít
->
uid
) &&

91 (!(
mode
 & 1Ë|| (
i_mode
 & 0111)))

94  -
EACCES
;

95 
	}
}

100 
	$sys_chdú
(c⁄° * 
fûíame
)

102 
m_öode
 * 
öode
;

105 i‡(!(
öode
 = 
	`«mei
(
fûíame
)))

106  -
ENOENT
;

108 i‡(!
	`S_ISDIR
(
öode
->
i_mode
)) {

109 
	`ùut
(
öode
);

110  -
ENOTDIR
;

113 
	`ùut
(
cuºít
->
pwd
);

114 
cuºít
->
pwd
 = 
öode
;

116 
	}
}

121 
	$sys_chroŸ
(c⁄° * 
fûíame
)

123 
m_öode
 * 
öode
;

126 i‡(!(
öode
=
	`«mei
(
fûíame
)))

127  -
ENOENT
;

129 i‡(!
	`S_ISDIR
(
öode
->
i_mode
)) {

130 
	`ùut
(
öode
);

131  -
ENOTDIR
;

134 
	`ùut
(
cuºít
->
roŸ
);

135 
cuºít
->
roŸ
 = 
öode
;

137 
	}
}

142 
	$sys_chmod
(c⁄° * 
fûíame
,
mode
)

144 
m_öode
 * 
öode
;

147 i‡(!(
öode
=
	`«mei
(
fûíame
)))

148  -
ENOENT
;

151 i‡((
cuºít
->
euid
 !
öode
->
i_uid
Ë&& !
	`su£r
()) {

152 
	`ùut
(
öode
);

153  -
EACCES
;

156 
öode
->
i_mode
 = (
mode
 & 07777) | (inode->i_mode & ~07777);

157 
öode
->
i_dút
 = 1;

158 
	`ùut
(
öode
);

160 
	}
}

165 
	$sys_chown
(c⁄° * 
fûíame
,
uid
,
gid
)

167 
m_öode
 * 
öode
;

170 i‡(!(
öode
=
	`«mei
(
fûíame
)))

171  -
ENOENT
;

173 i‡(!
	`su£r
()) {

174 
	`ùut
(
öode
);

175  -
EACCES
;

178 
öode
->
i_uid
=
uid
;

179 
öode
->
i_gid
=
gid
;

180 
öode
->
i_dút
=1;

181 
	`ùut
(
öode
);

183 
	}
}

192 
	$sys_›í
(c⁄° * 
fûíame
,
Êag
,
mode
)

194 
m_öode
 * 
öode
;

195 
fûe
 * 
f
;

196 
i
,
fd
;

199 
mode
 &0777 & ~
cuºít
->
umask
;

201 
fd
=0 ; fd<
NR_OPEN
 ; fd++)

202 i‡(!
cuºít
->
fûp
[
fd
])

204 i‡(
fd
>=
NR_OPEN
)

205  -
EINVAL
;

207 
cuºít
->
˛o£_⁄_exec
 &~(1<<
fd
);

210 
f
=0+
fûe_èbÀ
;

211 
i
=0 ; i<
NR_FILE
 ; i++,
f
++)

212 i‡(!
f
->
f_cou¡
) ;

213 i‡(
i
>=
NR_FILE
)

214  -
EINVAL
;

216 (
cuºít
->
fûp
[
fd
]=
f
)->
f_cou¡
++;

218 i‡((
i
=
	`›í_«mei
(
fûíame
,
Êag
,
mode
,&
öode
))<0) {

219 
cuºít
->
fûp
[
fd
]=
NULL
;

220 
f
->
f_cou¡
=0;

221  
i
;

226 i‡(
	`S_ISCHR
(
öode
->
i_mode
))

227 i‡(
	`MAJOR
(
öode
->
i_z⁄e
[0])==4) {

228 i‡(
cuºít
->
Àadî
 && cuºít->
ây
<0) {

229 
cuºít
->
ây
 = 
	`MINOR
(
öode
->
i_z⁄e
[0]);

230 
ây_èbÀ
[
cuºít
->
ây
].
pgΩ
 = current->pgrp;

234 } i‡(
	`MAJOR
(
öode
->
i_z⁄e
[0])==5)

235 i‡(
cuºít
->
ây
<0) {

236 
	`ùut
(
öode
);

237 
cuºít
->
fûp
[
fd
]=
NULL
;

238 
f
->
f_cou¡
=0;

239  -
EPERM
;

244 i‡(
	`S_ISBLK
(
öode
->
i_mode
))

245 
	`check_disk_ch™ge
(
öode
->
i_z⁄e
[0]);

248 
f
->
f_mode
 = 
öode
->
i_mode
;

249 
f
->
f_Êags
 = 
Êag
;

250 
f
->
f_cou¡
 = 1;

251 
f
->
f_öode
 = 
öode
;

252 
f
->
f_pos
 = 0;

253  (
fd
);

254 
	}
}

259 
	$sys_¸ót
(c⁄° * 
∑th«me
, 
mode
)

261  
	`sys_›í
(
∑th«me
, 
O_CREAT
 | 
O_TRUNC
, 
mode
);

262 
	}
}

267 
	$sys_˛o£
(
fd
)

269 
fûe
 * 
fûp
;

272 i‡(
fd
 >
NR_OPEN
)

273  -
EINVAL
;

275 
cuºít
->
˛o£_⁄_exec
 &~(1<<
fd
);

277 i‡(!(
fûp
 = 
cuºít
->fûp[
fd
]))

278  -
EINVAL
;

280 
cuºít
->
fûp
[
fd
] = 
NULL
;

282 i‡(
fûp
->
f_cou¡
 == 0)

283 
	`∑nic
("Close: file count is 0");

286 i‡(--
fûp
->
f_cou¡
)

288 
	`ùut
(
fûp
->
f_öode
);

290 
	}
}

	@fs/pipe.c

6 
	~<£t_£g.h
>

8 
	~<sig«l.h
>

10 
	~<löux/sched.h
>

12 
	~<löux/mm.h
>

14 
	~<asm/£gmít.h
>

18 
	$ªad_pùe
(
m_öode
 * 
öode
, * 
buf
, 
cou¡
)

20 
ch¨s
, 
size
, 
ªad
 = 0;

23 
cou¡
>0) {

26 !(
size
=
	`PIPE_SIZE
(*
öode
))) {

27 
	`wake_up
(&
öode
->
i_waô
);

28 i‡(
öode
->
i_cou¡
 != 2)

29  
ªad
;

30 
	`¶ìp_⁄
(&
öode
->
i_waô
);

34 
ch¨s
 = 
PAGE_SIZE
-
	`PIPE_TAIL
(*
öode
);

35 i‡(
ch¨s
 > 
cou¡
)

36 
ch¨s
 = 
cou¡
;

37 i‡(
ch¨s
 > 
size
)

38 
ch¨s
 = 
size
;

40 
cou¡
 -
ch¨s
;

41 
ªad
 +
ch¨s
;

43 
size
 = 
	`PIPE_TAIL
(*
öode
);

44 
	`PIPE_TAIL
(*
öode
Ë+
ch¨s
;

45 
	`PIPE_TAIL
(*
öode
Ë&(
PAGE_SIZE
-1);

47 
ch¨s
-->0)

48 
	`put_fs_byã
(((*)
öode
->
i_size
)[
size
++],
buf
++);

51 
	`wake_up
(&
öode
->
i_waô
);

52  
ªad
;

53 
	}
}

57 
	$wrôe_pùe
(
m_öode
 * 
öode
, * 
buf
, 
cou¡
)

59 
ch¨s
, 
size
, 
wrôãn
 = 0;

62 
cou¡
>0) {

66 !(
size
=(
PAGE_SIZE
-1)-
	`PIPE_SIZE
(*
öode
))) {

67 
	`wake_up
(&
öode
->
i_waô
);

68 i‡(
öode
->
i_cou¡
 != 2) {

69 
cuºít
->
sig«l
 |(1<<(
SIGPIPE
-1));

70  
wrôãn
?written:-1;

72 
	`¶ìp_⁄
(&
öode
->
i_waô
);

76 
ch¨s
 = 
PAGE_SIZE
-
	`PIPE_HEAD
(*
öode
);

77 i‡(
ch¨s
 > 
cou¡
)

78 
ch¨s
 = 
cou¡
;

79 i‡(
ch¨s
 > 
size
)

80 
ch¨s
 = 
size
;

82 
cou¡
 -
ch¨s
;

83 
wrôãn
 +
ch¨s
;

85 
size
 = 
	`PIPE_HEAD
(*
öode
);

86 
	`PIPE_HEAD
(*
öode
Ë+
ch¨s
;

87 
	`PIPE_HEAD
(*
öode
Ë&(
PAGE_SIZE
-1);

89 
ch¨s
-->0)

90 ((*)
öode
->
i_size
)[
size
++]=
	`gë_fs_byã
(
buf
++);

93 
	`wake_up
(&
öode
->
i_waô
);

94  
wrôãn
;

95 
	}
}

101 
	$sys_pùe
(* 
fûdes
)

103 
m_öode
 * 
öode
;

104 
fûe
 * 
f
[2];

105 
fd
[2];

106 
i
,
j
;

109 
j
=0;

110 
i
=0;
j
<2 && i<
NR_FILE
;i++)

111 i‡(!
fûe_èbÀ
[
i
].
f_cou¡
)

112 (
f
[
j
++]=
i
+
fûe_èbÀ
)->
f_cou¡
++;

114 i‡(
j
==1)

115 
f
[0]->
f_cou¡
=0;

117 i‡(
j
<2)

121 
j
=0;

122 
i
=0;
j
<2 && i<
NR_OPEN
;i++)

123 i‡(!
cuºít
->
fûp
[
i
]) {

124 
cuºít
->
fûp
[ 
fd
[
j
]=
i
 ] = 
f
[j];

125 
j
++;

128 i‡(
j
==1)

129 
cuºít
->
fûp
[
fd
[0]]=
NULL
;

131 i‡(
j
<2) {

132 
f
[0]->
f_cou¡
=f[1]->f_count=0;

137 i‡(!(
öode
=
	`gë_pùe_öode
())) {

138 
cuºít
->
fûp
[
fd
[0]] =

139 
cuºít
->
fûp
[
fd
[1]] = 
NULL
;

140 
f
[0]->
f_cou¡
 = f[1]->f_count = 0;

145 
f
[0]->
f_öode
 = f[1]->f_öodê
öode
;

146 
f
[0]->
f_pos
 = f[1]->f_pos = 0;

147 
f
[0]->
f_mode
 = 1;

148 
f
[1]->
f_mode
 = 2;

150 
	`put_fs_l⁄g
(
fd
[0],0+
fûdes
);

151 
	`put_fs_l⁄g
(
fd
[1],1+
fûdes
);

153 
	}
}

	@fs/read_write.c

6 
	~<£t_£g.h
>

8 
	~<sys/°©.h
>

9 
	~<î∫o.h
>

10 
	~<sys/ty≥s.h
>

12 
	~<löux/kî√l.h
>

13 
	~<löux/sched.h
>

15 
	~<asm/£gmít.h
>

18 
rw_ch¨
 (
rw
, 
dev
, *
buf
, 
cou¡
, 
off_t
 * 
pos
);

20 
ªad_pùe
 (
m_öode
 *
öode
, *
buf
, 
cou¡
);

22 
wrôe_pùe
 (
m_öode
 *
öode
, *
buf
, 
cou¡
);

24 
block_ªad
 (
dev
, 
off_t
 * 
pos
, *
buf
, 
cou¡
);

26 
block_wrôe
 (
dev
, 
off_t
 * 
pos
, *
buf
, 
cou¡
);

28 
fûe_ªad
 (
m_öode
 *
öode
, 
fûe
 *
fûp
,

29 *
buf
, 
cou¡
);

31 
fûe_wrôe
 (
m_öode
 *
öode
, 
fûe
 *
fûp
,

32 *
buf
, 
cou¡
);

37 
	$sys_l£ek
 (
fd
, 
off_t
 
off£t
, 
‹igö
)

39 
fûe
 *file;

40 
tmp
;

44 i‡(
fd
 >
NR_OPEN
 || !(
fûe
 = 
cuºít
->
fûp
[fd]Ë|| !(fûe->
f_öode
)

45 || !
	`IS_SEEKABLE
 (
	`MAJOR
 (
fûe
->
f_öode
->
i_dev
)))

46  -
EBADF
;

48 i‡(
fûe
->
f_öode
->
i_pùe
)

49  -
ESPIPE
;

51 
‹igö
)

56 i‡(
off£t
 < 0)

57  -
EINVAL
;

58 
fûe
->
f_pos
 = 
off£t
;

63 i‡(
fûe
->
f_pos
 + 
off£t
 < 0)

64  -
EINVAL
;

65 
fûe
->
f_pos
 +
off£t
;

70 i‡((
tmp
 = 
fûe
->
f_öode
->
i_size
 + 
off£t
) < 0)

71  -
EINVAL
;

72 
fûe
->
f_pos
 = 
tmp
;

76  -
EINVAL
;

78  
fûe
->
f_pos
;

79 
	}
}

83 
	$sys_ªad
 (
fd
, *
buf
, 
cou¡
)

85 
fûe
 *file;

86 
m_öode
 *
öode
;

90 i‡(
fd
 >
NR_OPEN
 || 
cou¡
 < 0 || !(
fûe
 = 
cuºít
->
fûp
[fd]))

91  -
EINVAL
;

93 i‡(!
cou¡
)

96 
	`vîify_¨ó
 (
buf
, 
cou¡
);

99 
öode
 = 
fûe
->
f_öode
;

100 i‡(
öode
->
i_pùe
)

101  (
fûe
->
f_mode
 & 1Ë? 
	`ªad_pùe
 (
öode
, 
buf
, 
cou¡
Ë: -
EIO
;

103 i‡(
	`S_ISCHR
 (
öode
->
i_mode
))

104  
	`rw_ch¨
 (
READ
, 
öode
->
i_z⁄e
[0], 
buf
, 
cou¡
, &
fûe
->
f_pos
);

106 i‡(
	`S_ISBLK
 (
öode
->
i_mode
))

107  
	`block_ªad
 (
öode
->
i_z⁄e
[0], &
fûe
->
f_pos
, 
buf
, 
cou¡
);

111 i‡(
	`S_ISDIR
 (
öode
->
i_mode
Ë|| 
	`S_ISREG
 (inode->i_mode))

113 i‡(
cou¡
 + 
fûe
->
f_pos
 > 
öode
->
i_size
)

114 
cou¡
 = 
öode
->
i_size
 - 
fûe
->
f_pos
;

115 i‡(
cou¡
 <= 0)

117  
	`fûe_ªad
 (
öode
, 
fûe
, 
buf
, 
cou¡
);

120 
	`¥ötk
 ("(Ród)öode->i_mode=%06o\n\r", 
öode
->
i_mode
);

121  -
EINVAL
;

122 
	}
}

124 
	$sys_wrôe
 (
fd
, *
buf
, 
cou¡
)

126 
fûe
 *file;

127 
m_öode
 *
öode
;

131 i‡(
fd
 >
NR_OPEN
 || 
cou¡
 < 0 || !(
fûe
 = 
cuºít
->
fûp
[fd]))

132  -
EINVAL
;

134 i‡(!
cou¡
)

138 
öode
 = 
fûe
->
f_öode
;

139 i‡(
öode
->
i_pùe
)

140  (
fûe
->
f_mode
 & 2Ë? 
	`wrôe_pùe
 (
öode
, 
buf
, 
cou¡
Ë: -
EIO
;

142 i‡(
	`S_ISCHR
 (
öode
->
i_mode
))

143  
	`rw_ch¨
 (
WRITE
, 
öode
->
i_z⁄e
[0], 
buf
, 
cou¡
, &
fûe
->
f_pos
);

145 i‡(
	`S_ISBLK
 (
öode
->
i_mode
))

146  
	`block_wrôe
 (
öode
->
i_z⁄e
[0], &
fûe
->
f_pos
, 
buf
, 
cou¡
);

148 i‡(
	`S_ISREG
 (
öode
->
i_mode
))

149  
	`fûe_wrôe
 (
öode
, 
fûe
, 
buf
, 
cou¡
);

151 
	`¥ötk
 ("(Wrôe)öode->i_mode=%06o\n\r", 
öode
->
i_mode
);

152  -
EINVAL
;

153 
	}
}

	@fs/stat.c

6 
	~<£t_£g.h
>

8 
	~<î∫o.h
>

9 
	~<sys/°©.h
>

11 
	~<löux/fs.h
>

12 
	~<löux/sched.h
>

14 
	~<löux/kî√l.h
>

15 
	~<asm/£gmít.h
>

20 
	$˝_°©
 (
m_öode
 *
öode
, 
°©
 *
°©buf
)

22 
°©
 
tmp
;

23 
i
;

26 
	`vîify_¨ó
 (
°©buf
,  (*statbuf));

28 
tmp
.
°_dev
 = 
öode
->
i_dev
;

29 
tmp
.
°_öo
 = 
öode
->
i_num
;

30 
tmp
.
°_mode
 = 
öode
->
i_mode
;

31 
tmp
.
°_∆ök
 = 
öode
->
i_∆öks
;

32 
tmp
.
°_uid
 = 
öode
->
i_uid
;

33 
tmp
.
°_gid
 = 
öode
->
i_gid
;

34 
tmp
.
°_rdev
 = 
öode
->
i_z⁄e
[0];

35 
tmp
.
°_size
 = 
öode
->
i_size
;

36 
tmp
.
°_©ime
 = 
öode
->
i_©ime
;

37 
tmp
.
°_mtime
 = 
öode
->
i_mtime
;

38 
tmp
.
°_˘ime
 = 
öode
->
i_˘ime
;

40 
i
 = 0; i <  (
tmp
); i++)

41 
	`put_fs_byã
 (((*Ë&
tmp
)[
i
], &((*Ë
°©buf
)[i]);

42 
	}
}

48 
	$sys_°©
 (*
fûíame
, 
°©
 *
°©buf
)

50 
m_öode
 *
öode
;

53 i‡(!(
öode
 = 
	`«mei
 (
fûíame
)))

54  -
ENOENT
;

56 
	`˝_°©
 (
öode
, 
°©buf
);

57 
	`ùut
 (
öode
);

59 
	}
}

65 
	$sys_f°©
 (
fd
, 
°©
 *
°©buf
)

67 
fûe
 *
f
;

68 
m_öode
 *
öode
;

72 i‡(
fd
 >
NR_OPEN
 || !(
f
 = 
cuºít
->
fûp
[fd]Ë|| !(
öode
 = f->
f_öode
))

73  -
EBADF
;

75 
	`˝_°©
 (
öode
, 
°©buf
);

77 
	}
}

	@fs/super.c

6 
	~<£t_£g.h
>

11 
	~<löux/c⁄fig.h
>

12 
	~<löux/sched.h
>

14 
	~<löux/kî√l.h
>

15 
	~<asm/sy°em.h
>

17 
	~<î∫o.h
>

18 
	~<sys/°©.h
>

20 
sync_dev
 (
dev
);

21 
waô_f‹_key¥ess
 ();

31 
_ölöe
 
	$£t_bô
(
bôƒ
,* 
addr
)

34 
_asm
{

35 
x‹
 
óx
,eax

36 
mov
 
ebx
,
bôƒ


37 
mov
 
edx
,
addr


38 
bt
 [
edx
],
ebx


39 
£tb
 
Æ


43 
	}
}

45 
su≥r_block
 su≥r_block[
NR_SUPER
] = {0};

48 
	gROOT_DEV
;

52 
	$lock_su≥r
 (
su≥r_block
 *
sb
)

54 
	`˛i
 ();

55 
sb
->
s_lock
)

56 
	`¶ìp_⁄
 (&(
sb
->
s_waô
));

57 
sb
->
s_lock
 = 1;

58 
	`°i
 ();

59 
	}
}

63 
	$‰ì_su≥r
 (
su≥r_block
 *
sb
)

65 
	`˛i
 ();

66 
sb
->
s_lock
 = 0;

67 
	`wake_up
 (&(
sb
->
s_waô
));

68 
	`°i
 ();

69 
	}
}

73 
	$waô_⁄_su≥r
 (
su≥r_block
 *
sb
)

75 
	`˛i
 ();

76 
sb
->
s_lock
)

77 
	`¶ìp_⁄
 (&(
sb
->
s_waô
));

78 
	`°i
 ();

79 
	}
}

82 
su≥r_block
 *

83 
	$gë_su≥r
 (
dev
)

85 
su≥r_block
 *
s
;

88 i‡(!
dev
)

89  
NULL
;

91 
s
 = 0 + 
su≥r_block
;

92 
s
 < 
NR_SUPER
 + 
su≥r_block
)

97 i‡(
s
->
s_dev
 =
dev
)

99 
	`waô_⁄_su≥r
 (
s
);

100 i‡(
s
->
s_dev
 =
dev
)

101  
s
;

102 
s
 = 0 + 
su≥r_block
;

106 
s
++;

107  
NULL
;

108 
	}
}

115 
	$put_su≥r
 (
dev
)

117 
su≥r_block
 *
sb
;

119 
i
;

122 i‡(
dev
 =
ROOT_DEV
)

124 
	`¥ötk
 ("root diskette changed:Örepare forármageddon\n\r");

128 i‡(!(
sb
 = 
	`gë_su≥r
 (
dev
)))

131 i‡(
sb
->
s_imou¡
)

133 
	`¥ötk
 ("Mounted disk changed -Åssk,Åssk\n\r");

138 
	`lock_su≥r
 (
sb
);

139 
sb
->
s_dev
 = 0;

141 
i
 = 0; i < 
I_MAP_SLOTS
; i++)

142 
	`bªl£
 (
sb
->
s_im≠
[
i
]);

143 
i
 = 0; i < 
Z_MAP_SLOTS
; i++)

144 
	`bªl£
 (
sb
->
s_zm≠
[
i
]);

146 
	`‰ì_su≥r
 (
sb
);

148 
	}
}

152 
su≥r_block
 *

153 
	$ªad_su≥r
 (
dev
)

155 
su≥r_block
 *
s
;

156 
buf„r_hód
 *
bh
;

157 
i
, 
block
;

160 i‡(!
dev
)

161  
NULL
;

164 
	`check_disk_ch™ge
 (
dev
);

166 i‡(
s
 = 
	`gë_su≥r
 (
dev
))

167  
s
;

169 
s
 = 0 + 
su≥r_block
;; s++)

171 i‡(
s
 >
NR_SUPER
 + 
su≥r_block
)

172  
NULL
;

173 i‡(!
s
->
s_dev
)

177 
s
->
s_dev
 = 
dev
;

178 
s
->
s_isup
 = 
NULL
;

179 
s
->
s_imou¡
 = 
NULL
;

180 
s
->
s_time
 = 0;

181 
s
->
s_rd_⁄ly
 = 0;

182 
s
->
s_dút
 = 0;

185 
	`lock_su≥r
 (
s
);

186 i‡(!(
bh
 = 
	`bªad
 (
dev
, 1)))

188 
s
->
s_dev
 = 0;

189 
	`‰ì_su≥r
 (
s
);

190  
NULL
;

193 *((
d_su≥r_block
 *Ë
s
Ë*((d_su≥r_block *Ë
bh
->
b_d©a
);

194 
	`bªl£
 (
bh
);

198 i‡(
s
->
s_magic
 !
SUPER_MAGIC
)

200 
s
->
s_dev
 = 0;

201 
	`‰ì_su≥r
 (
s
);

202  
NULL
;

205 
i
 = 0; i < 
I_MAP_SLOTS
; i++)

206 
s
->
s_im≠
[
i
] = 
NULL
;

207 
i
 = 0; i < 
Z_MAP_SLOTS
; i++)

208 
s
->
s_zm≠
[
i
] = 
NULL
;

210 
block
 = 2;

211 
i
 = 0; i < 
s
->
s_im≠_blocks
; i++)

212 i‡(
s
->
s_im≠
[
i
] = 
	`bªad
 (
dev
, 
block
))

213 
block
++;

216 
i
 = 0; i < 
s
->
s_zm≠_blocks
; i++)

217 i‡(
s
->
s_zm≠
[
i
] = 
	`bªad
 (
dev
, 
block
))

218 
block
++;

223 i‡(
block
 !2 + 
s
->
s_im≠_blocks
 + s->
s_zm≠_blocks
)

226 
i
 = 0; i < 
I_MAP_SLOTS
; i++)

227 
	`bªl£
 (
s
->
s_im≠
[
i
]);

228 
i
 = 0; i < 
Z_MAP_SLOTS
; i++)

229 
	`bªl£
 (
s
->
s_zm≠
[
i
]);

231 
s
->
s_dev
 = 0;

232 
	`‰ì_su≥r
 (
s
);

233  
NULL
;

238 
s
->
s_im≠
[0]->
b_d©a
[0] |= 1;

239 
s
->
s_zm≠
[0]->
b_d©a
[0] |= 1;

241 
	`‰ì_su≥r
 (
s
);

242  
s
;

243 
	}
}

248 
	$sys_umou¡
 (*
dev_«me
)

250 
m_öode
 *
öode
;

251 
su≥r_block
 *
sb
;

252 
dev
;

255 i‡(!(
öode
 = 
	`«mei
 (
dev_«me
)))

256  -
ENOENT
;

257 
dev
 = 
öode
->
i_z⁄e
[0];

259 i‡(!
	`S_ISBLK
 (
öode
->
i_mode
))

261 
	`ùut
 (
öode
);

262  -
ENOTBLK
;

265 
	`ùut
 (
öode
);

267 i‡(
dev
 =
ROOT_DEV
)

268  -
EBUSY
;

270 i‡(!(
sb
 = 
	`gë_su≥r
 (
dev
)Ë|| !(sb->
s_imou¡
))

271  -
ENOENT
;

273 i‡(!
sb
->
s_imou¡
->
i_mou¡
)

274 
	`¥ötk
 ("Mounted inode has i_mount=0\n");

276 
öode
 = 
öode_èbÀ
 + 0; inodê< inode_èbÀ + 
NR_INODE
; inode++)

277 i‡(
öode
->
i_dev
 =
dev
 && inode->
i_cou¡
)

278  -
EBUSY
;

280 
sb
->
s_imou¡
->
i_mou¡
 = 0;

281 
	`ùut
 (
sb
->
s_imou¡
);

284 
sb
->
s_imou¡
 = 
NULL
;

285 
	`ùut
 (
sb
->
s_isup
);

286 
sb
->
s_isup
 = 
NULL
;

288 
	`put_su≥r
 (
dev
);

289 
	`sync_dev
 (
dev
);

291 
	}
}

297 
	$sys_mou¡
 (*
dev_«me
, *
dú_«me
, 
rw_Êag
)

299 
m_öode
 *
dev_i
, *
dú_i
;

300 
su≥r_block
 *
sb
;

301 
dev
;

305 i‡(!(
dev_i
 = 
	`«mei
 (
dev_«me
)))

306  -
ENOENT
;

307 
dev
 = 
dev_i
->
i_z⁄e
[0];

309 i‡(!
	`S_ISBLK
 (
dev_i
->
i_mode
))

311 
	`ùut
 (
dev_i
);

312  -
EPERM
;

315 
	`ùut
 (
dev_i
);

317 i‡(!(
dú_i
 = 
	`«mei
 (
dú_«me
)))

318  -
ENOENT
;

321 i‡(
dú_i
->
i_cou¡
 !1 || dú_i->
i_num
 =
ROOT_INO
)

323 
	`ùut
 (
dú_i
);

324  -
EBUSY
;

327 i‡(!
	`S_ISDIR
 (
dú_i
->
i_mode
))

329 
	`ùut
 (
dú_i
);

330  -
EPERM
;

333 i‡(!(
sb
 = 
	`ªad_su≥r
 (
dev
)))

335 
	`ùut
 (
dú_i
);

336  -
EBUSY
;

339 i‡(
sb
->
s_imou¡
)

341 
	`ùut
 (
dú_i
);

342  -
EBUSY
;

345 i‡(
dú_i
->
i_mou¡
)

347 
	`ùut
 (
dú_i
);

348  -
EPERM
;

351 
sb
->
s_imou¡
 = 
dú_i
;

353 
dú_i
->
i_mou¡
 = 1;

354 
dú_i
->
i_dút
 = 1;

356 
	}
}

361 
	$mou¡_roŸ
 ()

363 
i
, 
‰ì
;

364 
su≥r_block
 *
p
;

365 
m_öode
 *
mi
;

368 i‡(32 ! (
d_öode
))

369 
	`∑nic
 ("bad i-node size");

372 
i
 = 0; i < 
NR_FILE
; i++)

373 
fûe_èbÀ
[
i
].
f_cou¡
 = 0;

375 i‡(
	`MAJOR
 (
ROOT_DEV
) == 2)

377 
	`¥ötk
 ("InsertÑoot floppyándÖress ENTER");

378 
	`waô_f‹_key¥ess
 ();

381 
p
 = &
su≥r_block
[0];Ö < &su≥r_block[
NR_SUPER
];Ö++)

383 
p
->
s_dev
 = 0;

384 
p
->
s_lock
 = 0;

385 
p
->
s_waô
 = 
NULL
;

388 i‡(!(
p
 = 
	`ªad_su≥r
 (
ROOT_DEV
)))

389 
	`∑nic
 ("UnableÅo mountÑoot");

391 i‡(!(
mi
 = 
	`igë
 (
ROOT_DEV
, 
ROOT_INO
)))

392 
	`∑nic
 ("UnableÅoÑeadÑoot i-node");

394 
mi
->
i_cou¡
 += 3;

397 
p
->
s_isup
 =Ö->
s_imou¡
 = 
mi
;

399 
cuºít
->
pwd
 = 
mi
;

400 
cuºít
->
roŸ
 = 
mi
;

402 
‰ì
 = 0;

403 
i
 = 
p
->
s_nz⁄es
;

407 --
i
 >= 0)

408 i‡(!
	`£t_bô
 (
i
 & 8191, 
p
->
s_zm≠
[ò>> 13]->
b_d©a
))

409 
‰ì
++;

411 
	`¥ötk
 ("%d/%d fªêblocks\n\r", 
‰ì
, 
p
->
s_nz⁄es
);

414 
‰ì
 = 0;

415 
i
 = 
p
->
s_nöodes
 + 1;

417 --
i
 >= 0)

418 i‡(!
	`£t_bô
 (
i
 & 8191, 
p
->
s_im≠
[ò>> 13]->
b_d©a
))

419 
‰ì
++;

421 
	`¥ötk
 ("%d/%d fªêöodes\n\r", 
‰ì
, 
p
->
s_nöodes
);

422 
	}
}

	@fs/truncate.c

6 
	~<£t_£g.h
>

8 
	~<löux/sched.h
>

11 
	~<sys/°©.h
>

14 
	$‰ì_öd
 (
dev
, 
block
)

16 
buf„r_hód
 *
bh
;

17 *
p
;

18 
i
;

21 i‡(!
block
)

24 i‡(
bh
 = 
	`bªad
 (
dev
, 
block
))

26 
p
 = (*Ë
bh
->
b_d©a
;

27 
i
 = 0; i < 512; i++, 
p
++)

28 i‡(*
p
)

29 
	`‰ì_block
 (
dev
, *
p
);

30 
	`bªl£
 (
bh
);

52 
	`‰ì_block
 (
dev
, 
block
);

53 
	}
}

57 
	$‰ì_död
 (
dev
, 
block
)

59 
buf„r_hód
 *
bh
;

60 *
p
;

61 
i
;

64 i‡(!
block
)

67 i‡(
bh
 = 
	`bªad
 (
dev
, 
block
))

69 
p
 = (*Ë
bh
->
b_d©a
;

70 
i
 = 0; i < 512; i++, 
p
++)

71 i‡(*
p
)

72 
	`‰ì_öd
 (
dev
, *
p
);

73 
	`bªl£
 (
bh
);

76 
	`‰ì_block
 (
dev
, 
block
);

77 
	}
}

81 
	$åunˇã
 (
m_öode
 *
öode
)

83 
i
;

86 i‡(!(
	`S_ISREG
 (
öode
->
i_mode
Ë|| 
	`S_ISDIR
 (inode->i_mode)))

89 
i
 = 0; i < 7; i++)

90 i‡(
öode
->
i_z⁄e
[
i
])

92 
	`‰ì_block
 (
öode
->
i_dev
, inode->
i_z⁄e
[
i
]);

93 
öode
->
i_z⁄e
[
i
] = 0;

95 
	`‰ì_öd
 (
öode
->
i_dev
, inode->
i_z⁄e
[7]);

96 
	`‰ì_död
 (
öode
->
i_dev
, inode->
i_z⁄e
[8]);

97 
öode
->
i_z⁄e
[7] = inode->i_zone[8] = 0;

98 
öode
->
i_size
 = 0;

99 
öode
->
i_dút
 = 1;

100 
öode
->
i_mtime
 = inode->
i_˘ime
 = 
CURRENT_TIME
;

101 
	}
}

	@include/a.out.h

1 #i‚de‡
_A_OUT_H


2 
	#_A_OUT_H


	)

4 
	#__GNU_EXEC_MACROS__


	)

17 
	sexec


19 
	ma_magic
;

20 
	ma_ãxt
;

21 
	ma_d©a
;

22 
	ma_bss
;

23 
	ma_syms
;

24 
	ma_íåy
;

25 
	ma_åsize
;

26 
	ma_drsize
;

30 #i‚de‡
N_MAGIC


31 
	#N_MAGIC
(
exec
Ë(”xec).
a_magic
)

	)

34 #i‚de‡
OMAGIC


37 
	#OMAGIC
 0407

	)

40 
	#NMAGIC
 0410

	)

43 
	#ZMAGIC
 0413

	)

47 #i‚de‡
N_BADMAG


48 
	#N_BADMAG
(
x
) \

49 (
	`N_MAGIC
(
x
Ë!
OMAGIC
 && N_MAGIC(xË!
NMAGIC
 \

50 && 
	`N_MAGIC
(
x
Ë!
ZMAGIC
)

	)

53 
	#_N_BADMAG
(
x
) \

54 (
	`N_MAGIC
(
x
Ë!
OMAGIC
 && N_MAGIC(xË!
NMAGIC
 \

55 && 
	`N_MAGIC
(
x
Ë!
ZMAGIC
)

	)

58 
	#_N_HDROFF
(
x
Ë(
SEGMENT_SIZE
 -  (
exec
))

	)

61 #i‚de‡
N_TXTOFF


62 
	#N_TXTOFF
(
x
) \

63 (
	`N_MAGIC
(
x
Ë=
ZMAGIC
 ? 
	`_N_HDROFF
((x)Ë+  (
exec
Ë:  (exec))

	)

67 #i‚de‡
N_DATOFF


68 
	#N_DATOFF
(
x
Ë(
	`N_TXTOFF
(xË+ (x).
a_ãxt
)

	)

72 #i‚de‡
N_TRELOFF


73 
	#N_TRELOFF
(
x
Ë(
	`N_DATOFF
(xË+ (x).
a_d©a
)

	)

77 #i‚de‡
N_DRELOFF


78 
	#N_DRELOFF
(
x
Ë(
	`N_TRELOFF
(xË+ (x).
a_åsize
)

	)

82 #i‚de‡
N_SYMOFF


83 
	#N_SYMOFF
(
x
Ë(
	`N_DRELOFF
(xË+ (x).
a_drsize
)

	)

87 #i‚de‡
N_STROFF


88 
	#N_STROFF
(
x
Ë(
	`N_SYMOFF
(xË+ (x).
a_syms
)

	)

93 #i‚de‡
N_TXTADDR


94 
	#N_TXTADDR
(
x
Ë0

	)

103 #i‡
deföed
(
vax
Ë|| deföed(
hp300
Ë|| deföed(
pyr
)

104 
	#SEGMENT_SIZE
 
PAGE_SIZE


	)

106 #ifde‡
hp300


107 
	#PAGE_SIZE
 4096

	)

109 #ifde‡
s⁄y


110 
	#SEGMENT_SIZE
 0x2000

	)

112 #ifde‡
is68k


113 
	#SEGMENT_SIZE
 0x20000

	)

115 #i‡
deföed
(
m68k
Ë&& deföed(
PORTAR
)

116 
	#PAGE_SIZE
 0x400

	)

117 
	#SEGMENT_SIZE
 
PAGE_SIZE


	)

120 
	#PAGE_SIZE
 4096

	)

121 
	#SEGMENT_SIZE
 1024

	)

124 
	#_N_SEGMENT_ROUND
(
x
Ë(((xË+ 
SEGMENT_SIZE
 - 1Ë& ~(SEGMENT_SIZE - 1))

	)

127 
	#_N_TXTENDADDR
(
x
Ë(
	`N_TXTADDR
(x)+(x).
a_ãxt
)

	)

130 #i‚de‡
N_DATADDR


131 
	#N_DATADDR
(
x
) \

132 (
	`N_MAGIC
(
x
)==
OMAGIC
? (
	`_N_TXTENDADDR
(x)) \

133 : (
	`_N_SEGMENT_ROUND
 (
	`_N_TXTENDADDR
(
x
))))

	)

138 #i‚de‡
N_BSSADDR


139 
	#N_BSSADDR
(
x
Ë(
	`N_DATADDR
(xË+ (x).
a_d©a
)

	)

143 #i‚de‡
N_NLIST_DECLARED


144 
	s∆i°


148 *
	mn_«me
;

149 
∆i°
 *
	mn_√xt
;

150 
	mn_°rx
;

152 
	mn_un
;

153 
	mn_ty≥
;

154 
	mn_Ÿhî
;

155 
	mn_desc
;

156 
	mn_vÆue
;

161 #i‚de‡
N_UNDF


162 
	#N_UNDF
 0

	)

164 #i‚de‡
N_ABS


165 
	#N_ABS
 2

	)

167 #i‚de‡
N_TEXT


168 
	#N_TEXT
 4

	)

170 #i‚de‡
N_DATA


171 
	#N_DATA
 6

	)

173 #i‚de‡
N_BSS


174 
	#N_BSS
 8

	)

176 #i‚de‡
N_COMM


177 
	#N_COMM
 18

	)

179 #i‚de‡
N_FN


180 
	#N_FN
 15

	)

183 #i‚de‡
N_EXT


184 
	#N_EXT
 1

	)

186 #i‚de‡
N_TYPE


187 
	#N_TYPE
 036

	)

189 #i‚de‡
N_STAB


190 
	#N_STAB
 0340

	)

206 
	#N_INDR
 0xa

	)

226 
	#N_SETA
 0x14

	)

228 
	#N_SETT
 0x16

	)

230 
	#N_SETD
 0x18

	)

232 
	#N_SETB
 0x1A

	)

237 
	#N_SETV
 0x1C

	)

240 #i‚de‡
N_RELOCATION_INFO_DECLARED


251 
	sªloˇti⁄_öfo


255 
	mr_addªss
;

258 
	mr_symbﬁnum
:24;

264 
	mr_p¸ñ
:1;

269 
	mr_Àngth
:2;

281 
	mr_exã∫
:1;

286 
	mr_∑d
:4;

	@include/asm/io.h

3 
	#outb
(
vÆue
,
p‹t
Ë
	`_outb
(()(vÆue),()’‹t))

	)

4 
_ölöe
 
	$_outb
(
vÆue
,
p‹t
)

6 
_asm
 
mov
 
dx
,
p‹t
 ;

7 
_asm
 
mov
 
Æ
,
vÆue
 ;

8 
_asm
 
out
 
dx
,
Æ
 ;

9 
	}
}

15 
	#öb
(
p‹t
Ë
	`_öb
(()’‹t))

	)

16 
_ölöe
 
	$_öb
(
p‹t
)

19 
_asm
 
mov
 
dx
,
p‹t
 ;

20 
_asm
 
ö
 
Æ
,
dx
 ;

23 
	}
}

47 
	#outb_p
(
vÆue
,
p‹t
Ë
	`_outb_p
(()(vÆue),()’‹t))

	)

48 
_ölöe
 
	$_outb_p
(
vÆue
, 
p‹t
)

50 
_asm
 
mov
 
Æ
,
vÆue


51 
_asm
 
mov
 
dx
,
p‹t


52 
_asm
 
out
 
dx
,
Æ


53 
_asm
 
jmp
 
l1


54 
_asm
 
l1
: 
jmp
 
l2


55 
_asm
 
l2
:

56 
	}
}

80 
	#öb_p
(
p‹t
Ë
	`_öb_p
(()’‹t))

	)

81 
_ölöe
 
	$_öb_p
(
p‹t
)

84 
_asm
 {

85 
mov
 
dx
,
p‹t


86 
ö
 
Æ
,
dx


88 
jmp
 
l1


89 
l1
: 
jmp
 
l2


90 
l2
:

93 
	}
}

	@include/asm/memory.h

	@include/asm/segment.h

5 
_ölöe
 

6 
	$gë_fs_byã
 (c⁄° *
addr
)

11 
_asm
 
mov
 
ebx
,
addr


12 
_asm
 
mov
 
Æ
,
byã
 
±r
 
fs
:[
ebx
];

15 
	}
}

21 
_ölöe
 

22 
	$gë_fs_w‹d
 (c⁄° *
addr
)

27 
_asm
 
mov
 
ebx
,
addr


28 
_asm
 
mov
 
ax
,
w‹d
 
±r
 
fs
:[
ebx
];

31 
	}
}

37 
_ölöe
 

38 
	$gë_fs_l⁄g
 (c⁄° *
addr
)

43 
_asm
 
mov
 
ebx
,
addr


44 
_asm
 
mov
 
óx
,
dw‹d
 
±r
 
fs
:[
ebx
];

47 
	}
}

52 
_ölöe
 

53 
	$put_fs_byã
 (
vÆ
, *
addr
)

56 
_asm
 
mov
 
ebx
,
addr


57 
_asm
 
mov
 
Æ
,
vÆ
;

58 
_asm
 
mov
 
byã
 
±r
 
fs
:[
ebx
],
Æ
;

59 
	}
}

64 
_ölöe
 

65 
	$put_fs_w‹d
 (
vÆ
, *
addr
)

68 
_asm
 
mov
 
ebx
,
addr


69 
_asm
 
mov
 
ax
,
vÆ
;

70 
_asm
 
mov
 
w‹d
 
±r
 
fs
:[
ebx
],
ax
;

71 
	}
}

76 
_ölöe
 

77 
	$put_fs_l⁄g
 (
vÆ
, *
addr
)

80 
_asm
 
mov
 
ebx
,
addr


81 
_asm
 
mov
 
óx
,
vÆ
;

82 
_asm
 
mov
 
dw‹d
 
±r
 
fs
:[
ebx
],
óx
;

83 
	}
}

94 
_ölöe
 

95 
	$gë_fs
 ()

99 
_asm
 
mov
 
ax
,
fs
;

102 
	}
}

106 
_ölöe
 

107 
	$gë_ds
 ()

111 
_asm
 
mov
 
ax
,
fs
;

114 
	}
}

118 
_ölöe
 

119 
	$£t_fs
 (
vÆ
)

122 
_asm
 
mov
 
óx
,
vÆ
;

123 
_asm
 
mov
 
fs
,
ax
;

124 
	}
}

	@include/asm/system.h

3 
	#move_to_u£r_mode
() \

4 
_asm
 { \

5 
_asm
 
mov
 
óx
,
e•
 \

6 
_asm
 
push
 00000017
h
 \

7 
_asm
 
push
 
óx
 \

8 
_asm
 
pushfd
 \

9 
_asm
 
push
 0000000f
h
 \

10 
_asm
 
push
 
off£t
 
l1
 \

11 
_asm
 
úëd
 \

12 
_asm
 
l1
: 
mov
 
óx
,17
h
 \

13 
_asm
 
mov
 
ds
,
ax
 \

14 
_asm
 
mov
 
es
,
ax
 \

15 
_asm
 
mov
 
fs
,
ax
 \

16 
_asm
 
mov
 
gs
,
ax
 \

17 }

	)

30 
	#°i
(Ë
_asm
{ _asm 
°i
 }

32 
	#˛i
(Ë
_asm
{ _asm 
˛i
 }

34 
	#n›
(Ë
_asm
{ _asm 
n›
 }

36 
	#úë
(Ë
_asm
{ _asm 
úëd
 }

38 

	)

43 
_ölöe
 
_£t_g©e
(*
g©e_addr
, \

44 
ty≥
, \

45 
d∂
, \

46 
addr
)

48 
	gg©e_addr
[0] = 0x00080000 + (
addr
 & 0xffff);

49 
	gg©e_addr
[1] = 0x8000 + (
d∂
 << 13Ë+ (
ty≥
 << 8Ë+ (
addr
 & 0xffff0000);

72 
	#£t_öå_g©e
(
n
,
addr
) \

73 
	`_£t_g©e
((*)(&(
idt
[
n
])),14,0,()
addr
)

	)

77 
	#£t_å≠_g©e
(
n
,
addr
) \

78 
	`_£t_g©e
((*)(&(
idt
[
n
])),15,0,()
addr
)

	)

82 
	#£t_sy°em_g©e
(
n
,
addr
) \

83 
	`_£t_g©e
((*)(&(
idt
[
n
])),15,3,()
addr
)

	)

87 
	#_£t_£g_desc
(
g©e_addr
,
ty≥
,
d∂
,
ba£
,
limô
) {\

88 *(
g©e_addr
Ë((
ba£
) & 0xff000000) | \

89 (((
ba£
) & 0x00ff0000) >> 16) | \

90 ((
limô
) & 0xf0000) | \

91 ((
d∂
) << 13) | \

93 ((
ty≥
) << 8); \

94 *((
g©e_addr
Ë+ 1Ë(((
ba£
) & 0x0000ffff) << 16) | \

95 ((
limô
) & 0x0ffff); \

96 }

	)

104 
_ölöe
 
	$_£t_ts¶dt_desc
(*
n
,
addr
,
ç
)

112 
_asm
 
mov
 
ebx
,
n


113 
_asm
 
mov
 
ax
,104

114 
_asm
 
mov
 
w‹d
 
±r
 [
ebx
],
ax


115 
_asm
 
mov
 
óx
,
addr


116 
_asm
 
mov
 
w‹d
 
±r
 [
ebx
+2],
ax


117 
_asm
 
r‹
 
óx
,16

118 
_asm
 
mov
 
byã
 
±r
 [
ebx
+4],
Æ


119 
_asm
 
mov
 
Æ
,
ç


120 
_asm
 
mov
 
byã
 
±r
 [
ebx
+5],
Æ


121 
_asm
 
mov
 
Æ
,0

122 
_asm
 
mov
 
byã
 
±r
 [
ebx
+6],
Æ


123 
_asm
 
mov
 
byã
 
±r
 [
ebx
+7],
ah


124 
_asm
 
r‹
 
óx
,16

125 
	}
}

140 
	#£t_tss_desc
(
n
,
addr
) \

141 
	`_£t_ts¶dt_desc
((*)(
n
),()(
addr
), ()0x89)

	)

144 
	#£t_ldt_desc
(
n
,
addr
) \

145 
	`_£t_ts¶dt_desc
((*)(
n
),()(
addr
), ()0x82)

	)

	@include/asm/y_segment.h

5 
_ölöe
 
	$gë_fs_byã
(c⁄° * 
addr
)

7 
_v
;

9 
	`__asm
 ("movb %%fs:%1,%0":"Ù" (
_v
):"m" (*
addr
));

10  
_v
;

11 
	}
}

17 
_ölöe
 
	$gë_fs_w‹d
(c⁄° *
addr
)

19 
_v
;

21 
	`__asm
 ("movw %%fs:%1,%0":"Ù" (
_v
):"m" (*
addr
));

22  
_v
;

23 
	}
}

29 
_ölöe
 
	$gë_fs_l⁄g
(c⁄° *
addr
)

31 
_v
;

33 
	`__asm
 ("mov»%%fs:%1,%0":"Ù" (
_v
):"m" (*
addr
)); \

34  
_v
;

35 
	}
}

40 
_ölöe
 
	$put_fs_byã
(
vÆ
,*
addr
)

42 
	`__asm
 ("movb %0,%%fs:%1"::"r" (
vÆ
),"m" (*
addr
));

43 
	}
}

48 
_ölöe
 
	$put_fs_w‹d
(
vÆ
,* 
addr
)

50 
	`__asm
 ("movw %0,%%fs:%1"::"r" (
vÆ
),"m" (*
addr
));

51 
	}
}

56 
_ölöe
 
	$put_fs_l⁄g
(
vÆ
,* 
addr
)

58 
	`__asm
 ("mov»%0,%%fs:%1"::"r" (
vÆ
),"m" (*
addr
));

59 
	}
}

69 
_ölöe
 
	$gë_fs
()

71 
_v
;

72 
	`__asm
("mov %%fs,%%ax":"˜" (
_v
):);

73  
_v
;

74 
	}
}

78 
_ölöe
 
	$gë_ds
()

80 
_v
;

81 
	`__asm
("mov %%ds,%%ax":"˜" (
_v
):);

82  
_v
;

83 
	}
}

87 
_ölöe
 
	$£t_fs
(
vÆ
)

89 
	`__asm
("mov %0,%%fs"::"a" ((Ë
vÆ
));

90 
	}
}

	@include/const.h

1 #i‚de‡
_CONST_H


2 
	#_CONST_H


	)

4 
	#BUFFER_END
 0x200000

5 

	)

7 
	#I_TYPE
 0170000

8 
	#I_DIRECTORY
 0040000

9 
	#I_REGULAR
 0100000

10 
	#I_BLOCK_SPECIAL
 0060000

11 
	#I_CHAR_SPECIAL
 0020000

12 
	#I_NAMED_PIPE
 0010000

13 
	#I_SET_UID_BIT
 0004000

14 
	#I_SET_GID_BIT
 0002000

15 

	)

	@include/ctype.h

1 #i‚de‡
_CTYPE_H


2 
	#_CTYPE_H


	)

4 
	#_U
 0x01

5 
	#_L
 0x02

6 
	#_D
 0x04

7 
	#_C
 0x08

8 
	#_P
 0x10

9 
	#_S
 0x20

10 
	#_X
 0x40

11 
	#_SP
 0x80

12 

	)

13 
_˘y≥
[];

14 
_˘mp
;

17 
	#iß um
(
c
Ë((
_˘y≥
+1)[c]&(
_U
|
_L
|
_D
))

18 
	#ißÕha
(
c
Ë((
_˘y≥
+1)[c]&(
_U
|
_L
))

19 
	#is˙ål
(
c
Ë((
_˘y≥
+1)[c]&(
_C
))

20 
	#isdigô
(
c
Ë((
_˘y≥
+1)[c]&(
_D
))

21 
	#isgøph
(
c
Ë((
_˘y≥
+1)[c]&(
_P
|
_U
|
_L
|
_D
))

22 
	#i¶owî
(
c
Ë((
_˘y≥
+1)[c]&(
_L
))

23 
	#i•röt
(
c
Ë((
_˘y≥
+1)[c]&(
_P
|
_U
|
_L
|
_D
|
_SP
))

24 
	#i•un˘
(
c
Ë((
_˘y≥
+1)[c]&(
_P
))

25 
	#is•a˚
(
c
Ë((
_˘y≥
+1)[c]&(
_S
))

26 
	#isuµî
(
c
Ë((
_˘y≥
+1)[c]&(
_U
))

27 
	#isxdigô
(
c
Ë((
_˘y≥
+1)[c]&(
_D
|
_X
))

28 

	)

29 
	#ißscii
(
c
) ((() c)<=0x7f)

30 
	#tﬂscii
(
c
) ((() c)&0x7f)

31 

	)

32 
	#tﬁowî
(
c
Ë(
_˘mp
=c,
	`isuµî
(_ctmp)?_ctmp-( 'A'- 'a'):_ctmp)

33 
	#touµî
(
c
Ë(
_˘mp
=c,
	`i¶owî
(_ctmp)?_ctmp-( 'a'- 'A'):_ctmp)

34 

	)

	@include/errno.h

1 #i‚de‡
_ERRNO_H


2 
	#_ERRNO_H


	)

27 
î∫o
;

29 
	#ERROR
 99

30 
	#EPERM
 1

31 
	#ENOENT
 2

32 
	#ESRCH
 3

33 
	#EINTR
 4

34 
	#EIO
 5

35 
	#ENXIO
 6

36 
	#E2BIG
 7

37 
	#ENOEXEC
 8

38 
	#EBADF
 9

39 
	#ECHILD
 10

40 
	#EAGAIN
 11

41 
	#ENOMEM
 12

42 
	#EACCES
 13

43 
	#EFAULT
 14

44 
	#ENOTBLK
 15

45 
	#EBUSY
 16

46 
	#EEXIST
 17

47 
	#EXDEV
 18

48 
	#ENODEV
 19

49 
	#ENOTDIR
 20

50 
	#EISDIR
 21

51 
	#EINVAL
 22

52 
	#ENFILE
 23

53 
	#EMFILE
 24

54 
	#ENOTTY
 25

55 
	#ETXTBSY
 26

56 
	#EFBIG
 27

57 
	#ENOSPC
 28

58 
	#ESPIPE
 29

59 
	#EROFS
 30

60 
	#EMLINK
 31

61 
	#EPIPE
 32

62 
	#EDOM
 33

63 
	#ERANGE
 34

64 
	#EDEADLK
 35

65 
	#ENAMETOOLONG
 36

66 
	#ENOLCK
 37

67 
	#ENOSYS
 38

68 
	#ENOTEMPTY
 39

69 

	)

	@include/fcntl.h

1 #i‚de‡
_FCNTL_H


2 
	#_FCNTL_H


	)

4 
	~<sys/ty≥s.h
>

8 
	#O_ACCMODE
 00003

10 
	#O_RDONLY
 00

11 
	#O_WRONLY
 01

12 
	#O_RDWR
 02

14 
	#O_CREAT
 00100

15 
	#O_EXCL
 00200

16 
	#O_NOCTTY
 00400

17 
	#O_TRUNC
 01000

18 
	#O_APPEND
 02000

19 
	#O_NONBLOCK
 04000

20 
	#O_NDELAY
 
O_NONBLOCK


21 

	)

30 
	#F_DUPFD
 0

31 
	#F_GETFD
 1

32 
	#F_SETFD
 2

33 
	#F_GETFL
 3

34 
	#F_SETFL
 4

36 
	#F_GETLK
 5

37 
	#F_SETLK
 6

38 
	#F_SETLKW
 7

39 

	)

43 
	#FD_CLOEXEC
 1

	)

51 
	#F_RDLCK
 0

52 
	#F_WRLCK
 1

53 
	#F_UNLCK
 2

54 

	)

59 
	sÊock


61 
	ml_ty≥
;

62 
	ml_whí˚
;

63 
off_t
 
	ml_°¨t
;

64 
off_t
 
	ml_Àn
;

65 
pid_t
 
	ml_pid
;

71 
¸ót
 (c⁄° *
fûíame
, 
mode_t
 
mode
);

74 
f˙é
 (
fûdes
, 
cmd
, ...);

77 
›í
 (c⁄° *
fûíame
, 
Êags
, ...);

	@include/linux/config.h

1 #i‚de‡
_CONFIG_H


2 
	#_CONFIG_H


	)

27 
	#KBD_US


	)

	@include/linux/fdreg.h

5 #i‚de‡
_FDREG_H


6 
	#_FDREG_H


	)

9 
ticks_to_Ê›py_⁄
(
ƒ
);

10 
Ê›py_⁄
(
ƒ
);

11 
Ê›py_off
(
ƒ
);

12 
Ê›py_£À˘
(
ƒ
);

13 
Ê›py_de£À˘
(
ƒ
);

17 
	#FD_STATUS
 0x3f4

18 
	#FD_DATA
 0x3f5

19 
	#FD_DOR
 0x3f2

	)

21 
	#FD_DIR
 0x3f7

	)

23 
	#FD_DCR
 0x3f7

	)

27 
	#STATUS_BUSYMASK
 0x0F

	)

29 
	#STATUS_BUSY
 0x10

	)

31 
	#STATUS_DMA
 0x20

	)

33 
	#STATUS_DIR
 0x40

	)

35 
	#STATUS_READY
 0x80

	)

39 
	#ST0_DS
 0x03

	)

41 
	#ST0_HA
 0x04

	)

43 
	#ST0_NR
 0x08

	)

45 
	#ST0_ECE
 0x10

	)

47 
	#ST0_SE
 0x20

	)

49 
	#ST0_INTR
 0xC0

	)

54 
	#ST1_MAM
 0x01

	)

56 
	#ST1_WP
 0x02

	)

58 
	#ST1_ND
 0x04

	)

60 
	#ST1_OR
 0x10

	)

62 
	#ST1_CRC
 0x20

	)

64 
	#ST1_EOC
 0x80

	)

68 
	#ST2_MAM
 0x01

	)

70 
	#ST2_BC
 0x02

	)

72 
	#ST2_SNS
 0x04

	)

74 
	#ST2_SEH
 0x08

	)

76 
	#ST2_WC
 0x10

	)

78 
	#ST2_CRC
 0x20

	)

80 
	#ST2_CM
 0x40

	)

84 
	#ST3_HA
 0x04

	)

86 
	#ST3_TZ
 0x10

	)

88 
	#ST3_WP
 0x40

	)

92 
	#FD_RECALIBRATE
 0x07

	)

94 
	#FD_SEEK
 0x0F

	)

96 
	#FD_READ
 0xE6

	)

98 
	#FD_WRITE
 0xC5

	)

100 
	#FD_SENSEI
 0x08

	)

102 
	#FD_SPECIFY
 0x03

	)

106 
	#DMA_READ
 0x46

107 
	#DMA_WRITE
 0x4A

108 

	)

	@include/linux/fs.h

9 #i‚de‡
_FS_H


10 
	#_FS_H


	)

12 
	~<sys/ty≥s.h
>

40 
	#IS_SEEKABLE
(
x
) ((x)>=1 && (x)<=3)

41 

	)

42 
	#READ
 0

	)

43 
	#WRITE
 1

	)

44 
	#READA
 2

	)

45 
	#WRITEA
 3

	)

47 
buf„r_öô
 (
buf„r_íd
);

49 
	#MAJOR
(
a
) ((()(a))>>8)

50 
	#MINOR
(
a
) ((a)&0xff)

51 

	)

52 
	#NAME_LEN
 14

53 
	#ROOT_INO
 1

54 

	)

55 
	#I_MAP_SLOTS
 8

56 
	#Z_MAP_SLOTS
 8

57 
	#SUPER_MAGIC
 0x137F

58 

	)

59 
	#NR_OPEN
 20

60 
	#NR_INODE
 32

	)

61 
	#NR_FILE
 64

	)

62 
	#NR_SUPER
 8

	)

63 
	#NR_HASH
 307

	)

64 
	#NR_BUFFERS
 
ƒ_buf„rs


	)

65 
	#BLOCK_SIZE
 1024

66 
	#BLOCK_SIZE_BITS
 10

67 #i‚de‡
NULL


	)

68 
	#NULL
 0

	)

72 
	#INODES_PER_BLOCK
 ((
BLOCK_SIZE
)/( (
d_öode
)))

	)

74 
	#DIR_ENTRIES_PER_BLOCK
 ((
BLOCK_SIZE
)/( (
dú_íåy
)))

	)

77 
	#PIPE_HEAD
(
öode
Ë((öode).
i_z⁄e
[0])

	)

78 
	#PIPE_TAIL
(
öode
Ë((öode).
i_z⁄e
[1])

	)

79 
	#PIPE_SIZE
(
öode
Ë((
	`PIPE_HEAD
(öode)-
	`PIPE_TAIL
(öode))&(
PAGE_SIZE
-1))

	)

80 
	#PIPE_EMPTY
(
öode
Ë(
	`PIPE_HEAD
(öode)==
	`PIPE_TAIL
(öode))

	)

81 
	#PIPE_FULL
(
öode
Ë(
	`PIPE_SIZE
(öode)==(
PAGE_SIZE
-1))

	)

84 
	#INC_PIPE
(
hód
Ë
	`_INC_PIPE
(&(hód))

	)

85 
_ölöe
 
	$_INC_PIPE
(*
hód
) {

86 
_asm
 
mov
 
ebx
,
hód


87 
_asm
 
öc
 
dw‹d
 
±r
 [
ebx
]

88 
_asm
 
™d
 
dw‹d
 
±r
 [
ebx
],4095

89 
	}
}

91 
	tbuf„r_block
[
BLOCK_SIZE
];

95 
	sbuf„r_hód


97 *
	mb_d©a
;

98 
	mb_blockƒ
;

99 
	mb_dev
;

100 
	mb_u±od©e
;

101 
	mb_dút
;

102 
	mb_cou¡
;

103 
	mb_lock
;

104 
èsk_°ru˘
 *
	mb_waô
;

105 
buf„r_hód
 *
	mb_¥ev
;

106 
buf„r_hód
 *
	mb_√xt
;

107 
buf„r_hód
 *
	mb_¥ev_‰ì
;

108 
buf„r_hód
 *
	mb_√xt_‰ì
;

112 
	sd_öode


114 
	mi_mode
;

115 
	mi_uid
;

116 
	mi_size
;

117 
	mi_time
;

118 
	mi_gid
;

119 
	mi_∆öks
;

120 
	mi_z⁄e
[9];

125 
	sm_öode


127 
	mi_mode
;

128 
	mi_uid
;

129 
	mi_size
;

130 
	mi_mtime
;

131 
	mi_gid
;

132 
	mi_∆öks
;

133 
	mi_z⁄e
[9];

135 
èsk_°ru˘
 *
	mi_waô
;

136 
	mi_©ime
;

137 
	mi_˘ime
;

138 
	mi_dev
;

139 
	mi_num
;

140 
	mi_cou¡
;

141 
	mi_lock
;

142 
	mi_dút
;

143 
	mi_pùe
;

144 
	mi_mou¡
;

145 
	mi_£ek
;

146 
	mi_upd©e
;

150 
	sfûe


152 
	mf_mode
;

153 
	mf_Êags
;

154 
	mf_cou¡
;

155 
m_öode
 *
	mf_öode
;

156 
off_t
 
	mf_pos
;

160 
	ssu≥r_block


162 
	ms_nöodes
;

163 
	ms_nz⁄es
;

164 
	ms_im≠_blocks
;

165 
	ms_zm≠_blocks
;

166 
	ms_fú°d©az⁄e
;

167 
	ms_log_z⁄e_size
;

168 
	ms_max_size
;

169 
	ms_magic
;

171 
buf„r_hód
 *
	ms_im≠
[8];

172 
buf„r_hód
 *
	ms_zm≠
[8];

173 
	ms_dev
;

174 
m_öode
 *
	ms_isup
;

175 
m_öode
 *
	ms_imou¡
;

176 
	ms_time
;

177 
èsk_°ru˘
 *
	ms_waô
;

178 
	ms_lock
;

179 
	ms_rd_⁄ly
;

180 
	ms_dút
;

184 
	sd_su≥r_block


186 
	ms_nöodes
;

187 
	ms_nz⁄es
;

188 
	ms_im≠_blocks
;

189 
	ms_zm≠_blocks
;

190 
	ms_fú°d©az⁄e
;

191 
	ms_log_z⁄e_size
;

192 
	ms_max_size
;

193 
	ms_magic
;

197 
	sdú_íåy


199 
	möode
;

200 
	m«me
[
NAME_LEN
];

203 
m_öode
 
öode_èbÀ
[
NR_INODE
];

204 
fûe
 
fûe_èbÀ
[
NR_FILE
];

205 
su≥r_block
 su≥r_block[
NR_SUPER
];

206 
buf„r_hód
 *
°¨t_buf„r
;

207 
ƒ_buf„rs
;

211 
check_disk_ch™ge
 (
dev
);

213 
Ê›py_ch™ge
 (
ƒ
);

215 
ticks_to_Ê›py_⁄
 (
dev
);

217 
Ê›py_⁄
 (
dev
);

219 
Ê›py_off
 (
dev
);

222 
åunˇã
 (
m_öode
 *
öode
);

224 
sync_öodes
 ();

226 
waô_⁄
 (
m_öode
 *
öode
);

228 
bm≠
 (
m_öode
 *
öode
, 
block
);

230 
¸óã_block
 (
m_öode
 *
öode
, 
block
);

232 
m_öode
 *
«mei
 (c⁄° *
∑th«me
);

234 
›í_«mei
 (c⁄° *
∑th«me
, 
Êag
, 
mode
,

235 
m_öode
 **
ªs_öode
);

237 
ùut
 (
m_öode
 *
öode
);

239 
m_öode
 *
igë
 (
dev
, 
ƒ
);

241 
m_öode
 *
gë_em±y_öode
 ();

243 
m_öode
 *
gë_pùe_öode
 ();

245 
buf„r_hód
 *
gë_hash_èbÀ
 (
dev
, 
block
);

247 
buf„r_hód
 *
gëblk
 (
dev
, 
block
);

249 
Œ_rw_block
 (
rw
, 
buf„r_hód
 *
bh
);

251 
bªl£
 (
buf„r_hód
 *
buf
);

253 
buf„r_hód
 *
bªad
 (
dev
, 
block
);

255 
bªad_∑ge
 (
addr
, 
dev
, 
b
[4]);

257 
buf„r_hód
 *
bªada
 (
dev
, 
block
, ...);

259 
√w_block
 (
dev
);

261 
‰ì_block
 (
dev
, 
block
);

263 
m_öode
 *
√w_öode
 (
dev
);

265 
‰ì_öode
 (
m_öode
 *
öode
);

267 
sync_dev
 (
dev
);

269 
su≥r_block
 *
gë_su≥r
 (
dev
);

270 
ROOT_DEV
;

273 
mou¡_roŸ
 ();

	@include/linux/hdreg.h

5 #i‚de‡
_HDREG_H


6 
	#_HDREG_H


	)

10 
	#HD_DATA
 0x1f0

	)

11 
	#HD_ERROR
 0x1f1

	)

12 
	#HD_NSECTOR
 0x1f2

	)

13 
	#HD_SECTOR
 0x1f3

	)

14 
	#HD_LCYL
 0x1f4

	)

15 
	#HD_HCYL
 0x1f5

	)

16 
	#HD_CURRENT
 0x1f6

	)

17 
	#HD_STATUS
 0x1f7

	)

18 
	#HD_PRECOMP
 
HD_ERROR


	)

19 
	#HD_COMMAND
 
HD_STATUS


	)

21 
	#HD_CMD
 0x3f6

22 

	)

25 
	#ERR_STAT
 0x01

26 
	#INDEX_STAT
 0x02

27 
	#ECC_STAT
 0x04

28 
	#DRQ_STAT
 0x08

29 
	#SEEK_STAT
 0x10

30 
	#WRERR_STAT
 0x20

31 
	#READY_STAT
 0x40

32 
	#BUSY_STAT
 0x80

33 

	)

36 
	#WIN_RESTORE
 0x10

37 
	#WIN_READ
 0x20

38 
	#WIN_WRITE
 0x30

39 
	#WIN_VERIFY
 0x40

40 
	#WIN_FORMAT
 0x50

41 
	#WIN_INIT
 0x60

42 
	#WIN_SEEK
 0x70

43 
	#WIN_DIAGNOSE
 0x90

44 
	#WIN_SPECIFY
 0x91

45 

	)

61 
	#MARK_ERR
 0x01

	)

62 
	#TRK0_ERR
 0x02

	)

63 
	#ABRT_ERR
 0x04

	)

64 
	#ID_ERR
 0x10

	)

65 
	#ECC_ERR
 0x40

	)

66 
	#BBD_ERR
 0x80

	)

69 
	s∑πôi⁄


71 
	mboŸ_öd
;

72 
	mhód
;

73 
	m£˘‹
;

74 
	mcyl
;

75 
	msys_öd
;

76 
	míd_hód
;

77 
	míd_£˘‹
;

78 
	míd_cyl
;

79 
	m°¨t_£˘
;

80 
	mƒ_£˘s
;

	@include/linux/head.h

1 #i‚de‡
_HEAD_H


2 
	#_HEAD_H


	)

4 
	sdesc_°ru˘


6 
	ma
, 
	mb
;

8 
	tdesc_èbÀ
[256];

10 
pg_dú
[1024];

12 
desc_èbÀ
 
idt
, 
gdt
;

14 
	#GDT_NUL
 0

15 
	#GDT_CODE
 1

16 
	#GDT_DATA
 2

17 
	#GDT_TMP
 3

18 

	)

19 
	#LDT_NUL
 0

20 
	#LDT_CODE
 1

21 
	#LDT_DATA
 2

22 

	)

	@include/linux/kernel.h

5 
vîify_¨ó
 (*
addr
, 
cou¡
);

7 
∑nic
 (c⁄° *
°r
);

9 
¥ötf
 (c⁄° *
fmt
, ...);

11 
¥ötk
 (c⁄° *
fmt
, ...);

13 
ây_wrôe
 (
ch
, *
buf
, 
cou¡
);

15 *
mÆloc
 (
size
);

17 
‰ì_s
 (*
obj
, 
size
);

19 
	#‰ì
(
x
Ë
	`‰ì_s
((x), 0)

	)

27 
	#su£r
(Ë(
cuºít
->
euid
 == 0)

	@include/linux/mm.h

1 #i‚de‡
_MM_H


2 
	#_MM_H


	)

4 
	#PAGE_SIZE
 4096

5 

	)

7 
gë_‰ì_∑ge
 ();

9 
put_∑ge
 (
∑ge
, 
addªss
);

11 
‰ì_∑ge
 (
addr
);

	@include/linux/sched.h

1 #i‚de‡
_SCHED_H


2 
	#_SCHED_H


	)

4 
	#NR_TASKS
 64

5 
	#HZ
 100

6 

	)

7 
	#FIRST_TASK
 
èsk
[0]

8 
	#LAST_TASK
 
èsk
[
NR_TASKS
-1]

9 

	)

10 
	~<löux/hód.h
>

11 
	~<löux/fs.h
>

12 
	~<löux/mm.h
>

13 
	~<sig«l.h
>

15 #i‡(
NR_OPEN
 > 32)

20 
	#TASK_RUNNING
 0

21 
	#TASK_INTERRUPTIBLE
 1

22 
	#TASK_UNINTERRUPTIBLE
 2

23 
	#TASK_ZOMBIE
 3

24 
	#TASK_STOPPED
 4

25 

	)

26 #i‚de‡
NULL


27 
	#NULL
 0

29 

	)

31 
c›y_∑ge_èbÀs
 (
‰om
, 
to
, 
size
);

33 
‰ì_∑ge_èbÀs
 (
‰om
, 
size
);

36 
sched_öô
 ();

38 
scheduÀ
 ();

40 
å≠_öô
 ();

42 
∑nic
 (c⁄° *
°r
);

44 
ây_wrôe
 (
mö‹
, *
buf
, 
cou¡
);

46 (*
	g‚_±r
) ();

49 
	si387_°ru˘


51 
	mcwd
;

52 
	mswd
;

53 
	mtwd
;

54 
	mfù
;

55 
	mfcs
;

56 
	mfoo
;

57 
	mfos
;

58 
	m°_•a˚
[20];

62 
	stss_°ru˘


64 
	mback_lök
;

65 
	me•0
;

66 
	mss0
;

67 
	me•1
;

68 
	mss1
;

69 
	me•2
;

70 
	mss2
;

71 
	m¸3
;

72 
	meù
;

73 
	meÊags
;

74 
	móx
, 
	mecx
, 
	medx
, 
	mebx
;

75 
	me•
;

76 
	mebp
;

77 
	mesi
;

78 
	medi
;

79 
	mes
;

80 
	mcs
;

81 
	mss
;

82 
	mds
;

83 
	mfs
;

84 
	mgs
;

85 
	mldt
;

86 
	måa˚_bôm≠
;

87 
i387_°ru˘
 
	mi387
;

136 
	sèsk_°ru˘


139 
	m°©e
;

140 
	mcou¡î
;

141 
	m¥i‹ôy
;

142 
	msig«l
;

143 
siga˘i⁄
 
	msiga˘i⁄
[32];

144 
	mblocked
;

146 
	mexô_code
;

147 
	m°¨t_code
, 
	míd_code
, 
	míd_d©a
, 
	mbrk
, 
	m°¨t_°ack
;

148 
	mpid
, 
	mÁthî
, 
	mpgΩ
, 
	m£ssi⁄
, 
	mÀadî
;

149 
	muid
, 
	meuid
, 
	msuid
;

150 
	mgid
, 
	megid
, 
	msgid
;

151 
	mÆ¨m
;

152 
	mutime
, 
	m°ime
, 
	mcutime
, 
	mc°ime
, 
	m°¨t_time
;

153 
	mu£d_m©h
;

155 
	mây
;

156 
	mumask
;

157 
m_öode
 *
	mpwd
;

158 
m_öode
 *
	mroŸ
;

159 
m_öode
 *
	mexecuèbÀ
;

160 
	m˛o£_⁄_exec
;

161 
fûe
 *
	mfûp
[
NR_OPEN
];

163 
desc_°ru˘
 
	mldt
[3];

165 
tss_°ru˘
 
	mtss
;

173 
	#INIT_TASK
 \

182  -1, 0022, 
NULL
, NULL, NULL, 0, \

183  {
NULL
,}, \

187  {0, 
PAGE_SIZE
 + (Ë(&
öô_èsk
), 0x10, 0, 0, 0, 0, (Ë&
pg_dú
,\

189 0, 0, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
	`_LDT
 (0), 0x80000000, {0} },\

190 }

	)

192 
èsk_°ru˘
 *
èsk
[
NR_TASKS
];

193 
èsk_°ru˘
 *
œ°_èsk_u£d_m©h
;

194 
èsk_°ru˘
 *
cuºít
;

195 vﬁ©ûê
jiffõs
;

196 
°¨tup_time
;

198 
	#CURRENT_TIME
 (
°¨tup_time
+
jiffõs
/
HZ
)

199 

	)

201 
add_timî
 (
jiffõs
, (*
‚
) ());

203 
¶ìp_⁄
 (
èsk_°ru˘
 **
p
);

205 
öãºu±ibÀ_¶ìp_⁄
 (
èsk_°ru˘
 **
p
);

207 
wake_up
 (
èsk_°ru˘
 **
p
);

214 
	#FIRST_TSS_ENTRY
 4

	)

216 
	#FIRST_LDT_ENTRY
 (
FIRST_TSS_ENTRY
+1)

	)

218 
	#_TSS
(
n
Ë((((Ën)<<4)+(
FIRST_TSS_ENTRY
<<3))

	)

220 
	#_LDT
(
n
Ë((((Ën)<<4)+(
FIRST_LDT_ENTRY
<<3))

	)

223 
_ölöe
 
	$…r
(
n
)

225 
n
=
	`_TSS
(n);

226 
_asm
{

227 
…r
 
w‹d
 
±r
 
n


229 
	}
}

232 
_ölöe
 
	$Œdt
(
n
)

234 
n
=
	`_LDT
(n);

235 
_asm
{

236 
Œdt
 
w‹d
 
±r
 
n


238 
	}
}

241 
	#°r
(
n
Ë
	`_°r
(()(&“)))

	)

242 
_ölöe
 
	$_°r
(
n
)

243 { 
_asm
{

244 
x‹
 
óx
,eax

245 
°r
 
ax


246 
sub
 
óx
,
FIRST_TSS_ENTRY
*8

247 
shr
 
óx
,4

248 
mov
 
ebx
,
n


249 
mov
 [
ebx
],
óx


250 }
	}
}

267 
_ölöe
 
	$swôch_to
(
n
)

269 
__tmp
;

270 
__tmp
 = ()
	`_TSS
(
n
);

272 
_asm
 {

273 
mov
 
ebx
, 
off£t
 
èsk


274 
mov
 
óx
, 
n


275 
mov
 
ecx
, [
ebx
+
óx
*4]

276 
cmp
 
ecx
, 
cuºít


277 
je
 
l1


278 
xchg
 
ecx
,
cuºít


280 
mov
 
ax
, 
__tmp


281 
mov
 
w‹d
 
±r
 
ds
:[
lcs
],
ax


282 
_emô
 0xea

283 
_emô
 0

284 
_emô
 0

285 
_emô
 0

286 
_emô
 0

287 
lcs
: 
_emô
 0

288 
_emô
 0

290 
cmp
 
œ°_èsk_u£d_m©h
,
ecx


291 
j√
 
l1


292 
˛ts


294 
l1
: ;

295 
	}
}

313 
	#PAGE_ALIGN
(
n
Ë((“)+0xfff)&0xfffff000)

	)

317 
_ölöe


318 
	$_£t_ba£
(*
addr
,
ba£
)

323 
_asm
 
mov
 
ebx
,
addr


324 
_asm
 
mov
 
edx
,
ba£


325 
_asm
 
mov
 
w‹d
 
±r
 [
ebx
+2],
dx


326 
_asm
 
r‹
 
edx
,16

327 
_asm
 
mov
 
byã
 
±r
 [
ebx
+4],
dl


328 
_asm
 
mov
 
byã
 
±r
 [
ebx
+7],
dh


329 
	}
}

339 
_ölöe
 
	$_£t_limô
(*
addr
,
limô
)

343 
_asm
 
mov
 
ebx
,
addr


344 
_asm
 
mov
 
edx
,
limô


345 
_asm
 
mov
 
w‹d
 
±r
 [
ebx
],
dx


346 
_asm
 
r‹
 
edx
,16

347 
_asm
 
mov
 
dh
,
byã
 
±r
 [
ebx
+6]

348 
_asm
 
™d
 
dh
,0f0
h


349 
_asm
 
‹
 
dl
,
dh


350 
_asm
 
mov
 
byã
 
±r
 [
ebx
+6],
dl


351 
	}
}

363 
	#£t_ba£
(
ldt
,
ba£
) \

364 
	`_£t_ba£
–((*)&(
ldt
)), ()(
ba£
Ë)

	)

366 
	#£t_limô
(
ldt
,
limô
) \

367 
	`_£t_limô
–((*)&(
ldt
)), ()((
limô
)-1)>>12 )

	)

370 
	#gë_ba£
(
ldt
Ë
	`_gë_ba£
–((*)&÷dt)Ë)

	)

373 
_ölöe
 
	$_gë_ba£
(*
addr
)

376 
_asm
 {

377 
_asm
 
mov
 
ebx
,
addr


378 
_asm
 
mov
 
ah
,
byã
 
±r
 [
ebx
+7]

379 
_asm
 
mov
 
Æ
,
byã
 
±r
 [
ebx
+4]

380 
_asm
 
shl
 
óx
,16

381 
_asm
 
mov
 
ax
,
w‹d
 
±r
 [
ebx
+2]

385 
	}
}

400 
_ölöe
 
	$gë_limô
(
£gmít
) {

402 
_asm
 {

403 
mov
 
óx
,
£gmít


404 
l¶
 
óx
,eax

408 
	}
}

	@include/linux/sys.h

1 
sys_£tup
 ();

2 
sys_exô
 ();

3 
sys_f‹k
 ();

4 
sys_ªad
 ();

5 
sys_wrôe
 ();

6 
sys_›í
 ();

7 
sys_˛o£
 ();

8 
sys_waôpid
 ();

9 
sys_¸ót
 ();

10 
sys_lök
 ();

11 
sys_u∆ök
 ();

12 
sys_execve
 ();

13 
sys_chdú
 ();

14 
sys_time
 ();

15 
sys_mknod
 ();

16 
sys_chmod
 ();

17 
sys_chown
 ();

18 
sys_bªak
 ();

19 
sys_°©
 ();

20 
sys_l£ek
 ();

21 
sys_gëpid
 ();

22 
sys_mou¡
 ();

23 
sys_umou¡
 ();

24 
sys_£tuid
 ();

25 
sys_gëuid
 ();

26 
sys_°ime
 ();

27 
sys_±ø˚
 ();

28 
sys_Æ¨m
 ();

29 
sys_f°©
 ();

30 
sys_∑u£
 ();

31 
sys_utime
 ();

32 
sys_°ty
 ();

33 
sys_gây
 ();

34 
sys_ac˚ss
 ();

35 
sys_ni˚
 ();

36 
sys_·ime
 ();

37 
sys_sync
 ();

38 
sys_kûl
 ();

39 
sys_ª«me
 ();

40 
sys_mkdú
 ();

41 
sys_rmdú
 ();

42 
sys_dup
 ();

43 
sys_pùe
 ();

44 
sys_times
 ();

45 
sys_¥of
 ();

46 
sys_brk
 ();

47 
sys_£tgid
 ();

48 
sys_gëgid
 ();

49 
sys_sig«l
 ();

50 
sys_gëeuid
 ();

51 
sys_gëegid
 ();

52 
sys_ac˘
 ();

53 
sys_phys
 ();

54 
sys_lock
 ();

55 
sys_io˘l
 ();

56 
sys_f˙é
 ();

57 
sys_mpx
 ();

58 
sys_£çgid
 ();

59 
sys_ulimô
 ();

60 
sys_u«me
 ();

61 
sys_umask
 ();

62 
sys_chroŸ
 ();

63 
sys_u°©
 ();

64 
sys_dup2
 ();

65 
sys_gëµid
 ();

66 
sys_gëpgΩ
 ();

67 
sys_£tsid
 ();

68 
sys_siga˘i⁄
 ();

69 
sys_sgëmask
 ();

70 
sys_s£tmask
 ();

71 
sys_£åeuid
 ();

72 
sys_£åegid
 ();

75 
‚_±r
 
	gsys_ˇŒ_èbÀ
[] = { 
sys_£tup
, 
sys_exô
, 
sys_f‹k
, 
sys_ªad
,

76 
sys_wrôe
, 
sys_›í
, 
sys_˛o£
, 
sys_waôpid
, 
sys_¸ót
, 
sys_lök
,

77 
sys_u∆ök
, 
sys_execve
, 
sys_chdú
, 
sys_time
, 
sys_mknod
, 
sys_chmod
,

78 
sys_chown
, 
sys_bªak
, 
sys_°©
, 
sys_l£ek
, 
sys_gëpid
, 
sys_mou¡
,

79 
sys_umou¡
, 
sys_£tuid
, 
sys_gëuid
, 
sys_°ime
, 
sys_±ø˚
, 
sys_Æ¨m
,

80 
sys_f°©
, 
sys_∑u£
, 
sys_utime
, 
sys_°ty
, 
sys_gây
, 
sys_ac˚ss
,

81 
sys_ni˚
, 
sys_·ime
, 
sys_sync
, 
sys_kûl
, 
sys_ª«me
, 
sys_mkdú
,

82 
sys_rmdú
, 
sys_dup
, 
sys_pùe
, 
sys_times
, 
sys_¥of
, 
sys_brk
, 
sys_£tgid
,

83 
sys_gëgid
, 
sys_sig«l
, 
sys_gëeuid
, 
sys_gëegid
, 
sys_ac˘
, 
sys_phys
,

84 
sys_lock
, 
sys_io˘l
, 
sys_f˙é
, 
sys_mpx
, 
sys_£çgid
, 
sys_ulimô
,

85 
sys_u«me
, 
sys_umask
, 
sys_chroŸ
, 
sys_u°©
, 
sys_dup2
, 
sys_gëµid
,

86 
sys_gëpgΩ
, 
sys_£tsid
, 
sys_siga˘i⁄
, 
sys_sgëmask
, 
sys_s£tmask
,

87 
sys_£åeuid
, 
sys_£åegid


	@include/linux/tty.h

7 #i‚de‡
_TTY_H


8 
	#_TTY_H


	)

10 
	~<ãrmios.h
>

12 
	#TTY_BUF_SIZE
 1024

13 

	)

15 
	sây_queue


17 
	md©a
;

19 
	mhód
;

20 
	mèû
;

21 
èsk_°ru˘
 *
	m¥oc_li°
;

22 
	mbuf
[
TTY_BUF_SIZE
];

27 
	#INC
(
a
Ë(◊Ë(◊)+1Ë& (
TTY_BUF_SIZE
-1))

	)

29 
	#DEC
(
a
Ë(◊Ë(◊)-1Ë& (
TTY_BUF_SIZE
-1))

	)

31 
	#EMPTY
(
a
Ë(◊).
hód
 =◊).
èû
)

	)

33 
	#LEFT
(
a
Ë((◊).
èû
-◊).
hód
-1)&(
TTY_BUF_SIZE
-1))

	)

35 
	#LAST
(
a
Ë(◊).
buf
[(
TTY_BUF_SIZE
-1)&(◊).
hód
-1)])

	)

37 
	#FULL
(
a
Ë(!
	`LEFT
◊))

	)

39 
	#CHARS
(
a
Ë((◊).
hód
-◊).
èû
)&(
TTY_BUF_SIZE
-1))

	)

41 
	#GETCH
(
queue
,
c
) \

42 ()(
c
=(
queue
).
buf
[(queue).
èû
],
	`INC
((queue).èû))

	)

45 
	#PUTCH
(
c
,
queue
) \

46 ()–(
queue
).
buf
[(queue).
hód
]=(
c
), 
	`INC
((queue).hódË)

	)

50 
	#INTR_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VINTR
])

51 
	#QUIT_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VQUIT
])

52 
	#ERASE_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VERASE
])

53 
	#KILL_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VKILL
])

54 
	#EOF_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VEOF
])

55 
	#START_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VSTART
])

56 
	#STOP_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VSTOP
])

57 
	#SUSPEND_CHAR
(
ây
Ë(—ty)->
ãrmios
.
c_cc
[
VSUSP
])

58 

	)

60 
	sây_°ru˘


62 
ãrmios
 
	mãrmios
;

63 
	mpgΩ
;

64 
	m°›≥d
;

65 (*
	mwrôe
Ë(
ây_°ru˘
 * 
	mây
);

66 
ây_queue
 
	mªad_q
;

67 
ây_queue
 
	mwrôe_q
;

68 
ây_queue
 
	m£c⁄d¨y
;

71 
ây_°ru˘
 
ây_èbÀ
[];

86 
	#INIT_C_CC
 "\003\034\177\025\004\0\1\0\021\023\032\0\022\017\027\026\0"

	)

88 
rs_öô
 ();

89 
c⁄_öô
 ();

90 
ây_öô
 ();

92 
ây_ªad
 (
c
, *
buf
, 
n
);

93 
ây_wrôe
 (
c
, *
buf
, 
n
);

95 
rs_wrôe
 (
ây_°ru˘
 *
ây
);

96 
c⁄_wrôe
 (
ây_°ru˘
 *
ây
);

98 
c›y_to_cooked
 (
ây_°ru˘
 *
ây
);

	@include/set_seg.h

1 #i‚de‡
SET_SEG_H


2 
	#SET_SEG_H


	)

4 
	#_ölöe
 
_f‹˚ölöe


	)

	@include/signal.h

1 #i‚de‡
_SIGNAL_H


2 
	#_SIGNAL_H


	)

4 
	~<sys/ty≥s.h
>

6 
	tsig_©omic_t
;

7 
	tsig£t_t
;

9 
	#_NSIG
 32

10 
	#NSIG
 
_NSIG


11 

	)

13 
	#SIGHUP
 1

14 
	#SIGINT
 2

15 
	#SIGQUIT
 3

16 
	#SIGILL
 4

17 
	#SIGTRAP
 5

18 
	#SIGABRT
 6

19 
	#SIGIOT
 6

20 
	#SIGUNUSED
 7

21 
	#SIGFPE
 8

22 
	#SIGKILL
 9

23 
	#SIGUSR1
 10

24 
	#SIGSEGV
 11

25 
	#SIGUSR2
 12

26 
	#SIGPIPE
 13

27 
	#SIGALRM
 14

28 
	#SIGTERM
 15

29 
	#SIGSTKFLT
 16

30 
	#SIGCHLD
 17

31 
	#SIGCONT
 18

32 
	#SIGSTOP
 19

33 
	#SIGTSTP
 20

34 
	#SIGTTIN
 21

35 
	#SIGTTOU
 22

36 

	)

39 
	#SA_NOCLDSTOP
 1

40 
	#SA_NOMASK
 0x40000000

41 
	#SA_ONESHOT
 0x80000000

42 

	)

44 
	#SIG_BLOCK
 0

	)

46 
	#SIG_UNBLOCK
 1

	)

48 
	#SIG_SETMASK
 2

	)

51 
	#SIG_DFL
 (((*)())0Ë

	)

53 
	#SIG_IGN
 (((*)())1Ë

	)

63 
	ssiga˘i⁄


65 (*
	mß_h™dÀr
) ();

66 
sig£t_t
 
	mß_mask
;

67 
	mß_Êags
;

68 (*
	mß_ª°‹î
) ();

72 (*
sig«l
 (
_sig
, (*
_func
) ())) ();

74 
	`øi£
 (
sig
);

76 
	`kûl
 (
pid_t
 
pid
, 
sig
);

78 
	`sigadd£t
 (
sig£t_t
 * 
mask
, 
signo
);

80 
	`sigdñ£t
 (
sig£t_t
 * 
mask
, 
signo
);

82 
	`sigem±y£t
 (
sig£t_t
 * 
mask
);

84 
	`sigfûl£t
 (
sig£t_t
 * 
mask
);

86 
	`sigismembî
 (
sig£t_t
 * 
mask
, 
signo
);

88 
	`sig≥ndög
 (
sig£t_t
 * 
£t
);

90 
	`sig¥ocmask
 (
how
, 
sig£t_t
 * 
£t
, sig£t_à* 
ﬁd£t
);

92 
	`sigsu•íd
 (
sig£t_t
 * 
sigmask
);

94 
	`siga˘i⁄
 (
sig
, 
siga˘i⁄
 *
a˘
, siga˘i⁄ *
ﬁda˘
);

	@include/stdarg.h

1 #i‚de‡
_STDARG_H


2 
	#_STDARG_H


	)

4 *
	tva_li°
;

12 
	#__va_rounded_size
(
TYPE
) \

13 ((( (
TYPE
Ë+  (Ë- 1Ë/  ()Ë*  ())

	)

20 #i‚de‡
__•¨c__


21 
	#va_°¨t
(
AP
, 
LASTARG
) \

22 (
AP
 = ((*Ë&(
LASTARG
Ë+ 
	`__va_rounded_size
 (LASTARG)))

	)

24 
	#va_°¨t
(
AP
, 
LASTARG
) \

25 (
	`__buûtö_ßvîegs
 (), \

26 
AP
 = ((*Ë&(
LASTARG
Ë+ 
	`__va_rounded_size
 (LASTARG)))

	)

31 
va_íd
 (
va_li°
);

32 
	#va_íd
(
AP
)

	)

40 
	#va_¨g
(
AP
, 
TYPE
) \

41 (
AP
 +
	`__va_rounded_size
 (
TYPE
), \

42 *((
TYPE
 *Ë(
AP
 - 
	`__va_rounded_size
 (TYPE))))

	)

	@include/stddef.h

1 #i‚de‡
_STDDEF_H


2 
	#_STDDEF_H


	)

4 #i‚de‡
_PTRDIFF_T


5 
	#_PTRDIFF_T


	)

6 
	t±rdiff_t
;

9 #i‚de‡
_SIZE_T


10 
	#_SIZE_T


	)

11 
	tsize_t
;

14 #unde‡
NULL


15 
	#NULL
 0

16 

	)

17 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
) &((TYPE *)0)->MEMBER)

18 

	)

	@include/string.h

1 #i‚de‡
_STRING_H_


2 
	#_STRING_H_


	)

8 #i‚de‡
NULL


9 
	#NULL
 0

	)

12 #i‚de‡
_SIZE_T


13 
	#_SIZE_T


	)

14 
	tsize_t
;

17 *
°ªº‹
 (
î∫o
);

31 
_ölöe
 *

32 
	$°r˝y
 (*
de°
, c⁄° *
§c
)

34 
_asm
{

35 
pushf


36 
mov
 
esi
,
§c


37 
mov
 
edi
,
de°


38 
˛d


39 
l1
: 
lodsb


40 
°osb


41 
ã°
 
Æ
,al

42 
j√
 
l1


43 
p›f


45  
de°
;

46 
	}
}

63 
_ölöe
 *

64 
	$°∫˝y
 (*
de°
, c⁄° *
§c
, 
cou¡
)

66 
_asm
{

67 
pushf


68 
mov
 
esi
,
§c


69 
mov
 
edi
,
de°


70 
mov
 
ecx
,
cou¡


71 
˛d


72 
l1
: 
dec
 
ecx


73 
js
 
l2


74 
lodsb


75 
°osb


76 
ã°
 
Æ
,al

77 
j√
 
l1


78 
ªp
 
°osb


79 
l2
: 
p›f


81  
de°
;

82 
	}
}

102 
_ölöe
 *

103 
	$°rˇt
 (*
de°
, c⁄° *
§c
)

105 
_asm
 {

106 
pushf


107 
mov
 
esi
,
§c


108 
mov
 
edi
,
de°


109 
x‹
 
Æ
,al

110 
mov
 
ecx
,0xffffffff

111 
˛d


112 
ª≤e
 
sˇsb


114 
dec
 
edi


115 
l1
: 
lodsb


116 
°osb


117 
ã°
 
Æ
,al

118 
j√
 
l1


119 
p›f


121  
de°
;

122 
	}
}

142 
_ölöe
 *

143 
	$°∫ˇt
 (*
de°
, c⁄° *
§c
, 
cou¡
)

145 
_asm
 {

146 
pushf


147 
mov
 
esi
,
§c


148 
mov
 
edi
,
de°


149 
x‹
 
Æ
,al

150 
mov
 
ecx
,0xffffffff

151 
˛d


152 
ª≤e
 
sˇsb


153 
dec
 
edi


154 
mov
 
ecx
,
cou¡


155 
l1
: 
dec
 
ecx


156 
js
 
l2


157 
lodsb


158 
°osb


159 
ã°
 
Æ
,al

160 
j√
 
l1


161 
l2
: 
x‹
 
Æ
,al

162 
°osb


163 
p›f


165  
de°
;

166 
	}
}

192 
_ölöe
 

193 
	$°rcmp
 (c⁄° *
c§c
, c⁄° *
˘
)

196 
_asm
{

197 
pushf


198 
mov
 
edi
,
c§c


199 
mov
 
esi
,
˘


200 
˛d


201 
l1
: 
lodsb


202 
sˇsb


203 
j√
 
l2


204 
ã°
 
Æ
,al

205 
j√
 
l1


206 
x‹
 
óx
,eax

207 
jmp
 
l3


208 
l2
: 
mov
 
óx
,1

209 
jl
 
l3


210 
√g
 
óx


212 
l3
: 
p›f


215 
	}
}

239 
_ölöe
 

240 
	$°∫cmp
 (c⁄° *
c§c
, c⁄° *
˘
, 
cou¡
)

243 
_asm
{

244 
pushf


245 
mov
 
edi
,
c§c


246 
mov
 
esi
,
˘


247 
mov
 
ecx
,
cou¡


248 
˛d


249 
l1
: 
dec
 
ecx


250 
js
 
l2


251 
lodsb


252 
sˇsb


253 
j√
 
l3


254 
ã°
 
Æ
,al

255 
j√
 
l1


256 
l2
: 
x‹
 
óx
,eax

257 
jmp
 
l4


258 
l3
: 
mov
 
óx
,1

259 
jl
 
l4


260 
√g
 
óx


262 
l4
: 
p›f


265 
	}
}

292 
_ölöe
 *

293 
	$°rchr
 (c⁄° *
s
, 
c
)

296 
_asm
{

297 
pushf


298 
mov
 
esi
,
s


299 
mov
 
ah
,
c


300 
˛d


301 
l1
: 
lodsb


302 
cmp
 
Æ
,
ah


303 
je
 
l2


304 
ã°
 
Æ
,al

305 
j√
 
l1


306 
mov
 
esi
,1

307 
l2
: 
mov
 
óx
,
esi


308 
dec
 
óx


310 
p›f


313 
	}
}

336 
_ölöe
 *

337 
	$°ºchr
 (c⁄° *
s
, 
c
)

340 
_asm
{

341 
pushf


342 
x‹
 
edx
,edx

343 
mov
 
esi
,
s


344 
mov
 
ah
,
c


345 
˛d


346 
l1
: 
lodsb


347 
cmp
 
Æ
,
ah


348 
j√
 
l2


349 
mov
 
edx
,
esi


350 
dec
 
edx


351 
l2
: 
ã°
 
Æ
,al

352 
j√
 
l1


354 
mov
 
óx
,
edx


355 
p›f


358 
	}
}

380 
_ölöe
 

381 
	$°r•n
 (c⁄° *
c§c
, c⁄° *
˘
)

383 *
__ªs
;

384 
_asm
{

385 
pushf


386 
x‹
 
Æ
,al

387 
mov
 
ebx
,
˘


388 
mov
 
edi
,
ebx


389 
mov
 
ecx
,0xffffffff

390 
˛d


391 
ª≤e
 
sˇsb


392 
nŸ
 
ecx


393 
dec
 
ecx


394 
mov
 
edx
,
ecx


395 
mov
 
esi
,
c§c


396 
l1
: 
lodsb


397 
ã°
 
Æ
,al

398 
je
 
l2


399 
mov
 
edi
,
ebx


400 
mov
 
ecx
,
edx


401 
ª≤e
 
sˇsb


402 
je
 
l1


403 
l2
: 
dec
 
esi


404 
mov
 
__ªs
,
esi


405 
p›f


407  
__ªs
 - 
c§c
;

408 
	}
}

438 
_ölöe
 

439 
	$°rc§˝n
 (c⁄° *
c§c
, c⁄° *
˘
)

441 *
__ªs
;

442 
_asm
{

443 
pushf


444 
x‹
 
Æ
,al

445 
mov
 
ecx
,0xffffffff

446 
mov
 
ebx
,
˘


447 
mov
 
edi
,
ebx


448 
˛d


449 
ª≤e
 
sˇsb


450 
nŸ
 
ecx


451 
dec
 
ecx


452 
mov
 
edx
,
ecx


453 
mov
 
esi
,
c§c


454 
l1
: 
lodsb


455 
ã°
 
Æ
,al

456 
je
 
l2


457 
mov
 
edi
,
ebx


458 
mov
 
ecx
,
edx


459 
ª≤e
 
sˇsb


460 
j√
 
l1


461 
l2
: 
dec
 
esi


462 
mov
 
__ªs
,
esi


463 
p›f


465  
__ªs
 - 
c§c
;

466 
	}
}

496 
_ölöe
 *

497 
	$°Ωbrk
 (c⁄° *
c§c
, c⁄° *
˘
)

500 
_asm
{

501 
pushf


502 
x‹
 
Æ
,al

503 
mov
 
ebx
,
˘


504 
mov
 
edi
,
ebx


505 
mov
 
ecx
,0xffffffff

506 
˛d


507 
ª≤e
 
sˇsb


508 
nŸ
 
ecx


509 
dec
 
ecx


510 
mov
 
edx
,
ecx


511 
mov
 
esi
,
c§c


512 
l1
: 
lodsb


513 
ã°
 
Æ
,al

514 
je
 
l2


515 
mov
 
edi
,
ebx


516 
mov
 
ecx
,
edx


517 
ª≤e
 
sˇsb


518 
j√
 
l1


519 
dec
 
esi


520 
jmp
 
l3


521 
l2
: 
x‹
 
esi
,esi

523 
l3
: 
mov
 
óx
,
esi


524 
p›f


527 
	}
}

559 
_ölöe
 *

560 
	$°r°r
 (c⁄° *
c§c
, c⁄° *
˘
)

563 
_asm
 {

564 
pushf


565 
mov
 
ebx
,
˘


566 
mov
 
edi
,
ebx


567 
mov
 
ecx
,0xffffffff

568 
x‹
 
Æ
,al

569 
˛d


570 
ª≤e
 
sˇsb


571 
nŸ
 
ecx


572 
dec
 
ecx


574 
mov
 
edx
,
ecx


575 
mov
 
esi
,
c§c


576 
l1
: 
mov
 
edi
,
ebx


577 
mov
 
ecx
,
edx


578 
mov
 
óx
,
esi


579 
ª≥
 
cmpsb


580 
je
 
l2


582 
xchg
 
esi
,
óx


583 
öc
 
esi


584 
cmp
 [
óx
-1],0

585 
j√
 
l1


586 
x‹
 
óx
,eax

588 
l2
: 
p›f


591 
	}
}

625 
_ölöe
 

626 
	$°æí
 (c⁄° *
s
)

629 
_asm
{

630 
pushf


631 
mov
 
edi
,
s


632 
mov
 
ecx
,0xffffffff

633 
x‹
 
Æ
,al

634 
˛d


635 
ª≤e
 
sˇsb


636 
nŸ
 
ecx


637 
dec
 
ecx


639 
mov
 
óx
,
ecx


640 
p›f


643 
	}
}

657 *
___°πok
;

669 
_ölöe
 *

670 
	$°πok
 (*
s
, c⁄° *
˘
)

673 
_asm
 {

674 
pushf


675 
mov
 
esi
,
s


676 
ã°
 
esi
,esi

677 
j√
 
l1


678 
mov
 
ebx
,
°πok


679 
ã°
 
ebx
,ebx

680 
je
 
l8


681 
mov
 
esi
,
ebx


682 
l1
: 
x‹
 
ebx
,ebx

683 
mov
 
edi
,
˘


684 
mov
 
ecx
,0xffffffff

685 
x‹
 
óx
,eax

686 
˛d


687 
ª≤e
 
sˇsb


688 
nŸ
 
ecx


689 
dec
 
ecx


690 
je
 
l7


691 
mov
 
edx
,
ecx


692 
l2
: 
lodsb


693 
ã°
 
Æ
,al

694 
je
 
l7


695 
mov
 
edi
,
˘


696 
mov
 
ecx
,
edx


697 
ª≤e
 
sˇsb


698 
je
 
l2


699 
dec
 
esi


700 
cmp
 [
esi
],0

701 
je
 
l7


702 
mov
 
ebx
,
esi


703 
l3
: 
lodsb


704 
ã°
 
Æ
,al

705 
je
 
l5


706 
mov
 
edi
,
˘


707 
mov
 
ecx
,
edx


708 
ª≤e
 
sˇsb


709 
j√
 
l3


710 
dec
 
esi


711 
cmp
 [
esi
],0

712 
je
 
l5


713 
mov
 [
esi
],0

714 
öc
 
esi


715 
jmp
 
l6


716 
l5
: 
x‹
 
esi
,esi

717 
l6
: 
cmp
 [
ebx
],0

718 
j√
 
l7


719 
x‹
 
ebx
,ebx

720 
l7
: 
ã°
 
ebx
,ebx

721 
j√
 
l8


722 
mov
 
esi
,
ebx


724 
l8
: 
mov
 
óx
,
esi


725 
p›f


728 
	}
}

791 
_ölöe
 *

792 
	$mem˝y
 (*
de°
, c⁄° *
§c
, 
n
)

794 
_asm
{

795 
pushf


796 
mov
 
esi
,
§c


797 
mov
 
edi
,
de°


798 
mov
 
ecx
,
n


799 
˛d


800 
ªp
 
movsb


801 
p›f


803  
de°
;

804 
	}
}

820 
_ölöe
 *

821 
	$memmove
 (*
de°
, c⁄° *
§c
, 
n
)

823 i‡(
de°
 < 
§c
)

824 {
_asm
 {

825 
pushf


826 
mov
 
esi
,
§c


827 
mov
 
edi
,
de°


828 
mov
 
ecx
,
n


829 
˛d


830 
ªp
 
movsb


831 
p›f


832 }}{
_asm
 {

833 
pushf


835 
mov
 
esi
,
§c


836 
add
 
esi
,
n
 - 1

838 
mov
 
edi
,
de°


839 
add
 
edi
,
n
 - 1

840 
mov
 
ecx
,
n


841 
°d


842 
ªp
 
movsb


843 
p›f


845  
de°
;

846 
	}
}

868 
_ölöe
 

869 
	$memcmp
 (c⁄° *
c§c
, c⁄° *
˘
, 
cou¡
)

872 
_asm
 {

873 
pushf


874 
mov
 
edi
,
c§c


875 
mov
 
esi
,
˘


876 
x‹
 
óx
,eax

877 
mov
 
ecx
,
cou¡


878 
˛d


879 
ª≥
 
cmpsb


880 
je
 
l1


881 
mov
 
óx
,1

882 
jl
 
l1


883 
√g
 
óx


885 
l1
: 
p›f


888 
	}
}

909 
_ölöe
 *

910 
	$memchr
 (c⁄° *
c§c
, 
c
, 
cou¡
)

913 i‡(!
cou¡
)

914  
NULL
;

915 
_asm
 {

916 
pushf


917 
mov
 
edi
,
c§c


918 
mov
 
ecx
,
cou¡


919 
mov
 
Æ
,
c


920 
˛d


921 
ª≤e
 
sˇsb


922 
je
 
l1


923 
mov
 
edi
,1

924 
l1
: 
dec
 
edi


926 
mov
 
óx
,
edi


927 
p›f


930 
	}
}

950 
_ölöe
 *

951 
	$mem£t
 (*
s
, 
c
, 
cou¡
)

953 
_asm
 {

954 
pushf


955 
mov
 
edi
,
s


956 
mov
 
ecx
,
cou¡


957 
mov
 
Æ
,
c


958 
˛d


959 
ªp
 
°osb


960 
p›f


962  
s
;

963 
	}
}

	@include/sys/stat.h

1 #i‚de‡
_SYS_STAT_H


2 
	#_SYS_STAT_H


	)

4 
	~<sys/ty≥s.h
>

6 
	s°©


8 
dev_t
 
	m°_dev
;

9 
öo_t
 
	m°_öo
;

10 
umode_t
 
	m°_mode
;

11 
∆ök_t
 
	m°_∆ök
;

12 
uid_t
 
	m°_uid
;

13 
gid_t
 
	m°_gid
;

14 
dev_t
 
	m°_rdev
;

15 
off_t
 
	m°_size
;

16 
time_t
 
	m°_©ime
;

17 
time_t
 
	m°_mtime
;

18 
time_t
 
	m°_˘ime
;

23 
	#S_IFMT
 00170000

24 
	#S_IFREG
 0100000

25 
	#S_IFBLK
 0060000

26 
	#S_IFDIR
 0040000

27 
	#S_IFCHR
 0020000

28 
	#S_IFIFO
 0010000

30 
	#S_ISUID
 0004000

31 
	#S_ISGID
 0002000

32 
	#S_ISVTX
 0001000

33 

	)

34 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

35 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

36 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

37 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

38 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

39 

	)

40 
	#S_IRWXU
 00700

41 
	#S_IRUSR
 00400

42 
	#S_IWUSR
 00200

43 
	#S_IXUSR
 00100

44 

	)

45 
	#S_IRWXG
 00070

46 
	#S_IRGRP
 00040

47 
	#S_IWGRP
 00020

48 
	#S_IXGRP
 00010

49 

	)

50 
	#S_IRWXO
 00007

51 
	#S_IROTH
 00004

52 
	#S_IWOTH
 00002

53 
	#S_IXOTH
 00001

54 

	)

55 
chmod
 (c⁄° *
_∑th
, 
mode_t
 
mode
);

56 
f°©
 (
fûdes
, 
°©
 *
°©_buf
);

57 
mkdú
 (c⁄° *
_∑th
, 
mode_t
 
mode
);

58 
mkfifo
 (c⁄° *
_∑th
, 
mode_t
 
mode
);

59 
°©
 (c⁄° *
fûíame
, °© *
°©_buf
);

60 
mode_t
 
umask
 (mode_à
mask
);

	@include/sys/times.h

1 #i‚de‡
_TIMES_H


2 
	#_TIMES_H


	)

4 
	~<sys/ty≥s.h
>

6 
	stms


8 
time_t
 
	mtms_utime
;

9 
time_t
 
	mtms_°ime
;

10 
time_t
 
	mtms_cutime
;

11 
time_t
 
	mtms_c°ime
;

14 
time_t
 
times
 (
tms
 *
ç
);

	@include/sys/types.h

1 #i‚de‡
_SYS_TYPES_H


2 
	#_SYS_TYPES_H


	)

4 #i‚de‡
_SIZE_T


5 
	#_SIZE_T


	)

6 
	tsize_t
;

9 #i‚de‡
_TIME_T


10 
	#_TIME_T


	)

11 
	ttime_t
;

14 #i‚de‡
_PTRDIFF_T


15 
	#_PTRDIFF_T


	)

16 
	t±rdiff_t
;

19 #i‚de‡
NULL


20 
	#NULL
 0

	)

23 
	tpid_t
;

24 
	tuid_t
;

25 
	tgid_t
;

26 
	tdev_t
;

27 
	töo_t
;

28 
	tmode_t
;

29 
	tumode_t
;

30 
	t∆ök_t
;

31 
	tdaddr_t
;

32 
	toff_t
;

33 
	tu_ch¨
;

34 
	tush‹t
;

38 
	mquŸ
, 
	mªm
;

40 
	tdiv_t
;

43 
	mquŸ
, 
	mªm
;

45 
	tldiv_t
;

47 
	su°©


49 
daddr_t
 
	mf_t‰ì
;

50 
öo_t
 
	mf_töode
;

51 
	mf_‚ame
[6];

52 
	mf_Âack
[6];

	@include/sys/utsname.h

1 #i‚de‡
_SYS_UTSNAME_H


2 
	#_SYS_UTSNAME_H


	)

4 
	~<sys/ty≥s.h
>

6 
	sut¢ame


8 
	msy¢ame
[9];

9 
	mnodíame
[9];

10 
	mªÀa£
[9];

11 
	mvîsi⁄
[9];

12 
	mmachöe
[9];

15 
u«me
 (
ut¢ame
 *
utsbuf
);

	@include/sys/wait.h

1 #i‚de‡
_SYS_WAIT_H


2 
	#_SYS_WAIT_H


	)

4 
	~<sys/ty≥s.h
>

6 
	#_LOW
(
v
) ( (v) & 0377)

7 
	#_HIGH
(
v
) ( ((v) >> 8) & 0377)

8 

	)

11 
	#WNOHANG
 1

12 
	#WUNTRACED
 2

13 

	)

14 
	#WIFEXITED
(
s
) (!((s)&0xFF)

15 
	#WIFSTOPPED
(
s
) (((s)&0xFF)==0x7F)

16 
	#WEXITSTATUS
(
s
) (((s)>>8)&0xFF)

17 
	#WTERMSIG
(
s
) ((s)&0x7F)

18 
	#WSTOPSIG
(
s
) (((s)>>8)&0xFF)

19 
	#WIFSIGNALED
(
s
) ((()(s)-1 & 0xFFFF) < 0xFF)

21 

	)

30 
pid_t
 
waô
 (*
°©_loc
);

31 
pid_t
 
waôpid
 (pid_à
pid
, *
°©_loc
, 
›ti⁄s
);

	@include/termios.h

1 #i‚de‡
_TERMIOS_H


2 
	#_TERMIOS_H


	)

4 
	#TTY_BUF_SIZE
 1024

5 

	)

12 
	#TCGETS
 0x5401

	)

14 
	#TCSETS
 0x5402

	)

17 
	#TCSETSW
 0x5403

	)

20 
	#TCSETSF
 0x5404

	)

22 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

27 
	#TCSETAW
 0x5407

	)

30 
	#TCSETAF
 0x5408

	)

32 
	#TCSBRK
 0x5409

	)

35 
	#TCXONC
 0x540A

	)

38 
	#TCFLSH
 0x540B

	)

41 
	#TIOCEXCL
 0x540C

	)

43 
	#TIOCNXCL
 0x540D

	)

45 
	#TIOCSCTTY
 0x540E

	)

47 
	#TIOCGPGRP
 0x540F

	)

49 
	#TIOCSPGRP
 0x5410

	)

51 
	#TIOCOUTQ
 0x5411

	)

54 
	#TIOCSTI
 0x5412

	)

56 
	#TIOCGWINSZ
 0x5413

	)

58 
	#TIOCSWINSZ
 0x5414

	)

60 
	#TIOCMGET
 0x5415

	)

62 
	#TIOCMBIS
 0x5416

	)

64 
	#TIOCMBIC
 0x5417

	)

66 
	#TIOCMSET
 0x5418

	)

71 
	#TIOCGSOFTCAR
 0x5419

	)

73 
	#TIOCSSOFTCAR
 0x541A

	)

75 
	#TIOCINQ
 0x541B

	)

79 
	swösize


81 
	mws_row
;

82 
	mws_cﬁ
;

83 
	mws_xpixñ
;

84 
	mws_ypixñ
;

88 
	#NCC
 8

89 
	sãrmio


	)

91 
	mc_iÊag
;

92 
	mc_oÊag
;

93 
	mc_cÊag
;

94 
	mc_lÊag
;

95 
	mc_löe
;

96 
	mc_cc
[
NCC
];

100 
	#NCCS
 17

101 
	sãrmios


	)

103 
	mc_iÊag
;

104 
	mc_oÊag
;

105 
	mc_cÊag
;

106 
	mc_lÊag
;

107 
	mc_löe
;

108 
	mc_cc
[
NCCS
];

113 
	#VINTR
 0

114 
	#VQUIT
 1

115 
	#VERASE
 2

116 
	#VKILL
 3

117 
	#VEOF
 4

118 
	#VTIME
 5

119 
	#VMIN
 6

120 
	#VSWTC
 7

121 
	#VSTART
 8

122 
	#VSTOP
 9

123 
	#VSUSP
 10

124 
	#VEOL
 11

125 
	#VREPRINT
 12

126 
	#VDISCARD
 13

127 
	#VWERASE
 14

128 
	#VLNEXT
 15

129 
	#VEOL2
 16

130 

	)

133 
	#IGNBRK
 0000001

134 
	#BRKINT
 0000002

135 
	#IGNPAR
 0000004

136 
	#PARMRK
 0000010

137 
	#INPCK
 0000020

138 
	#ISTRIP
 0000040

139 
	#INLCR
 0000100

140 
	#IGNCR
 0000200

141 
	#ICRNL
 0000400

142 
	#IUCLC
 0001000

143 
	#IXON
 0002000

144 
	#IXANY
 0004000

145 
	#IXOFF
 0010000

146 
	#IMAXBEL
 0020000

147 

	)

150 
	#OPOST
 0000001

151 
	#OLCUC
 0000002

152 
	#ONLCR
 0000004

153 
	#OCRNL
 0000010

154 
	#ONOCR
 0000020

155 
	#ONLRET
 0000040

156 
	#OFILL
 0000100

157 
	#OFDEL
 0000200

158 
	#NLDLY
 0000400

159 
	#NL0
 0000000

160 
	#NL1
 0000400

161 
	#CRDLY
 0003000

162 
	#CR0
 0000000

163 
	#CR1
 0001000

164 
	#CR2
 0002000

165 
	#CR3
 0003000

166 
	#TABDLY
 0014000

167 
	#TAB0
 0000000

168 
	#TAB1
 0004000

169 
	#TAB2
 0010000

170 
	#TAB3
 0014000

171 
	#XTABS
 0014000

172 
	#BSDLY
 0020000

173 
	#BS0
 0000000

174 
	#BS1
 0020000

175 
	#VTDLY
 0040000

176 
	#VT0
 0000000

177 
	#VT1
 0040000

178 
	#FFDLY
 0040000

179 
	#FF0
 0000000

180 
	#FF1
 0040000

181 

	)

184 
	#CBAUD
 0000017

185 
	#B0
 0000000

	)

186 
	#B50
 0000001

187 
	#B75
 0000002

188 
	#B110
 0000003

189 
	#B134
 0000004

190 
	#B150
 0000005

191 
	#B200
 0000006

192 
	#B300
 0000007

193 
	#B600
 0000010

194 
	#B1200
 0000011

195 
	#B1800
 0000012

196 
	#B2400
 0000013

197 
	#B4800
 0000014

198 
	#B9600
 0000015

199 
	#B19200
 0000016

200 
	#B38400
 0000017

201 
	#EXTA
 
B19200


202 
	#EXTB
 
B38400


203 
	#CSIZE
 0000060

204 
	#CS5
 0000000

205 
	#CS6
 0000020

206 
	#CS7
 0000040

207 
	#CS8
 0000060

208 
	#CSTOPB
 0000100

209 
	#CREAD
 0000200

210 
	#CPARENB
 0000400

211 
	#CPARODD
 0001000

212 
	#HUPCL
 0002000

213 
	#CLOCAL
 0004000

214 
	#CIBAUD
 03600000

	)

215 
	#CRTSCTS
 020000000000

	)

217 
	#PARENB
 
CPARENB


218 
	#PARODD
 
CPARODD


219 

	)

222 
	#ISIG
 0000001

223 
	#ICANON
 0000002

224 
	#XCASE
 0000004

225 
	#ECHO
 0000010

226 
	#ECHOE
 0000020

227 
	#ECHOK
 0000040

228 
	#ECHONL
 0000100

229 
	#NOFLSH
 0000200

231 
	#TOSTOP
 0000400

233 
	#ECHOCTL
 0001000

235 
	#ECHOPRT
 0002000

236 
	#ECHOKE
 0004000

237 
	#FLUSHO
 0010000

238 
	#PENDIN
 0040000

239 
	#IEXTEN
 0100000

240 

	)

242 
	#TIOCM_LE
 0x001

243 
	#TIOCM_DTR
 0x002

244 
	#TIOCM_RTS
 0x004

245 
	#TIOCM_ST
 0x008

246 
	#TIOCM_SR
 0x010

247 
	#TIOCM_CTS
 0x020

248 
	#TIOCM_CAR
 0x040

249 
	#TIOCM_RNG
 0x080

250 
	#TIOCM_DSR
 0x100

251 
	#TIOCM_CD
 
TIOCM_CAR


	)

252 
	#TIOCM_RI
 
TIOCM_RNG


	)

255 
	#TCOOFF
 0

256 
	#TCOON
 1

257 
	#TCIOFF
 2

258 
	#TCION
 3

259 

	)

261 
	#TCIFLUSH
 0

262 
	#TCOFLUSH
 1

263 
	#TCIOFLUSH
 2

264 

	)

266 
	#TCSANOW
 0

267 
	#TCSADRAIN
 1

268 
	#TCSAFLUSH
 2

270 

	)

271 
	t•ìd_t
;

274 
•ìd_t
 
cfgëi•ìd
 (
ãrmios
 *
ãrmios_p
);

276 
•ìd_t
 
cfgëo•ìd
 (
ãrmios
 *
ãrmios_p
);

278 
cf£ti•ìd
 (
ãrmios
 *
ãrmios_p
, 
•ìd_t
 
•ìd
);

280 
cf£to•ìd
 (
ãrmios
 *
ãrmios_p
, 
•ìd_t
 
•ìd
);

282 
tcdøö
 (
fûdes
);

284 
tcÊow
 (
fûdes
, 
a˘i⁄
);

286 
tcÊush
 (
fûdes
, 
queue_£À˘‹
);

288 
tcgë©å
 (
fûdes
, 
ãrmios
 *
ãrmios_p
);

290 
tc£ndbªak
 (
fûdes
, 
duøti⁄
);

292 
tc£èâr
 (
fûdes
, 
›ti⁄Æ_a˘i⁄s
,

293 
ãrmios
 *
ãrmios_p
);

	@include/time.h

1 #i‚de‡
_TIME_H


2 
	#_TIME_H


	)

4 #i‚de‡
_TIME_T


5 
	#_TIME_T


	)

6 
	ttime_t
;

9 #i‚de‡
_SIZE_T


10 
	#_SIZE_T


	)

11 
	tsize_t
;

14 
	#CLOCKS_PER_SEC
 100

15 

	)

16 
	t˛ock_t
;

18 
	stm


20 
	mtm_£c
;

21 
	mtm_mö
;

22 
	mtm_hour
;

23 
	mtm_mday
;

24 
	mtm_m⁄
;

25 
	mtm_yór
;

26 
	mtm_wday
;

27 
	mtm_yday
;

28 
	mtm_isd°
;

33 
˛ock_t
 
˛ock
 ();

35 
time_t
 
time
 (time_à* 
ç
);

37 
dif·ime
 (
time_t
 
time2
,Åime_à
time1
);

39 
time_t
 
mktime
 (
tm
 *
ç
);

42 *
as˘ime
 (c⁄° 
tm
 *
ç
);

44 *
˘ime
 (c⁄° 
time_t
 * 
ç
);

46 
tm
 *
gmtime
 (c⁄° 
time_t
 * 
ç
);

48 
tm
 *
loˇ…ime
 (c⁄° 
time_t
 * 
ç
);

50 
size_t
 
°r·ime
 (*
s
, size_à
smax
, c⁄° *
fmt
, c⁄° 
tm
 *
ç
);

53 
tz£t
 ();

	@include/unistd.h

1 #i‚de‡
_UNISTD_H


2 
	#_UNISTD_H


	)

7 
	#_POSIX_VERSION
 198808L

	)

10 
	#_POSIX_CHOWN_RESTRICTED


	)

12 
	#_POSIX_NO_TRUNC


	)

14 
	#_POSIX_VDISABLE
 '\0'

	)

20 
	#STDIN_FILENO
 0

21 
	#STDOUT_FILENO
 1

22 
	#STDERR_FILENO
 2

23 

	)

24 #i‚de‡
NULL


25 
	#NULL
 0

27 

	)

30 
	#F_OK
 0

31 
	#X_OK
 1

32 
	#W_OK
 2

33 
	#R_OK
 4

34 

	)

37 
	#SEEK_SET
 0

38 
	#SEEK_CUR
 1

39 
	#SEEK_END
 2

40 

	)

44 
	#_SC_ARG_MAX
 1

45 
	#_SC_CHILD_MAX
 2

46 
	#_SC_CLOCKS_PER_SEC
 3

47 
	#_SC_NGROUPS_MAX
 4

48 
	#_SC_OPEN_MAX
 5

49 
	#_SC_JOB_CONTROL
 6

50 
	#_SC_SAVED_IDS
 7

51 
	#_SC_VERSION
 8

52 

	)

56 
	#_PC_LINK_MAX
 1

57 
	#_PC_MAX_CANON
 2

58 
	#_PC_MAX_INPUT
 3

59 
	#_PC_NAME_MAX
 4

60 
	#_PC_PATH_MAX
 5

61 
	#_PC_PIPE_BUF
 6

62 
	#_PC_NO_TRUNC
 7

63 
	#_PC_VDISABLE
 8

64 
	#_PC_CHOWN_RESTRICTED
 9

65 

	)

66 
	~<sys/°©.h
>

67 
	~<sys/times.h
>

68 
	~<sys/ut¢ame.h
>

69 
	~<utime.h
>

71 #ifde‡
__LIBRARY__


74 
	#__NR_£tup
 0

	)

76 
	#__NR_exô
 1

	)

77 
	#__NR_f‹k
 2

	)

78 
	#__NR_ªad
 3

	)

79 
	#__NR_wrôe
 4

	)

80 
	#__NR_›í
 5

	)

81 
	#__NR_˛o£
 6

	)

82 
	#__NR_waôpid
 7

	)

83 
	#__NR_¸ót
 8

	)

84 
	#__NR_lök
 9

	)

85 
	#__NR_u∆ök
 10

	)

86 
	#__NR_execve
 11

	)

87 
	#__NR_chdú
 12

	)

88 
	#__NR_time
 13

	)

89 
	#__NR_mknod
 14

	)

90 
	#__NR_chmod
 15

	)

91 
	#__NR_chown
 16

	)

92 
	#__NR_bªak
 17

	)

93 
	#__NR_°©
 18

	)

94 
	#__NR_l£ek
 19

	)

95 
	#__NR_gëpid
 20

	)

96 
	#__NR_mou¡
 21

	)

97 
	#__NR_umou¡
 22

	)

98 
	#__NR_£tuid
 23

	)

99 
	#__NR_gëuid
 24

	)

100 
	#__NR_°ime
 25

	)

101 
	#__NR_±ø˚
 26

	)

102 
	#__NR_Æ¨m
 27

	)

103 
	#__NR_f°©
 28

	)

104 
	#__NR_∑u£
 29

	)

105 
	#__NR_utime
 30

	)

106 
	#__NR_°ty
 31

	)

107 
	#__NR_gây
 32

	)

108 
	#__NR_ac˚ss
 33

	)

109 
	#__NR_ni˚
 34

	)

110 
	#__NR_·ime
 35

	)

111 
	#__NR_sync
 36

	)

112 
	#__NR_kûl
 37

	)

113 
	#__NR_ª«me
 38

	)

114 
	#__NR_mkdú
 39

	)

115 
	#__NR_rmdú
 40

	)

116 
	#__NR_dup
 41

	)

117 
	#__NR_pùe
 42

	)

118 
	#__NR_times
 43

	)

119 
	#__NR_¥of
 44

	)

120 
	#__NR_brk
 45

	)

121 
	#__NR_£tgid
 46

	)

122 
	#__NR_gëgid
 47

	)

123 
	#__NR_sig«l
 48

	)

124 
	#__NR_gëeuid
 49

	)

125 
	#__NR_gëegid
 50

	)

126 
	#__NR_ac˘
 51

	)

127 
	#__NR_phys
 52

	)

128 
	#__NR_lock
 53

	)

129 
	#__NR_io˘l
 54

	)

130 
	#__NR_f˙é
 55

	)

131 
	#__NR_mpx
 56

	)

132 
	#__NR_£çgid
 57

	)

133 
	#__NR_ulimô
 58

	)

134 
	#__NR_u«me
 59

	)

135 
	#__NR_umask
 60

	)

136 
	#__NR_chroŸ
 61

	)

137 
	#__NR_u°©
 62

	)

138 
	#__NR_dup2
 63

	)

139 
	#__NR_gëµid
 64

	)

140 
	#__NR_gëpgΩ
 65

	)

141 
	#__NR_£tsid
 66

	)

142 
	#__NR_siga˘i⁄
 67

	)

143 
	#__NR_sgëmask
 68

	)

144 
	#__NR_s£tmask
 69

	)

145 
	#__NR_£åeuid
 70

	)

146 
	#__NR_£åegid
 71

	)

153 
	#_sysˇŒ0
(
ty≥
,
«me
) \

154 
ty≥
 
	`«me
() \

156 vﬁ©ûê
__ªs
; \

157 
_asm
 { \

158 
_asm
 
mov
 
óx
,
__NR_
##
«me
\

159 
_asm
 80
h
 \

160 
_asm
 
mov
 
__ªs
,
óx
 \

162 i‡(
__ªs
 >= 0) \

163  (
ty≥
Ë
__ªs
; \

164 
î∫o
 = -
__ªs
; \

166 }

	)

183 
	#_sysˇŒ1
(
ty≥
,
«me
,
©y≥
,
a
) \

184 
ty≥
 
	`«me
(
©y≥
 
a
) \

186 vﬁ©ûê
__ªs
; \

187 
_asm
 { \

188 
_asm
 
mov
 
óx
,
__NR_
##
«me
 \

189 
_asm
 
mov
 
ebx
,
a
 \

190 
_asm
 80
h
 \

191 
_asm
 
mov
 
__ªs
,
óx
 \

193 i‡(
__ªs
 >= 0) \

194  (
ty≥
Ë
__ªs
; \

195 
î∫o
 = -
__ªs
; \

197 }

	)

213 
	#_sysˇŒ2
(
ty≥
,
«me
,
©y≥
,
a
,
bty≥
,
b
) \

214 
ty≥
 
	`«me
(
©y≥
 
a
,
bty≥
 
b
) \

216 vﬁ©ûê
__ªs
; \

217 
_asm
 { \

218 
_asm
 
mov
 
óx
,
__NR_
##
«me
 \

219 
_asm
 
mov
 
ebx
,
a
 \

220 
_asm
 
mov
 
ecx
,
b
 \

221 
_asm
 80
h
 \

222 
_asm
 
mov
 
__ªs
,
óx
 \

224 i‡(
__ªs
 >= 0) \

225  (
ty≥
Ë
__ªs
; \

226 
î∫o
 = -
__ªs
; \

228 }

	)

244 
	#_sysˇŒ3
(
ty≥
,
«me
,
©y≥
,
a
,
bty≥
,
b
,
˘y≥
,
c
) \

245 
ty≥
 
	`«me
(
©y≥
 
a
,
bty≥
 
b
,
˘y≥
 
c
) \

247 vﬁ©ûê
__ªs
; \

248 
_asm
 { \

249 
_asm
 
mov
 
óx
,
__NR_
##
«me
 \

250 
_asm
 
mov
 
ebx
,
a
 \

251 
_asm
 
mov
 
ecx
,
b
 \

252 
_asm
 
mov
 
edx
,
c
 \

253 
_asm
 80
h
 \

254 
_asm
 
mov
 
__ªs
,
óx
 \

256 i‡(
__ªs
 >= 0) \

257  (
ty≥
Ë
__ªs
; \

258 
î∫o
 = -
__ªs
; \

260 }

	)

276 
î∫o
;

279 
ac˚ss
(c⁄° * 
fûíame
, 
mode_t
 
mode
);

280 
ac˘
(c⁄° * 
fûíame
);

281 
Æ¨m
(
£c
);

282 
brk
(* 
íd_d©a_£gmít
);

283 * 
sbrk
(
±rdiff_t
 
ö¸emít
);

284 
chdú
(c⁄° * 
fûíame
);

285 
chmod
(c⁄° * 
fûíame
, 
mode_t
 
mode
);

286 
chown
(c⁄° * 
fûíame
, 
uid_t
 
ow√r
, 
gid_t
 
group
);

287 
chroŸ
(c⁄° * 
fûíame
);

288 
˛o£
(
fûdes
);

289 
¸ót
(c⁄° * 
fûíame
, 
mode_t
 
mode
);

290 
dup
(
fûdes
);

291 
execve
(c⁄° * 
fûíame
, ** 
¨gv
, ** 
ívp
);

292 
execv
(c⁄° * 
∑th«me
, ** 
¨gv
);

293 
execvp
(c⁄° * 
fûe
, ** 
¨gv
);

294 
exe˛
(c⁄° * 
∑th«me
, * 
¨g0
, ...);

295 
exe˛p
(c⁄° * 
fûe
, * 
¨g0
, ...);

296 
exe˛e
(c⁄° * 
∑th«me
, * 
¨g0
, ...);

297 
exô
(
°©us
);

298 
_exô
(
°©us
);

299 
f˙é
(
fûdes
, 
cmd
, ...);

300 
f‹k
();

301 
gëpid
();

302 
gëuid
();

303 
gëeuid
();

304 
gëgid
();

305 
gëegid
();

306 
io˘l
(
fûdes
, 
cmd
, ...);

307 
kûl
(
pid_t
 
pid
, 
sig«l
);

308 
lök
(c⁄° * 
fûíame1
, c⁄° * 
fûíame2
);

309 
l£ek
(
fûdes
, 
off_t
 
off£t
, 
‹igö
);

310 
mknod
(c⁄° * 
fûíame
, 
mode_t
 
mode
, 
dev_t
 
dev
);

311 
mou¡
(c⁄° * 
•ecülfûe
, c⁄° * 
dú
, 
rwÊag
);

312 
ni˚
(
vÆ
);

313 
›í
(c⁄° * 
fûíame
, 
Êag
, ...);

314 
∑u£
();

315 
pùe
(* 
fûdes
);

316 
ªad
(
fûdes
, * 
buf
, 
off_t
 
cou¡
);

317 
£çgΩ
();

318 
£çgid
(
pid_t
 
pid
,pid_à
pgid
);

319 
£tuid
(
uid_t
 
uid
);

320 
£tgid
(
gid_t
 
gid
);

321 (*
sig«l
(
sig
, (*
‚
)()))();

322 
	`°©
(c⁄° * 
fûíame
, 
°©
 * 
°©_buf
);

323 
	`f°©
(
fûdes
, 
°©
 * 
°©_buf
);

324 
	`°ime
(
time_t
 * 
çå
);

325 
	`sync
();

326 
time_t
 
	`time
—ime_à* 
éoc
);

327 
time_t
 
	`times
(
tms
 * 
tbuf
);

328 
	`ulimô
(
cmd
, 
limô
);

329 
mode_t
 
	`umask
(mode_à
mask
);

330 
	`umou¡
(c⁄° * 
•ecülfûe
);

331 
	`u«me
(
ut¢ame
 * 
«me
);

332 
	`u∆ök
(c⁄° * 
fûíame
);

333 
	`u°©
(
dev_t
 
dev
, 
u°©
 * 
ubuf
);

334 
	`utime
(c⁄° * 
fûíame
, 
utimbuf
 * 
times
);

335 
pid_t
 
	`waôpid
’id_à
pid
,* 
waô_°©
,
›ti⁄s
);

336 
pid_t
 
	`waô
(* 
waô_°©
);

337 
	`wrôe
(
fûdes
, c⁄° * 
buf
, 
off_t
 
cou¡
);

338 
	`dup2
(
ﬁdfd
, 
√wfd
);

339 
	`gëµid
();

340 
pid_t
 
	`gëpgΩ
();

341 
pid_t
 
	`£tsid
();

	@include/utime.h

1 #i‚de‡
_UTIME_H


2 
	#_UTIME_H


	)

4 
	~<sys/ty≥s.h
>

6 
	sutimbuf


8 
time_t
 
	ma˘ime
;

9 
time_t
 
	mmodtime
;

13 
utime
 (c⁄° *
fûíame
, 
utimbuf
 *
times
);

	@init/main.c

6 
	~<£t_£g.h
>

8 
	#__LIBRARY__


9 

	)

10 
	~<uni°d.h
>

11 
	~<time.h
>

23 
_ölöe
 
	$_sysˇŒ0
(,
f‹k
)

27 
_ölöe
 
	$_sysˇŒ0
(,
∑u£
)

29 
_ölöe
 
	$_sysˇŒ1
(,
£tup
,*,
BIOS
)

31 
_ölöe
 
	$_sysˇŒ0
(,
sync
)

33 
	~<löux/ây.h
>

35 
	~<löux/sched.h
>

38 
	~<löux/hód.h
>

40 
	~<asm/sy°em.h
>

42 
	~<asm/io.h
>

45 
	~<°ddef.h
>

46 
	~<°d¨g.h
>

49 
	~<f˙é.h
>

51 
	~<sys/ty≥s.h
>

53 
	~<löux/fs.h
>

56 
¥ötbuf
[1024];

58 
	`v•rötf
();

59 
	`öô
();

60 
	`blk_dev_öô
();

61 
	`chr_dev_öô
();

62 
	`hd_öô
();

63 
	`Ê›py_öô
();

64 
	`mem_öô
(
°¨t
, 
íd
);

65 
	`rd_öô
(
mem_°¨t
, 
Àngth
);

66 
	`kî√l_mktime
(
tm
 *Åm);

67 
°¨tup_time
;

72 
	#EXT_MEM_K
 (*(*)0x90002)

73 
	#DRIVE_INFO
 (*(
drive_öfo
 *)0x90080)

74 
	#ORIG_ROOT_DEV
 (*(*)0x901FC)

75 

	)

89 
_ölöe
 
	$CMOS_READ
(
addr
)

91 
	`outb_p
(
addr
,0x70);

92  
	`öb_p
(0x71);

93 
	}
}

96 
	#BCD_TO_BIN
(
vÆ
Ë((vÆ)=((vÆ)&15Ë+ ((vÆ)>>4)*10)

	)

99 
	$time_öô
()

101 
tm
 
time
;

104 
time
.
tm_£c
 = 
	`CMOS_READ
(0);

105 
time
.
tm_mö
 = 
	`CMOS_READ
(2);

106 
time
.
tm_hour
 = 
	`CMOS_READ
(4);

107 
time
.
tm_mday
 = 
	`CMOS_READ
(7);

108 
time
.
tm_m⁄
 = 
	`CMOS_READ
(8);

109 
time
.
tm_yór
 = 
	`CMOS_READ
(9);

110 } 
time
.
tm_£c
 !
	`CMOS_READ
(0));

111 
	`BCD_TO_BIN
(
time
.
tm_£c
);

112 
	`BCD_TO_BIN
(
time
.
tm_mö
);

113 
	`BCD_TO_BIN
(
time
.
tm_hour
);

114 
	`BCD_TO_BIN
(
time
.
tm_mday
);

115 
	`BCD_TO_BIN
(
time
.
tm_m⁄
);

116 
	`BCD_TO_BIN
(
time
.
tm_yór
);

117 
time
.
tm_m⁄
--;

118 
°¨tup_time
 = 
	`kî√l_mktime
(&
time
);

119 
	}
}

121 
	gmem‹y_íd
 = 0;

122 
	gbuf„r_mem‹y_íd
 = 0;

123 
	gmaö_mem‹y_°¨t
 = 0;

125 
	sdrive_öfo
 { 
	mdummy
[32]; } 
	gdrive_öfo
;

127 
	$maö_ª«me
()

135 
ROOT_DEV
 = 
ORIG_ROOT_DEV
;

136 
drive_öfo
 = 
DRIVE_INFO
;

137 
mem‹y_íd
 = (1<<20Ë+ (
EXT_MEM_K
<<10);

138 
mem‹y_íd
 &= 0xfffff000;

139 i‡(
mem‹y_íd
 > 16*1024*1024)

140 
mem‹y_íd
 = 16*1024*1024;

141 i‡(
mem‹y_íd
 > 12*1024*1024)

142 
buf„r_mem‹y_íd
 = 4*1024*1024;

143 i‡(
mem‹y_íd
 > 6*1024*1024)

144 
buf„r_mem‹y_íd
 = 2*1024*1024;

146 
buf„r_mem‹y_íd
 = 1*1024*1024;

147 
maö_mem‹y_°¨t
 = 
buf„r_mem‹y_íd
;

148 #ifde‡
RAMDISK


149 
maö_mem‹y_°¨t
 +
	`rd_öô
(maö_mem‹y_°¨t, 
RAMDISK
*1024);

153 
	`mem_öô
(
maö_mem‹y_°¨t
,
mem‹y_íd
);

154 
	`å≠_öô
();

155 
	`blk_dev_öô
();

156 
	`chr_dev_öô
();

157 
	`ây_öô
();

158 
	`time_öô
();

159 
	`sched_öô
();

160 
	`buf„r_öô
(
buf„r_mem‹y_íd
);

161 
	`hd_öô
();

162 
	`Ê›py_öô
();

163 
	`°i
();

166 
	`move_to_u£r_mode
();

167 i‡(!
	`f‹k
()) {

168 
	`öô
();

177 ;;Ë
	`∑u£
();

178 
	}
}

181 
	$¥ötf
(c⁄° *
fmt
, ...)

188 
va_li°
 
¨gs
;

189 
i
;

191 
	`va_°¨t
(
¨gs
, 
fmt
);

192 
	`wrôe
(1,
¥ötbuf
,
i
=
	`v•rötf
’rötbuf, 
fmt
, 
¨gs
));

193 
	`va_íd
(
¨gs
);

194  
i
;

195 
	}
}

197 * 
	g¨gv_rc
[] = { "/bö/sh", 
NULL
 };

198 * 
	gívp_rc
[] = { "HOME=/", 
NULL
 };

200 * 
	g¨gv
[] = { "-/bö/sh",
NULL
 };

201 * 
	gívp
[] = { "HOME=/u§/roŸ", 
NULL
 };

203 
	$öô
()

205 
pid
,
i
;

209 
	`£tup
((*Ë&
drive_öfo
);

211 (Ë
	`›í
("/dev/ây0",
O_RDWR
,0);

214 (Ë
	`dup
(0);

215 (Ë
	`dup
(0);

216 
	`¥ötf
("%d buf„r†%d byã†buf„∏•a˚\n\r",
NR_BUFFERS
, \

217 
NR_BUFFERS
*
BLOCK_SIZE
);

218 
	`¥ötf
("Fªêmem: %d byãs\n\r",
mem‹y_íd
-
maö_mem‹y_°¨t
);

224 i‡(!(
pid
=
	`f‹k
())) {

225 
	`˛o£
(0);

226 i‡(
	`›í
("/ëc/rc",
O_RDONLY
,0))

227 
	`_exô
(1);

228 
	`execve
("/bö/sh",
¨gv_rc
,
ívp_rc
);

229 
	`_exô
(2);

235 i‡(
pid
>0)

236 
pid
 !
	`waô
(&
i
))

249 i‡((
pid
=
	`f‹k
())<0) {

250 
	`¥ötf
("Fork failed in init\r\n");

253 i‡(!
pid
) {

254 
	`˛o£
(0);close(1);close(2);

255 
	`£tsid
();

256 (Ë
	`›í
("/dev/ây0",
O_RDWR
,0);

257 (Ë
	`dup
(0);

258 (Ë
	`dup
(0);

259 
	`_exô
(
	`execve
("/bö/sh",
¨gv
,
ívp
));

262 i‡(
pid
 =
	`waô
(&
i
))

264 
	`¥ötf
("\n\rchûd %d dõd wôh codê%04x\n\r",
pid
,
i
);

265 
	`sync
();

267 
	`_exô
(0);

268 
	}
}

	@kernel/blk_drv/blk.h

1 #i‚de‡
_BLK_H


2 
	#_BLK_H


	)

4 
	#NR_BLK_DEV
 7

5 

	)

13 
	#NR_REQUEST
 32

	)

20 
	sªque°


22 
	mdev
;

23 
	mcmd
;

24 
	mîr‹s
;

25 
	m£˘‹
;

26 
	mƒ_£˘‹s
;

27 *
	mbuf„r
;

28 
èsk_°ru˘
 *
	mwaôög
;

29 
buf„r_hód
 *
	mbh
;

30 
ªque°
 *
	m√xt
;

37 
	#IN_ORDER
(
s1
,
s2
) \

38 ((
s1
)->
cmd
<(
s2
)->cmd || (s1)->cmd==(s2)->cmd && \

39 ((
s1
)->
dev
 < (
s2
)->dev || ((s1)->dev == (s2)->dev && \

40 (
s1
)->
£˘‹
 < (
s2
)->£˘‹)))

	)

43 
	sblk_dev_°ru˘


45 (*
	mªque°_‚
) ();

46 
ªque°
 *
	mcuºít_ªque°
;

49 
blk_dev_°ru˘
 
blk_dev
[
NR_BLK_DEV
];

50 
ªque°
Ñeque°[
NR_REQUEST
];

51 
èsk_°ru˘
 *
waô_f‹_ªque°
;

53 #ifde‡
MAJOR_NR


59 #i‡(
MAJOR_NR
 == 1)

61 
	#DEVICE_NAME
 "ramdisk"

62 
	#DEVICE_REQUEST
 
do_rd_ªque°


63 
	#DEVICE_NR
(
devi˚
) ((device) & 7)

64 
	#DEVICE_ON
(
devi˚
)

65 
	#DEVICE_OFF
(
devi˚
)

66 

	)

67 #ñi‡(
MAJOR_NR
 == 2)

69 
	#DEVICE_NAME
 "floppy"

70 
	#DEVICE_INTR
 
do_Ê›py


71 
	#DEVICE_REQUEST
 
do_fd_ªque°


72 
	#DEVICE_NR
(
devi˚
) ((device) & 3)

73 
	#DEVICE_ON
(
devi˚
Ë
	`Ê›py_⁄
(
	`DEVICE_NR
(device))

74 
	#DEVICE_OFF
(
devi˚
Ë
	`Ê›py_off
(
	`DEVICE_NR
(device))

75 

	)

76 #ñi‡(
MAJOR_NR
 == 3)

78 
	#DEVICE_NAME
 "harddisk"

79 
	#DEVICE_INTR
 
do_hd


80 
	#DEVICE_REQUEST
 
do_hd_ªque°


81 
	#DEVICE_NR
(
devi˚
Ë(
	`MINOR
(device)/5)

82 
	#DEVICE_ON
(
devi˚
)

83 
	#DEVICE_OFF
(
devi˚
)

	)

91 
	#CURRENT
 (
blk_dev
[
MAJOR_NR
].
cuºít_ªque°
)

92 
	#CURRENT_DEV
 
	`DEVICE_NR
(
CURRENT
->
dev
)

93 

	)

94 #ifde‡
DEVICE_INTR


95 (*
DEVICE_INTR
Ë(Ë
NULL
;

97 (
DEVICE_REQUEST
) ();

100 
_ölöe
 

101 
	$u∆ock_buf„r
 (
buf„r_hód
 *
bh
)

103 i‡(!
bh
->
b_lock
)

104 
	`¥ötk
 (
DEVICE_NAME
 ": free buffer being unlocked\n");

105 
bh
->
b_lock
 = 0;

106 
	`wake_up
 (&
bh
->
b_waô
);

107 
	}
}

110 
_ölöe
 

111 
	$íd_ªque°
 (
u±od©e
)

113 
	`DEVICE_OFF
 (
CURRENT
->
dev
);

114 i‡(
CURRENT
->
bh
)

116 
CURRENT
->
bh
->
b_u±od©e
 = 
u±od©e
;

117 
	`u∆ock_buf„r
 (
CURRENT
->
bh
);

119 i‡(!
u±od©e
)

121 
	`¥ötk
 (
DEVICE_NAME
 " I/OÉrror\n\r");

122 
	`¥ötk
 ("dev %04x, block %d\n\r", 
CURRENT
->
dev
, CURRENT->
bh
->
b_blockƒ
);

124 
	`wake_up
 (&
CURRENT
->
waôög
);

125 
	`wake_up
 (&
waô_f‹_ªque°
);

126 
CURRENT
->
dev
 = -1;

127 
CURRENT
 = CURRENT->
√xt
;

128 
	}
}

131 
	#INIT_REQUEST
 \

132 
ª≥©
: \

133 i‡(!
CURRENT
) \

135 i‡(
	`MAJOR
 (
CURRENT
->
dev
Ë!
MAJOR_NR
) \

136 
	`∑nic
 (
DEVICE_NAME
 ":ÑequestÜist destroyed"); \

137 i‡(
CURRENT
->
bh
) \

139 i‡(!
CURRENT
->
bh
->
b_lock
) \

140 
	`∑nic
 (
DEVICE_NAME
 ": blockÇotÜocked"); \

141 }

	)

	@kernel/blk_drv/floppy.c

6 
	~<£t_£g.h
>

29 
	~<löux/sched.h
>

31 
	~<löux/fs.h
>

32 
	~<löux/kî√l.h
>

33 
	~<löux/fdªg.h
>

34 
	~<asm/sy°em.h
>

35 
	~<asm/io.h
>

36 
	~<asm/£gmít.h
>

38 
	#MAJOR_NR
 2

39 
	~"blk.h
"

40 

	)

41 
	gªˇlibøã
 = 0;

42 
	gª£t
 = 0;

43 
	g£ek
 = 0;

45 
cuºít_DOR
;

50 
_ölöe
 
	$immoutb_p
(
vÆ
,
p‹t
)

51 {
_asm
{

52 
mov
 
Æ
,
vÆ


53 
mov
 
dx
,
p‹t


54 
out
 
dx
,
Æ


55 
jmp
 
l1


56 
l1
: 
jmp
 
l2


57 
l2
:

58 }
	}
}

60 
	#TYPE
(
x
) ((x)>>2)

61 
	#DRIVE
(
x
) ((x)&0x03)

62 

	)

66 
	#MAX_ERRORS
 8

	)

72 
	#MAX_REPLIES
 7

73 

	)

74 
ª∂y_buf„r
[
MAX_REPLIES
] = {0};

76 
	#ST0
 (
ª∂y_buf„r
[0])

77 
	#ST1
 (
ª∂y_buf„r
[1])

78 
	#ST2
 (
ª∂y_buf„r
[2])

79 
	#ST3
 (
ª∂y_buf„r
[3])

80 

	)

98 
	sÊ›py_°ru˘


100 
	msize
, 
	m£˘
, 
	mhód
, 
	måack
, 
	m°ªtch
;

101 
	mg≠
, 
	møã
, 
	m•ec1
;

103 
	gÊ›py_ty≥
[] =

124 
Ê›py_öãºu±
 ();

125 
tmp_Ê›py_¨ó
[1024];

131 
	gcur_•ec1
 = -1;

132 
	gcur_øã
 = -1;

133 
Ê›py_°ru˘
 *
	gÊ›py
 = 
Ê›py_ty≥
;

134 
	gcuºít_drive
 = 0;

135 
	g£˘‹
 = 0;

136 
	ghód
 = 0;

137 
	gåack
 = 0;

138 
	g£ek_åack
 = 0;

139 
	gcuºít_åack
 = 255;

140 
	gcomm™d
 = 0;

141 
	g£À˘ed
 = 0;

142 
èsk_°ru˘
 *
	gwaô_⁄_Ê›py_£À˘
 = 
NULL
;

147 
	$Ê›py_de£À˘
 (
ƒ
)

149 i‡(
ƒ
 !()(
cuºít_DOR
 & 3))

150 
	`¥ötk
 ("floppy_deselect: driveÇot selected\n\r");

151 
£À˘ed
 = 0;

152 
	`wake_up
 (&
waô_⁄_Ê›py_£À˘
);

153 
	}
}

162 
	$Ê›py_ch™ge
 (
ƒ
)

164 
ª≥©
:

165 
	`Ê›py_⁄
 (
ƒ
);

168 ()(
cuºít_DOR
 & 3Ë!
ƒ
 && 
£À˘ed
)

169 
	`öãºu±ibÀ_¶ìp_⁄
 (&
waô_⁄_Ê›py_£À˘
);

171 i‡(()(
cuºít_DOR
 & 3Ë!
ƒ
)

172 
ª≥©
;

175 i‡(
	`öb
 (
FD_DIR
) & 0x80)

177 
	`Ê›py_off
 (
ƒ
);

180 
	`Ê›py_off
 (
ƒ
);

182 
	}
}

189 
_ölöe
 
	$c›y_buf„r
(* 
‰om
, * 
to
)

190 {
_asm
{

191 
pushf


192 
mov
 
cx
,
BLOCK_SIZE
/4

193 
mov
 
esi
,
‰om


194 
mov
 
edi
,
to


195 
˛d


196 
ªp
 
movsd


197 
p›f


198 }
	}
}

202 
	$£tup_DMA
 ()

204 
addr
 = (Ë
CURRENT
->
buf„r
;

206 
	`˛i
 ();

209 i‡(
addr
 >= 0x100000)

211 
addr
 = (Ë
tmp_Ê›py_¨ó
;

212 i‡(
comm™d
 =
FD_WRITE
)

213 
	`c›y_buf„r
 (
CURRENT
->
buf„r
, 
tmp_Ê›py_¨ó
);

217 
	`immoutb_p
 (4 | 2, 10);

221 i‡(
comm™d
 =
FD_READ
)

222 
_asm
 
mov
 
Æ
,
DMA_READ
;

224 
_asm
 
mov
 
Æ
,
DMA_WRITE
;

225 
_asm
 {

226 
out
 12,
Æ


227 
jmp
 
l1


228 
l1
: 
jmp
 
l2


229 
l2
: 
out
 11,
Æ


230 
jmp
 
l3


231 
l3
: 
jmp
 
l4


232 
l4
:

239 
	`immoutb_p
 (()
addr
, 4);

240 
addr
 >>= 8;

242 
	`immoutb_p
 (()
addr
, 4);

243 
addr
 >>= 8;

246 
	`immoutb_p
 (()
addr
, 0x81);

249 
	`immoutb_p
 (0xff, 5);

252 
	`immoutb_p
 (3, 5);

255 
	`immoutb_p
 (0 | 2, 10);

256 
	`°i
 ();

257 
	}
}

261 
	$ouçut_byã
 (
byã
)

263 
cou¡î
;

264 
°©us
;

266 i‡(
ª£t
)

270 
cou¡î
 = 0; counter < 10000; counter++)

272 
°©us
 = 
	`öb_p
 (
FD_STATUS
Ë& (
STATUS_READY
 | 
STATUS_DIR
);

273 i‡(
°©us
 =
STATUS_READY
)

275 
	`outb
 (
byã
, 
FD_DATA
);

280 
ª£t
 = 1;

281 
	`¥ötk
 ("UnableÅo send byteÅo FDC\n\r");

282 
	}
}

288 
	$ªsu…
 ()

290 
i
 = 0, 
cou¡î
, 
°©us
;

292 i‡(
ª£t
)

294 
cou¡î
 = 0; counter < 10000; counter++)

296 
°©us
 = 
	`öb_p
 (
FD_STATUS
Ë& (
STATUS_DIR
 | 
STATUS_READY
 | 
STATUS_BUSY
);

297 i‡(
°©us
 =
STATUS_READY
)

298  
i
;

299 i‡(
°©us
 =(
STATUS_DIR
 | 
STATUS_READY
 | 
STATUS_BUSY
))

301 i‡(
i
 >
MAX_REPLIES
)

303 
ª∂y_buf„r
[
i
++] = 
	`öb_p
 (
FD_DATA
);

306 
ª£t
 = 1;

307 
	`¥ötk
 ("GetstatusÅimes out\n\r");

309 
	}
}

313 
	$bad_Êp_öå
 ()

315 
CURRENT
->
îr‹s
++;

317 i‡(
CURRENT
->
îr‹s
 > 
MAX_ERRORS
)

319 
	`Ê›py_de£À˘
 (
cuºít_drive
);

320 
	`íd_ªque°
 (0);

324 i‡(
CURRENT
->
îr‹s
 > 
MAX_ERRORS
 / 2)

325 
ª£t
 = 1;

327 
ªˇlibøã
 = 1;

328 
	}
}

336 
	$rw_öãºu±
 ()

344 i‡(
	`ªsu…
 (Ë!7 || (
ST0
 & 0xf8Ë|| (
ST1
 & 0xbfË|| (
ST2
 & 0x73))

346 i‡(
ST1
 & 0x02)

348 
	`¥ötk
 ("Drivê%d i†wrôê¥Ÿe˘ed\n\r", 
cuºít_drive
);

349 
	`Ê›py_de£À˘
 (
cuºít_drive
);

350 
	`íd_ªque°
 (0);

353 
	`bad_Êp_öå
 ();

354 
	`do_fd_ªque°
 ();

359 i‡(
comm™d
 =
FD_READ
 && (Ë(
CURRENT
->
buf„r
) >= 0x100000)

360 
	`c›y_buf„r
 (
tmp_Ê›py_¨ó
, 
CURRENT
->
buf„r
);

362 
	`Ê›py_de£À˘
 (
cuºít_drive
);

363 
	`íd_ªque°
 (1);

364 
	`do_fd_ªque°
 ();

365 
	}
}

368 
_ölöe
 

369 
	$£tup_rw_Ê›py
 ()

371 
	`£tup_DMA
 ();

372 
do_Ê›py
 = 
rw_öãºu±
;

373 
	`ouçut_byã
 (
comm™d
);

374 
	`ouçut_byã
 (
hód
 << 2 | 
cuºít_drive
);

375 
	`ouçut_byã
 (
åack
);

376 
	`ouçut_byã
 (
hód
);

377 
	`ouçut_byã
 (
£˘‹
);

378 
	`ouçut_byã
 (2);

379 
	`ouçut_byã
 (
Ê›py
->
£˘
);

380 
	`ouçut_byã
 (
Ê›py
->
g≠
);

381 
	`ouçut_byã
 (()0xFF);

384 i‡(
ª£t
)

385 
	`do_fd_ªque°
 ();

386 
	}
}

397 
	$£ek_öãºu±
 ()

401 
	`ouçut_byã
 (
FD_SENSEI
);

404 i‡(
	`ªsu…
 (Ë!2 || (
ST0
 & 0xF8Ë!0x20 || 
ST1
 !
£ek_åack
)

406 
	`bad_Êp_öå
 ();

407 
	`do_fd_ªque°
 ();

410 
cuºít_åack
 = 
ST1
;

411 
	`£tup_rw_Ê›py
 ();

412 
	}
}

420 
	$å™s„r
 ()

424 i‡(
cur_•ec1
 !
Ê›py
->
•ec1
)

426 
cur_•ec1
 = 
Ê›py
->
•ec1
;

427 
	`ouçut_byã
 (
FD_SPECIFY
);

428 
	`ouçut_byã
 (
cur_•ec1
);

429 
	`ouçut_byã
 (6);

433 i‡(
cur_øã
 !
Ê›py
->
øã
)

434 
	`outb_p
 (
cur_øã
 = 
Ê›py
->
øã
, 
FD_DCR
);

436 i‡(
ª£t
)

438 
	`do_fd_ªque°
 ();

442 i‡(!
£ek
)

444 
	`£tup_rw_Ê›py
 ();

448 
do_Ê›py
 = 
£ek_öãºu±
;

450 i‡(
£ek_åack
)

452 
	`ouçut_byã
 (
FD_SEEK
);

453 
	`ouçut_byã
 (
hód
 << 2 | 
cuºít_drive
);

454 
	`ouçut_byã
 (
£ek_åack
);

458 
	`ouçut_byã
 (
FD_RECALIBRATE
);

459 
	`ouçut_byã
 (
hód
 << 2 | 
cuºít_drive
);

462 i‡(
ª£t
)

463 
	`do_fd_ªque°
 ();

464 
	}
}

473 
	$ªˇl_öãºu±
 ()

475 
	`ouçut_byã
 (
FD_SENSEI
);

476 i‡(
	`ªsu…
 (Ë!2 || (
ST0
 & 0xE0) == 0x60)

477 
ª£t
 = 1;

479 
ªˇlibøã
 = 0;

480 
	`do_fd_ªque°
 ();

481 
	}
}

487 
	$u√x≥˘ed_Ê›py_öãºu±
 ()

489 
	`ouçut_byã
 (
FD_SENSEI
);

490 i‡(
	`ªsu…
 (Ë!2 || (
ST0
 & 0xE0) == 0x60)

491 
ª£t
 = 1;

493 
ªˇlibøã
 = 1;

494 
	}
}

499 
	$ªˇlibøã_Ê›py
 ()

501 
ªˇlibøã
 = 0;

502 
cuºít_åack
 = 0;

503 
do_Ê›py
 = 
ªˇl_öãºu±
;

504 
	`ouçut_byã
 (
FD_RECALIBRATE
);

505 
	`ouçut_byã
 (
hód
 << 2 | 
cuºít_drive
);

506 i‡(
ª£t
)

507 
	`do_fd_ªque°
 ();

508 
	}
}

514 
	$ª£t_öãºu±
 ()

516 
	`ouçut_byã
 (
FD_SENSEI
);

517 (Ë
	`ªsu…
 ();

518 
	`ouçut_byã
 (
FD_SPECIFY
);

519 
	`ouçut_byã
 (
cur_•ec1
);

520 
	`ouçut_byã
 (6);

521 
	`do_fd_ªque°
 ();

522 
	}
}

527 
	$ª£t_Ê›py
 ()

529 
i
;

531 
ª£t
 = 0;

532 
cur_•ec1
 = -1;

533 
cur_øã
 = -1;

534 
ªˇlibøã
 = 1;

535 
	`¥ötk
 ("Reset-floppy called\n\r");

536 
	`˛i
 ();

537 
do_Ê›py
 = 
ª£t_öãºu±
;

538 
	`outb_p
 (
cuºít_DOR
 & ~0x04, 
FD_DOR
);

539 
i
 = 0; i < 100; i++)

540 
_asm
 
n›
;

541 
	`outb
 (
cuºít_DOR
, 
FD_DOR
);

542 
	`°i
 ();

543 
	}
}

549 
	$Ê›py_⁄_öãºu±
 ()

552 
£À˘ed
 = 1;

555 i‡(
cuºít_drive
 !(
cuºít_DOR
 & 3))

557 
cuºít_DOR
 &= 0xFC;

558 
cuºít_DOR
 |
cuºít_drive
;

559 
	`outb
 (
cuºít_DOR
, 
FD_DOR
);

560 
	`add_timî
 (2, &
å™s„r
);

563 
	`å™s„r
 ();

564 
	}
}

568 
	$do_fd_ªque°
 ()

570 
block
;

572 
£ek
 = 0;

574 i‡(
ª£t
)

576 
	`ª£t_Ê›py
 ();

580 i‡(
ªˇlibøã
)

582 
	`ªˇlibøã_Ê›py
 ();

586 
INIT_REQUEST
;

588 
Ê›py
 = (
	`MINOR
 (
CURRENT
->
dev
Ë>> 2Ë+ 
Ê›py_ty≥
;

591 i‡(
cuºít_drive
 !
CURRENT_DEV
)

592 
£ek
 = 1;

593 
cuºít_drive
 = 
CURRENT_DEV
;

596 
block
 = 
CURRENT
->
£˘‹
;

597 i‡(
block
 + 2 > 
Ê›py
->
size
)

599 
	`íd_ªque°
 (0);

600 
ª≥©
;

603 
£˘‹
 = 
block
 % 
Ê›py
->
£˘
;

604 
block
 /
Ê›py
->
£˘
;

605 
hód
 = 
block
 % 
Ê›py
->head;

606 
åack
 = 
block
 / 
Ê›py
->
hód
;

607 
£ek_åack
 = 
åack
 << 
Ê›py
->
°ªtch
;

609 i‡(
£ek_åack
 !
cuºít_åack
)

610 
£ek
 = 1;

611 
£˘‹
++;

612 i‡(
CURRENT
->
cmd
 =
READ
)

613 
comm™d
 = 
FD_READ
;

614 i‡(
CURRENT
->
cmd
 =
WRITE
)

615 
comm™d
 = 
FD_WRITE
;

617 
	`∑nic
 ("do_fd_request: unknown command");

620 
	`add_timî
 (
	`ticks_to_Ê›py_⁄
 (
cuºít_drive
), &
Ê›py_⁄_öãºu±
);

621 
	}
}

627 
	$Ê›py_öô
 ()

629 
blk_dev
[
MAJOR_NR
].
ªque°_‚
 = 
DEVICE_REQUEST
;

630 
	`£t_å≠_g©e
 (0x26, &
Ê›py_öãºu±
);

631 
	`outb
 (
	`öb_p
 (0x21) & ~0x40, 0x21);

633 
	}
}

	@kernel/blk_drv/hd.c

6 
	~<£t_£g.h
>

14 
	~<löux/c⁄fig.h
>

15 
	~<löux/sched.h
>

17 
	~<löux/fs.h
>

18 
	~<löux/kî√l.h
>

19 
	~<löux/hdªg.h
>

20 
	~<asm/sy°em.h
>

21 
	~<asm/io.h
>

22 
	~<asm/£gmít.h
>

24 
	#MAJOR_NR
 3

25 
	~"blk.h
"

26 

	)

28 
_ölöe
 
	$CMOS_READ
(
addr
)

30 
	`outb_p
(
addr
,0x70);

31  
	`öb_p
(0x71);

32 
	}
}

35 
	#MAX_ERRORS
 7

36 
	#MAX_HD
 2

37 
	`ªˇl_öå
 ();

38 

	)

39 
	gªˇlibøã
 = 1;

40 
	gª£t
 = 1;

47 
	shd_i_°ru˘


49 
	mhód
, 
	m£˘
, 
	mcyl
, 
	mwpcom
, 
	mlz⁄e
, 
	m˘l
;

52 #ifde‡
HD_TYPE


54 
hd_i_°ru˘
 
	ghd_öfo
[] ={
HD_TYPE
};

55 
	#NR_HD
 (( (
hd_öfo
))/( (
hd_i_°ru˘
)))

56 

	)

59 
hd_i_°ru˘
 
	ghd_öfo
[] =

64 
	gNR_HD
 = 0;

70 
	shd_°ru˘


72 
	m°¨t_£˘
;

73 
	mƒ_£˘s
;

76 
	ghd
[5 * 
MAX_HD
] =

84 
_ölöe
 
	$p‹t_ªad
(
p‹t
, * 
buf
,
ƒ
)

85 {
_asm
{

86 
pushf


87 
mov
 
dx
,
p‹t


88 
mov
 
edi
,
buf


89 
mov
 
ecx
,
ƒ


90 
˛d


91 
ªp
 
ösw


92 
p›f


93 }
	}
}

98 
_ölöe
 
	$p‹t_wrôe
(
p‹t
, * 
buf
,
ƒ
)

99 {
_asm
{

100 
pushf


101 
mov
 
dx
,
p‹t


102 
mov
 
esi
,
buf


103 
mov
 
ecx
,
ƒ


104 
˛d


105 
ªp
 
outsw


106 
p›f


107 }
	}
}

109 
hd_öãºu±
 ();

110 
rd_lﬂd
 ();

118 
	$sys_£tup
 (*
BIOS
)

120 
ˇŒabÀ
 = 1;

121 
i
, 
drive
;

122 
cmos_disks
;

123 
∑πôi⁄
 *
p
;

124 
buf„r_hód
 *
bh
;

127 i‡(!
ˇŒabÀ
)

129 
ˇŒabÀ
 = 0;

131 #i‚de‡
HD_TYPE


132 
drive
 = 0; drive < 2; drive++)

134 
hd_öfo
[
drive
].
cyl
 = *(*Ë
BIOS
;

135 
hd_öfo
[
drive
].
hód
 = *(*Ë(2 + 
BIOS
);

136 
hd_öfo
[
drive
].
wpcom
 = *(*Ë(5 + 
BIOS
);

137 
hd_öfo
[
drive
].
˘l
 = *(*Ë(8 + 
BIOS
);

138 
hd_öfo
[
drive
].
lz⁄e
 = *(*Ë(12 + 
BIOS
);

139 
hd_öfo
[
drive
].
£˘
 = *(*Ë(14 + 
BIOS
);

140 
BIOS
 += 16;

144 i‡(
hd_öfo
[1].
cyl
)

145 
NR_HD
 = 2;

147 
NR_HD
 = 1;

150 
i
 = 0; i < 
NR_HD
; i++)

152 
hd
[
i
 * 5].
°¨t_£˘
 = 0;

153 
hd
[
i
 * 5].
ƒ_£˘s
 = 
hd_öfo
[i].
hód
 * hd_öfo[i].
£˘
 * hd_öfo[i].
cyl
;

169 i‡((
cmos_disks
 = 
	`CMOS_READ
 (0x12)) & 0xf0)

170 i‡(
cmos_disks
 & 0x0f)

171 
NR_HD
 = 2;

173 
NR_HD
 = 1;

175 
NR_HD
 = 0;

178 
i
 = 
NR_HD
; i < 2; i++)

180 
hd
[
i
 * 5].
°¨t_£˘
 = 0;

181 
hd
[
i
 * 5].
ƒ_£˘s
 = 0;

187 
drive
 = 0; drivê< 
NR_HD
; drive++)

189 i‡(!(
bh
 = 
	`bªad
 (0x300 + 
drive
 * 5, 0)))

191 
	`¥ötk
 ("U«bÀÅÿªadÖ¨tôi⁄ÅabÀ o‡drivê%d\n\r", 
drive
);

192 
	`∑nic
 ("");

194 i‡(
bh
->
b_d©a
[510] != 0x55 || () bh->b_data[511] != 0xAA)

196 
	`¥ötk
 ("BadÖ¨tôi⁄ÅabÀ o¿drivê%d\n\r", 
drive
);

197 
	`∑nic
 ("");

199 
p
 = (
∑πôi⁄
 *)(0x1BE + 
bh
->
b_d©a
);

200 
i
 = 1; i < 5; i++, 
p
++)

202 
hd
[
i
 + 5 * 
drive
].
°¨t_£˘
 = 
p
->start_sect;

203 
hd
[
i
 + 5 * 
drive
].
ƒ_£˘s
 = 
p
->nr_sects;

205 
	`bªl£
 (
bh
);

207 i‡(
NR_HD
)

208 
	`¥ötk
 ("P¨tôi⁄ÅabÀ%†ok.\n\r", (
NR_HD
 > 1) ? "s" : "");

209 
	`rd_lﬂd
 ();

210 
	`mou¡_roŸ
 ();

212 
	}
}

216 
	$c⁄åﬁÀr_ªady
 ()

218 
ªåõs
 = 10000;

220 --
ªåõs
 && (
	`öb_p
 (
HD_STATUS
) & 0xc0) != 0x40);

221  (
ªåõs
);

222 
	}
}

227 
	$wö_ªsu…
 ()

229 
i
 = 
	`öb_p
 (
HD_STATUS
);

231 i‡((
i
 & (
BUSY_STAT
 | 
READY_STAT
 | 
WRERR_STAT
 | 
SEEK_STAT
 | 
ERR_STAT
))

232 =(
READY_STAT
 | 
SEEK_STAT
))

234 i‡(
i
 & 1)

235 
i
 = 
	`öb
 (
HD_ERROR
);

237 
	}
}

244 
hd_out
 (
drive
, 
n£˘
, 
£˘
,

245 
hód
, 
cyl
, 
cmd
,

246 (*
öå_addr
) ())

248 
p‹t
;

250 i‡(
drive
 > 1 || 
hód
 > 15)

251 
	`∑nic
 ("TryingÅo write bad sector");

252 i‡(!
	`c⁄åﬁÀr_ªady
 ())

253 
	`∑nic
 ("HD controllerÇotÑeady");

254 
do_hd
 = 
öå_addr
;

255 
	`outb_p
 (
hd_öfo
[
drive
].
˘l
, 
HD_CMD
);

256 
p‹t
 = 
HD_DATA
;

257 
	`outb_p
 (
hd_öfo
[
drive
].
wpcom
 >> 2, ++
p‹t
);

258 
	`outb_p
 (
n£˘
, ++
p‹t
);

259 
	`outb_p
 (
£˘
, ++
p‹t
);

260 
	`outb_p
 (
cyl
, ++
p‹t
);

261 
	`outb_p
 (
cyl
 >> 8, ++
p‹t
);

262 
	`outb_p
 (0xA0 | (
drive
 << 4Ë| 
hód
, ++
p‹t
);

263 
	`outb
 (
cmd
, ++
p‹t
);

264 
	}
}

268 
	$drive_busy
 ()

270 
i
;

272 
i
 = 0; i < 10000; i++)

273 i‡(
READY_STAT
 =(
	`öb_p
 (
HD_STATUS
Ë& (
BUSY_STAT
 | READY_STAT)))

275 
i
 = 
	`öb
 (
HD_STATUS
);

276 
i
 &
BUSY_STAT
 | 
READY_STAT
 | 
SEEK_STAT
;

277 i‡(
i
 =
READY_STAT
 | 
SEEK_STAT
)

279 
	`¥ötk
 ("HD controllerÅimes out\n\r");

281 
	}
}

284 
	$ª£t_c⁄åﬁÀr
 ()

286 
i
;

288 
	`outb
 (4, 
HD_CMD
);

289 
i
 = 0; i < 100; i++)

290 
	`n›
 ();

291 
	`outb
 (
hd_öfo
[0].
˘l
 & 0x0f, 
HD_CMD
);

292 i‡(
	`drive_busy
 ())

293 
	`¥ötk
 ("HD-controller still busy\n\r");

294 i‡((
i
 = 
	`öb
 (
HD_ERROR
)) != 1)

295 
	`¥ötk
 ("HD-c⁄åﬁÀ∏ª£àÁûed: %02x\n\r", 
i
);

296 
	}
}

300 
	$ª£t_hd
 (
ƒ
)

302 
	`ª£t_c⁄åﬁÀr
 ();

303 
	`hd_out
 (
ƒ
, 
hd_öfo
[ƒ].
£˘
, hd_öfo[ƒ].£˘, hd_öfo[ƒ].
hód
 - 1,

304 
hd_öfo
[
ƒ
].
cyl
, 
WIN_SPECIFY
, &
ªˇl_öå
);

305 
	}
}

310 
	$u√x≥˘ed_hd_öãºu±
 ()

312 
	`¥ötk
 ("Unexpected HD interrupt\n\r");

313 
	}
}

316 
	$bad_rw_öå
 ()

318 i‡(++
CURRENT
->
îr‹s
 >
MAX_ERRORS
)

319 
	`íd_ªque°
 (0);

321 i‡(
CURRENT
->
îr‹s
 > 
MAX_ERRORS
 / 2)

322 
ª£t
 = 1;

323 
	}
}

326 
	$ªad_öå
 ()

328 i‡(
	`wö_ªsu…
 ())

330 
	`bad_rw_öå
 ();

331 
	`do_hd_ªque°
 ();

334 
	`p‹t_ªad
 (
HD_DATA
, 
CURRENT
->
buf„r
, 256);

335 
CURRENT
->
îr‹s
 = 0;

336 
CURRENT
->
buf„r
 += 512;

337 
CURRENT
->
£˘‹
++;

338 i‡(--
CURRENT
->
ƒ_£˘‹s
)

340 
do_hd
 = &
ªad_öå
;

343 
	`íd_ªque°
 (1);

344 
	`do_hd_ªque°
 ();

345 
	}
}

350 
	$wrôe_öå
 ()

352 i‡(
	`wö_ªsu…
 ())

354 
	`bad_rw_öå
 ();

355 
	`do_hd_ªque°
 ();

358 i‡(--
CURRENT
->
ƒ_£˘‹s
)

360 
CURRENT
->
£˘‹
++;

361 
CURRENT
->
buf„r
 += 512;

362 
do_hd
 = &
wrôe_öå
;

363 
	`p‹t_wrôe
 (
HD_DATA
, 
CURRENT
->
buf„r
, 256);

366 
	`íd_ªque°
 (1);

367 
	`do_hd_ªque°
 ();

368 
	}
}

372 
	$ªˇl_öå
 ()

374 i‡(
	`wö_ªsu…
 ())

375 
	`bad_rw_öå
 ();

376 
	`do_hd_ªque°
 ();

377 
	}
}

380 
	$do_hd_ªque°
 ()

382 
i
, 
r
;

383 
block
, 
dev
;

384 
£c
, 
hód
, 
cyl
;

385 
n£˘
;

387 
INIT_REQUEST
;

389 
dev
 = 
	`MINOR
 (
CURRENT
->dev);

390 
block
 = 
CURRENT
->
£˘‹
;

394 i‡(
dev
 >5 * 
NR_HD
 || 
block
 + 2 > 
hd
[dev].
ƒ_£˘s
)

396 
	`íd_ªque°
 (0);

397 
ª≥©
;

399 
block
 +
hd
[
dev
].
°¨t_£˘
;

400 
dev
 /= 5;

403 
£c
 = 
hd_öfo
[
dev
].
£˘
;

404 
_asm
 {

405 
mov
 
óx
,
block


406 
x‹
 
edx
,edx

407 
mov
 
ebx
,
£c


408 
div
 
ebx


409 
mov
 
block
,
óx


410 
mov
 
£c
,
edx


415 
hód
 = 
hd_öfo
[
dev
].head;

416 
_asm
 {

417 
mov
 
óx
,
block


418 
x‹
 
edx
,edx

419 
mov
 
ebx
,
hód


420 
div
 
ebx


421 
mov
 
cyl
,
óx


422 
mov
 
hód
,
edx


427 
£c
++;

428 
n£˘
 = 
CURRENT
->
ƒ_£˘‹s
;

430 i‡(
ª£t
)

432 
ª£t
 = 0;

433 
ªˇlibøã
 = 1;

434 
	`ª£t_hd
 (
CURRENT_DEV
);

438 i‡(
ªˇlibøã
)

440 
ªˇlibøã
 = 0;

441 
	`hd_out
 (
dev
, 
hd_öfo
[
CURRENT_DEV
].
£˘
, 0, 0, 0,

442 
WIN_RESTORE
, &
ªˇl_öå
);

447 i‡(
CURRENT
->
cmd
 =
WRITE
)

449 
	`hd_out
 (
dev
, 
n£˘
, 
£c
, 
hód
, 
cyl
, 
WIN_WRITE
, &
wrôe_öå
);

450 
i
 = 0; i < 3000 && !(
r
 = 
	`öb_p
 (
HD_STATUS
Ë& 
DRQ_STAT
); i++)

453 i‡(!
r
)

455 
	`bad_rw_öå
 ();

456 
ª≥©
;

458 
	`p‹t_wrôe
 (
HD_DATA
, 
CURRENT
->
buf„r
, 256);

461 i‡(
CURRENT
->
cmd
 =
READ
)

463 
	`hd_out
 (
dev
, 
n£˘
, 
£c
, 
hód
, 
cyl
, 
WIN_READ
, &
ªad_öå
);

466 
	`∑nic
 ("unknown hd-command");

467 
	}
}

470 
	$hd_öô
 ()

472 
blk_dev
[
MAJOR_NR
].
ªque°_‚
 = 
DEVICE_REQUEST
;

473 
	`£t_öå_g©e
 (0x2E, &
hd_öãºu±
);

475 
	`outb_p
 (
	`öb_p
 (0x21) & 0xfb, 0x21);

477 
	`outb
 (
	`öb_p
 (0xA1) & 0xbf, 0xA1);

479 
	}
}

	@kernel/blk_drv/ll_rw_blk.c

6 
	~<£t_£g.h
>

14 
	~<î∫o.h
>

15 
	~<löux/sched.h
>

17 
	~<löux/kî√l.h
>

18 
	~<asm/sy°em.h
>

20 
	~"blk.h
"

29 
ªque°
 
	gªque°
[
NR_REQUEST
] = {0};

35 
èsk_°ru˘
 *
	gwaô_f‹_ªque°
 = 
NULL
;

46 
blk_dev_°ru˘
 
	gblk_dev
[
NR_BLK_DEV
] = {

47 {
NULL
, NULL},

48 {
NULL
, NULL},

49 {
NULL
, NULL},

50 {
NULL
, NULL},

51 {
NULL
, NULL},

52 {
NULL
, NULL},

53 {
NULL
, NULL}

58 
_ölöe
 

59 
	$lock_buf„r
 (
buf„r_hód
 *
bh
)

61 
	`˛i
 ();

62 
bh
->
b_lock
)

63 
	`¶ìp_⁄
 (&
bh
->
b_waô
);

64 
bh
->
b_lock
 = 1;

65 
	`°i
 ();

66 
	}
}

69 
_ölöe
 

70 
	$u∆ock_buf„r
 (
buf„r_hód
 *
bh
)

72 i‡(!
bh
->
b_lock
)

73 
	`¥ötk
 ("ll_rw_block.c: bufferÇotÜocked\n\r");

74 
bh
->
b_lock
 = 0;

75 
	`wake_up
 (&
bh
->
b_waô
);

76 
	}
}

89 
	$add_ªque°
 (
blk_dev_°ru˘
 *
dev
, 
ªque°
 *
ªq
)

91 
ªque°
 *
tmp
;

93 
ªq
->
√xt
 = 
NULL
;

94 
	`˛i
 ();

95 i‡(
ªq
->
bh
)

96 
ªq
->
bh
->
b_dút
 = 0;

99 i‡(!(
tmp
 = 
dev
->
cuºít_ªque°
))

101 
dev
->
cuºít_ªque°
 = 
ªq
;

102 
	`°i
 ();

103 (
dev
->
ªque°_‚
) ();

108 ; 
tmp
->
√xt
;Åmp =Åmp->next)

109 i‡((
	`IN_ORDER
 (
tmp
, 
ªq
) ||

110 !
	`IN_ORDER
 (
tmp
,Åmp->
√xt
)Ë&& IN_ORDER (
ªq
,Åmp->next))

112 
ªq
->
√xt
 = 
tmp
->next;

113 
tmp
->
√xt
 = 
ªq
;

114 
	`°i
 ();

115 
	}
}

119 
	$make_ªque°
 (
maj‹
, 
rw
, 
buf„r_hód
 *
bh
)

121 
ªque°
 *
ªq
;

122 
rw_ahód
;

128 i‡(
rw_ahód
 = (
rw
 =
READA
 ||Ñw =
WRITEA
))

130 i‡(
bh
->
b_lock
)

132 i‡(
rw
 =
READA
)

133 
rw
 = 
READ
;

135 
rw
 = 
WRITE
;

138 i‡(
rw
 !
READ
 &&Ñw !
WRITE
)

139 
	`∑nic
 ("Bad block dev command, must be R/W/RA/WA");

141 
	`lock_buf„r
 (
bh
);

144 i‡((
rw
 =
WRITE
 && !
bh
->
b_dút
Ë|| (rw =
READ
 && bh->
b_u±od©e
))

146 
	`u∆ock_buf„r
 (
bh
);

149 
ª≥©
:

155 i‡(
rw
 =
READ
)

156 
ªq
 = 
ªque°
 + 
NR_REQUEST
;

158 
ªq
 = 
ªque°
 + ((
NR_REQUEST
 * 2) / 3);

161 --
ªq
 >
ªque°
)

162 i‡(
ªq
->
dev
 < 0)

168 i‡(
ªq
 < 
ªque°
)

170 i‡(
rw_ahód
)

172 
	`u∆ock_buf„r
 (
bh
);

175 
	`¶ìp_⁄
 (&
waô_f‹_ªque°
);

176 
ª≥©
;

180 
ªq
->
dev
 = 
bh
->
b_dev
;

181 
ªq
->
cmd
 = 
rw
;

182 
ªq
->
îr‹s
 = 0;

183 
ªq
->
£˘‹
 = 
bh
->
b_blockƒ
 << 1;

184 
ªq
->
ƒ_£˘‹s
 = 2;

185 
ªq
->
buf„r
 = 
bh
->
b_d©a
;

186 
ªq
->
waôög
 = 
NULL
;

187 
ªq
->
bh
 = bh;

188 
ªq
->
√xt
 = 
NULL
;

189 
	`add_ªque°
 (
maj‹
 + 
blk_dev
, 
ªq
);

190 
	}
}

195 
	$Œ_rw_block
 (
rw
, 
buf„r_hód
 *
bh
)

197 
maj‹
;

200 i‡((
maj‹
 = 
	`MAJOR
 (
bh
->
b_dev
)Ë>
NR_BLK_DEV
 ||

201 !(
blk_dev
[
maj‹
].
ªque°_‚
))

203 
	`¥ötk
 ("TryingÅoÑeadÇonexistent block-device\n\r");

206 
	`make_ªque°
 (
maj‹
, 
rw
, 
bh
);

207 
	}
}

211 
	$blk_dev_öô
 ()

213 
i
;

215 
i
 = 0; i < 
NR_REQUEST
; i++)

217 
ªque°
[
i
].
dev
 = -1;

218 
ªque°
[
i
].
√xt
 = 
NULL
;

220 
	}
}

	@kernel/blk_drv/ramdisk.c

6 
	~<£t_£g.h
>

19 
	~<°rög.h
>

21 
	~<löux/c⁄fig.h
>

22 
	~<löux/sched.h
>

24 
	~<löux/fs.h
>

25 
	~<löux/kî√l.h
>

26 
	~<asm/sy°em.h
>

27 
	~<asm/£gmít.h
>

28 
	~<asm/mem‹y.h
>

30 
	#MAJOR_NR
 1

31 
	~"blk.h
"

	)

33 *
	grd_°¨t
 = 0;

35 
	grd_Àngth
 = 0;

39 
	$do_rd_ªque°
 ()

41 
Àn
;

42 *
addr
;

44 
INIT_REQUEST
;

47 
addr
 = 
rd_°¨t
 + (
CURRENT
->
£˘‹
 << 9);

48 
Àn
 = 
CURRENT
->
ƒ_£˘‹s
 << 9;

51 i‡((
	`MINOR
 (
CURRENT
->
dev
Ë!1Ë|| (
addr
 + 
Àn
 > 
rd_°¨t
 + 
rd_Àngth
))

53 
	`íd_ªque°
 (0);

54 
ª≥©
;

57 i‡(
CURRENT
->
cmd
 =
WRITE
)

59 (Ë
	`mem˝y
 (
addr
, 
CURRENT
->
buf„r
, 
Àn
);

62 i‡(
CURRENT
->
cmd
 =
READ
)

64 (Ë
	`mem˝y
 (
CURRENT
->
buf„r
, 
addr
, 
Àn
);

68 
	`∑nic
 ("unknownÑamdisk-command");

70 
	`íd_ªque°
 (1);

71 
ª≥©
;

72 
	}
}

77 
	$rd_öô
 (
mem_°¨t
, 
Àngth
)

79 
i
;

80 *
˝
;

82 
blk_dev
[
MAJOR_NR
].
ªque°_‚
 = 
DEVICE_REQUEST
;

83 
rd_°¨t
 = (*Ë
mem_°¨t
;

84 
rd_Àngth
 = 
Àngth
;

85 
˝
 = 
rd_°¨t
;

86 
i
 = 0; i < 
Àngth
; i++)

87 *
˝
++ = '\0';

88  (
Àngth
);

89 
	}
}

97 
	$rd_lﬂd
 ()

99 
buf„r_hód
 *
bh
;

100 
su≥r_block
 
s
;

101 
block
 = 256;

102 
i
 = 1;

103 
nblocks
;

104 *
˝
;

106 i‡(!
rd_Àngth
)

108 
	`¥ötk
 ("Ram disk: %d byãs, sèπögáà0x%x\n", 
rd_Àngth
, (Ë
rd_°¨t
);

109 i‡(
	`MAJOR
 (
ROOT_DEV
) != 2)

114 
bh
 = 
	`bªada
 (
ROOT_DEV
, 
block
 + 1, block, block + 2, -1);

115 i‡(!
bh
)

117 
	`¥ötk
 ("DiskÉrror whileÜooking forÑamdisk!\n");

121 *((
d_su≥r_block
 *Ë&
s
Ë*((d_su≥r_block *Ë
bh
->
b_d©a
);

122 
	`bªl£
 (
bh
);

123 i‡(
s
.
s_magic
 !
SUPER_MAGIC
)

128 
nblocks
 = 
s
.
s_nz⁄es
 << s.
s_log_z⁄e_size
;

129 i‡(
nblocks
 > (
rd_Àngth
 >> 
BLOCK_SIZE_BITS
))

131 
	`¥ötk
 ("Ram disk imageÅoo big! (%d blocks, %dávail)\n",

132 
nblocks
, 
rd_Àngth
 >> 
BLOCK_SIZE_BITS
);

135 
	`¥ötk
 ("Loading %d bytes intoÑam disk... 0000k",

136 
nblocks
 << 
BLOCK_SIZE_BITS
);

138 
˝
 = 
rd_°¨t
;

139 
nblocks
)

141 i‡(
nblocks
 > 2)

142 
bh
 = 
	`bªada
 (
ROOT_DEV
, 
block
, block + 1, block + 2, -1);

144 
bh
 = 
	`bªad
 (
ROOT_DEV
, 
block
);

145 i‡(!
bh
)

147 
	`¥ötk
 ("I/OÉº‹ o¿block %d,áb‹tögÜﬂd\n", 
block
);

150 (Ë
	`mem˝y
 (
˝
, 
bh
->
b_d©a
, 
BLOCK_SIZE
);

151 
	`bªl£
 (
bh
);

152 
	`¥ötk
 ("\010\010\010\010\010%4dk", 
i
);

153 
˝
 +
BLOCK_SIZE
;

154 
block
++;

155 
nblocks
--;

156 
i
++;

158 
	`¥ötk
 ("\010\010\010\010\010done \n");

159 
ROOT_DEV
 = 0x0101;

160 
	}
}

	@kernel/chr_drv/console.c

6 
	~<£t_£g.h
>

30 
	~<löux/sched.h
>

32 
	~<löux/ây.h
>

33 
	~<asm/io.h
>

34 
	~<asm/sy°em.h
>

41 
	#ORIG_X
 (*(*)0x90000)

42 
	#ORIG_Y
 (*(*)0x90001)

43 
	#ORIG_VIDEO_PAGE
 (*(*)0x90004)

44 
	#ORIG_VIDEO_MODE
 ((*(*)0x90006) & 0xff)

45 
	#ORIG_VIDEO_COLS
 (((*(*)0x90006) & 0xff00) >> 8)

46 
	#ORIG_VIDEO_LINES
 (25)

47 
	#ORIG_VIDEO_EGA_AX
 (*(*)0x90008)

48 
	#ORIG_VIDEO_EGA_BX
 (*(*)0x9000a)

49 
	#ORIG_VIDEO_EGA_CX
 (*(*)0x9000c)

50 

	)

52 
	#VIDEO_TYPE_MDA
 0x10

	)

53 
	#VIDEO_TYPE_CGA
 0x11

	)

54 
	#VIDEO_TYPE_EGAM
 0x20

	)

55 
	#VIDEO_TYPE_EGAC
 0x21

	)

57 
	#NPAR
 16

	)

59 
keybﬂrd_öãºu±
 ();

61 
	gvideo_ty≥
;

62 
	gvideo_num_cﬁumns
;

63 
	gvideo_size_row
;

64 
	gvideo_num_löes
;

65 
	gvideo_∑ge
;

66 
	gvideo_mem_°¨t
;

67 
	gvideo_mem_íd
;

68 
	gvideo_p‹t_ªg
;

69 
	gvideo_p‹t_vÆ
;

70 
	gvideo_îa£_ch¨
;

74 
	g‹igö
;

75 
	gs¸_íd
;

76 
	gpos
;

77 
	gx
, 
	gy
;

78 
	gt›
, 
	gbŸtom
;

80 
	g°©e
 = 0;

81 
	g≈¨
, 
	g∑r
[
NPAR
];

82 
	gques
 = 0;

83 
	g©å
 = 0x07;

85 
sysbìp
 ();

91 
	#RESPONSE
 "\033[?1;2c"

	)

97 
_ölöe
 

98 
	$gŸoxy
 (
√w_x
, 
√w_y
)

101 i‡(
√w_x
 > 
video_num_cﬁumns
 || 
√w_y
 >
video_num_löes
)

104 
x
 = 
√w_x
;

105 
y
 = 
√w_y
;

106 
pos
 = 
‹igö
 + 
y
 * 
video_size_row
 + (
x
 << 1);

107 
	}
}

110 
_ölöe
 

111 
	$£t_‹igö
 ()

113 
	`˛i
 ();

116 
	`outb_p
 (12, 
video_p‹t_ªg
);

117 
	`outb_p
 (()(0xf‡& ((
‹igö
 - 
video_mem_°¨t
Ë>> 9)), 
video_p‹t_vÆ
);

119 
	`outb_p
 (13, 
video_p‹t_ªg
);

120 
	`outb_p
 (()(0xf‡& ((
‹igö
 - 
video_mem_°¨t
Ë>> 1)), 
video_p‹t_vÆ
);

121 
	`°i
 ();

122 
	}
}

127 
	$s¸up
 ()

129 
t1
,
t2
,
t3
;

132 i‡(
video_ty≥
 =
VIDEO_TYPE_EGAC
 || video_ty≥ =
VIDEO_TYPE_EGAM
)

135 i‡(!
t›
 && 
bŸtom
 =
video_num_löes
)

139 
‹igö
 +
video_size_row
;

140 
pos
 +
video_size_row
;

141 
s¸_íd
 +
video_size_row
;

144 i‡(
s¸_íd
 > 
video_mem_íd
)

149 
t1
 = (
video_num_löes
 - 1Ë* 
video_num_cﬁumns
 >> 1;

150 
_asm
 {

151 
pushf


152 
mov
 
ecx
,
t1
;

154 
mov
 
ax
,
video_îa£_ch¨
;

155 
mov
 
edi
,
video_mem_°¨t
;

156 
mov
 
esi
,
‹igö
;

157 
˛d
;

158 
ªp
 
movsd
;

159 
mov
 
ecx
,
video_num_cﬁumns
;

160 
ªp
 
°osw
;

161 
p›f


173 
s¸_íd
 -
‹igö
 - 
video_mem_°¨t
;

174 
pos
 -
‹igö
 - 
video_mem_°¨t
;

175 
‹igö
 = 
video_mem_°¨t
;

182 
t1
 = 
s¸_íd
 - 
video_size_row
;

183 
_asm
 {

184 
pushf


185 
mov
 
ax
,
video_îa£_ch¨
;

186 
mov
 
ecx
,
video_num_cﬁumns
;

187 
mov
 
edi
,
t1
;

189 
˛d
;

190 
ªp
 
°osw
;

191 
p›f


200 
	`£t_‹igö
 ();

209 
t1
 = (
bŸtom
 - 
t›
 - 1Ë* 
video_num_cﬁumns
 >> 1;

210 
t2
 = 
‹igö
 + 
video_size_row
 * 
t›
;

211 
t3
 = 
‹igö
 + 
video_size_row
 * (
t›
 + 1);

212 
_asm
 {

213 
pushf


215 
mov
 
ecx
,
t1
;

217 
mov
 
edi
,
t2
;

219 
mov
 
esi
,
t3
;

220 
mov
 
ax
,
video_îa£_ch¨
;

221 
˛d
;

222 
ªp
 
movsd
;

223 
mov
 
ecx
,
video_num_cﬁumns
;

224 
ªp
 
°osw
;

225 
p›f


242 
t1
 = (
bŸtom
 - 
t›
 - 1Ë* 
video_num_cﬁumns
 >> 1;

243 
t2
 = 
‹igö
 + 
video_size_row
 * 
t›
;

244 
t3
 = 
‹igö
 + 
video_size_row
 * (
t›
 + 1);

245 
_asm
 {

246 
pushf


247 
mov
 
ecx
,
t1
;

249 
mov
 
edi
,
t2
;

251 
mov
 
esi
,
t3
;

253 
mov
 
ax
,
video_îa£_ch¨
;

254 
˛d
;

255 
ªp
 
movsd
;

256 
mov
 
ecx
,
video_num_cﬁumns
;

257 
ªp
 
°osw
;

258 
p›f


267 
	}
}

274 
	$s¸down
 ()

276 
t1
,
t2
,
t3
;

279 i‡(
video_ty≥
 =
VIDEO_TYPE_EGAC
 || video_ty≥ =
VIDEO_TYPE_EGAM
)

284 
t1
 = (
bŸtom
 - 
t›
 - 1Ë* 
video_num_cﬁumns
 >> 1;

285 
t2
 = 
‹igö
 + 
video_size_row
 * 
bŸtom
 - 4;

286 
t3
 = 
‹igö
 + 
video_size_row
 * (
bŸtom
 - 1) - 4;

287 
_asm
 {

288 
pushf


289 
mov
 
ecx
,
t1
;

291 
mov
 
edi
,
t2
;

293 
mov
 
esi
,
t3
;

295 
mov
 
ax
,
video_îa£_ch¨
;

296 
°d
;

297 
ªp
 
movsd
;

298 
add
 
edi
,2;

299 
mov
 
ecx
,
video_num_cﬁumns
;

300 
ªp
 
°osw
;

301 
p›f


319 
t1
 = (
bŸtom
 - 
t›
 - 1Ë* 
video_num_cﬁumns
 >> 1;

320 
t2
 = 
‹igö
 + 
video_size_row
 * 
bŸtom
 - 4;

321 
t3
 = 
‹igö
 + 
video_size_row
 * (
bŸtom
 - 1) - 4;

322 
_asm
 {

323 
pushf


324 
mov
 
ecx
,
t1
;

326 
mov
 
edi
,
t2
;

328 
mov
 
esi
,
t3
;

330 
mov
 
ax
,
video_îa£_ch¨
;

331 
°d
;

332 
ªp
 
movsd
;

333 
add
 
edi
,2;

334 
mov
 
ecx
,
video_num_cﬁumns
;

335 
ªp
 
°osw
;

336 
p›f


346 
	}
}

350 
	$lf
 ()

354 i‡(
y
 + 1 < 
bŸtom
)

356 
y
++;

357 
pos
 +
video_size_row
;

361 
	`s¸up
 ();

362 
	}
}

366 
	$ri
 ()

370 i‡(
y
 > 
t›
)

372 
y
--;

373 
pos
 -
video_size_row
;

377 
	`s¸down
 ();

378 
	}
}

382 
	$¸
 ()

385 
pos
 -
x
 << 1;

386 
x
 = 0;

387 
	}
}

391 
	$dñ
 ()

395 i‡(
x
)

397 
pos
 -= 2;

398 
x
--;

399 *(*Ë
pos
 = 
video_îa£_ch¨
;

401 
	}
}

408 
	$csi_J
 (
∑r
)

410 
cou¡
;

411 
°¨t
;

414 
∑r
)

417 
cou¡
 = (
s¸_íd
 - 
pos
) >> 1;

418 
°¨t
 = 
pos
;

421 
cou¡
 = (
pos
 - 
‹igö
) >> 1;

422 
°¨t
 = 
‹igö
;

425 
cou¡
 = 
video_num_cﬁumns
 * 
video_num_löes
;

426 
°¨t
 = 
‹igö
;

433 
_asm
 {

434 
pushf


435 
mov
 
ecx
,
cou¡
;

436 
mov
 
edi
,
°¨t
;

437 
mov
 
ax
,
video_îa£_ch¨
;

438 
˛d
;

439 
ªp
 
°osw
;

440 
p›f


444 
	}
}

449 
	$csi_K
 (
∑r
)

451 
cou¡
;

452 
°¨t
;

455 
∑r
)

458 i‡(
x
 >
video_num_cﬁumns
)

460 
cou¡
 = 
video_num_cﬁumns
 - 
x
;

461 
°¨t
 = 
pos
;

464 
°¨t
 = 
pos
 - (
x
 << 1);

465 
cou¡
 = (
x
 < 
video_num_cﬁumns
) ? x : video_num_columns;

468 
°¨t
 = 
pos
 - (
x
 << 1);

469 
cou¡
 = 
video_num_cﬁumns
;

476 
_asm
 {

477 
pushf


478 
mov
 
ecx
,
cou¡
;

479 
mov
 
edi
,
°¨t
;

480 
mov
 
ax
,
video_îa£_ch¨
;

481 
˛d
;

482 
ªp
 
°osw
;

483 
p›f


487 
	}
}

492 
	$csi_m
 ()

494 
i
;

496 
i
 = 0; i <
≈¨
; i++)

497 
∑r
[
i
])

500 
©å
 = 0x07;

503 
©å
 = 0x0f;

506 
©å
 = 0x0f;

509 
©å
 = 0x70;

512 
©å
 = 0x07;

515 
	}
}

519 
_ölöe
 

520 
	$£t_curs‹
 ()

522 
	`˛i
 ();

525 
	`outb_p
 (14, 
video_p‹t_ªg
);

526 
	`outb_p
 (()(0xf‡& ((
pos
 - 
video_mem_°¨t
Ë>> 9)), 
video_p‹t_vÆ
);

528 
	`outb_p
 (15, 
video_p‹t_ªg
);

529 
	`outb_p
 (()(0xf‡& ((
pos
 - 
video_mem_°¨t
Ë>> 1)), 
video_p‹t_vÆ
);

530 
	`°i
 ();

531 
	}
}

536 
	$ª•⁄d
 (
ây_°ru˘
 *
ây
)

538 *
p
 = 
RESPONSE
;

540 
	`˛i
 ();

541 *
p
)

543 
	`PUTCH
 (*
p
, 
ây
->
ªad_q
);

544 
p
++;

546 
	`°i
 ();

547 
	`c›y_to_cooked
 (
ây
);

548 
	}
}

552 
	$ö£π_ch¨
 ()

554 
i
 = 
x
;

555 
tmp
, 
ﬁd
 = 
video_îa£_ch¨
;

556 *
p
 = (*Ë
pos
;

560 
i
++ < 
video_num_cﬁumns
)

562 
tmp
 = *
p
;

563 *
p
 = 
ﬁd
;

564 
ﬁd
 = 
tmp
;

565 
p
++;

567 
	}
}

572 
	$ö£π_löe
 ()

574 
ﬁdt›
, 
ﬁdbŸtom
;

576 
ﬁdt›
 = 
t›
;

577 
ﬁdbŸtom
 = 
bŸtom
;

578 
t›
 = 
y
;

579 
bŸtom
 = 
video_num_löes
;

580 
	`s¸down
 ();

581 
t›
 = 
ﬁdt›
;

582 
bŸtom
 = 
ﬁdbŸtom
;

583 
	}
}

587 
	$dñëe_ch¨
 ()

589 
i
;

590 *
p
 = (*Ë
pos
;

593 i‡(
x
 >
video_num_cﬁumns
)

596 
i
 = 
x
;

597 ++
i
 < 
video_num_cﬁumns
)

599 *
p
 = *(p + 1);

600 
p
++;

603 *
p
 = 
video_îa£_ch¨
;

604 
	}
}

609 
	$dñëe_löe
 ()

611 
ﬁdt›
, 
ﬁdbŸtom
;

613 
ﬁdt›
 = 
t›
;

614 
ﬁdbŸtom
 = 
bŸtom
;

615 
t›
 = 
y
;

616 
bŸtom
 = 
video_num_löes
;

617 
	`s¸up
 ();

618 
t›
 = 
ﬁdt›
;

619 
bŸtom
 = 
ﬁdbŸtom
;

620 
	}
}

626 
	$csi_©
 (
ƒ
)

629 i‡(
ƒ
 > 
video_num_cﬁumns
)

630 
ƒ
 = 
video_num_cﬁumns
;

631 i‡(!
ƒ
)

632 
ƒ
 = 1;

634 
ƒ
--)

635 
	`ö£π_ch¨
 ();

636 
	}
}

641 
	$csi_L
 (
ƒ
)

644 i‡(
ƒ
 > 
video_num_löes
)

645 
ƒ
 = 
video_num_löes
;

646 i‡(!
ƒ
)

647 
ƒ
 = 1;

649 
ƒ
--)

650 
	`ö£π_löe
 ();

651 
	}
}

656 
	$csi_P
 (
ƒ
)

659 i‡(
ƒ
 > 
video_num_cﬁumns
)

660 
ƒ
 = 
video_num_cﬁumns
;

661 i‡(!
ƒ
)

662 
ƒ
 = 1;

664 
ƒ
--)

665 
	`dñëe_ch¨
 ();

666 
	}
}

671 
	$csi_M
 (
ƒ
)

674 i‡(
ƒ
 > 
video_num_löes
)

675 
ƒ
 = 
video_num_löes
;

676 i‡(!
ƒ
)

677 
ƒ
 = 1;

679 
ƒ
--)

680 
	`dñëe_löe
 ();

681 
	}
}

683 
	gßved_x
 = 0;

684 
	gßved_y
 = 0;

688 
	$ßve_cur
 ()

690 
ßved_x
 = 
x
;

691 
ßved_y
 = 
y
;

692 
	}
}

696 
	$ª°‹e_cur
 ()

698 
	`gŸoxy
 (
ßved_x
, 
ßved_y
);

699 
	}
}

704 
	$c⁄_wrôe
 (
ây_°ru˘
 *
ây
)

706 
ƒ
;

707 
c
;

710 
ƒ
 = 
	`CHARS
 (
ây
->
wrôe_q
);

711 
ƒ
--)

719 
	`GETCH
 (
ây
->
wrôe_q
, 
c
);

720 
°©e
)

724 i‡(
c
 > 31 && c < 127)

727 i‡(
x
 >
video_num_cﬁumns
)

729 
x
 -
video_num_cﬁumns
;

730 
pos
 -
video_size_row
;

731 
	`lf
 ();

735 
_asm
 {

736 
mov
 
Æ
,
c
;

737 
mov
 
ah
,
©å
;

738 
mov
 
ebx
,
pos


739 
mov
 [
ebx
],
ax
;

741 
pos
 += 2;

742 
x
++;

745 i‡(
c
 == 27)

746 
°©e
 = 1;

748 i‡(
c
 == 10 || c == 11 || c == 12)

749 
	`lf
 ();

751 i‡(
c
 == 13)

752 
	`¸
 ();

754 i‡(
c
 =
	`ERASE_CHAR
 (
ây
))

755 
	`dñ
 ();

757 i‡(
c
 == 8)

759 i‡(
x
)

761 
x
--;

762 
pos
 -= 2;

767 i‡(
c
 == 9)

769 
c
 = ()(8 - (
x
 & 7));

770 
x
 +
c
;

771 
pos
 +
c
 << 1;

772 i‡(
x
 > 
video_num_cﬁumns
)

774 
x
 -
video_num_cﬁumns
;

775 
pos
 -
video_size_row
;

776 
	`lf
 ();

778 
c
 = 9;

781 i‡(
c
 == 7)

782 
	`sysbìp
 ();

786 
°©e
 = 0;

788 i‡(
c
 == '[')

789 
°©e
 = 2;

791 i‡(
c
 == 'E')

792 
	`gŸoxy
 (0, 
y
 + 1);

794 i‡(
c
 == 'M')

795 
	`ri
 ();

797 i‡(
c
 == 'D')

798 
	`lf
 ();

800 i‡(
c
 == 'Z')

801 
	`ª•⁄d
 (
ây
);

803 i‡(
x
 == '7')

804 
	`ßve_cur
 ();

806 i‡(
x
 == '8')

807 
	`ª°‹e_cur
 ();

813 
≈¨
 = 0;Ç∑∏< 
NPAR
;Çpar++)

814 
∑r
[
≈¨
] = 0;

815 
≈¨
 = 0;

816 
°©e
 = 3;

817 i‡(
ques
 = (
c
 == '?'))

822 i‡(
c
 =';' && 
≈¨
 < 
NPAR
 - 1)

824 
≈¨
++;

828 i‡(
c
 >= '0' && c <= '9')

830 
∑r
[
≈¨
] = 10 *Ö¨[≈¨] + 
c
 - '0';

835 
°©e
 = 4;

838 
°©e
 = 0;

839 
c
)

844 i‡(
∑r
[0])

845 
∑r
[0]--;

846 
	`gŸoxy
 (
∑r
[0], 
y
);

850 i‡(!
∑r
[0])

851 
∑r
[0]++;

852 
	`gŸoxy
 (
x
, 
y
 - 
∑r
[0]);

857 i‡(!
∑r
[0])

858 
∑r
[0]++;

859 
	`gŸoxy
 (
x
, 
y
 + 
∑r
[0]);

864 i‡(!
∑r
[0])

865 
∑r
[0]++;

866 
	`gŸoxy
 (
x
 + 
∑r
[0], 
y
);

870 i‡(!
∑r
[0])

871 
∑r
[0]++;

872 
	`gŸoxy
 (
x
 - 
∑r
[0], 
y
);

876 i‡(!
∑r
[0])

877 
∑r
[0]++;

878 
	`gŸoxy
 (0, 
y
 + 
∑r
[0]);

882 i‡(!
∑r
[0])

883 
∑r
[0]++;

884 
	`gŸoxy
 (0, 
y
 - 
∑r
[0]);

888 i‡(
∑r
[0])

889 
∑r
[0]--;

890 
	`gŸoxy
 (
x
, 
∑r
[0]);

895 i‡(
∑r
[0])

896 
∑r
[0]--;

897 i‡(
∑r
[1])

898 
∑r
[1]--;

899 
	`gŸoxy
 (
∑r
[1],Öar[0]);

904 
	`csi_J
 (
∑r
[0]);

909 
	`csi_K
 (
∑r
[0]);

913 
	`csi_L
 (
∑r
[0]);

917 
	`csi_M
 (
∑r
[0]);

921 
	`csi_P
 (
∑r
[0]);

925 
	`csi_©
 (
∑r
[0]);

930 
	`csi_m
 ();

934 i‡(
∑r
[0])

935 
∑r
[0]--;

936 i‡(!
∑r
[1])

937 
∑r
[1] = 
video_num_löes
;

938 i‡(
∑r
[0] <Ö¨[1] &&Ö¨[1] <
video_num_löes
)

940 
t›
 = 
∑r
[0];

941 
bŸtom
 = 
∑r
[1];

946 
	`ßve_cur
 ();

950 
	`ª°‹e_cur
 ();

956 
	`£t_curs‹
 ();

957 
	}
}

967 
	$c⁄_öô
 ()

969 
a
;

970 *
di•œy_desc
 = "????";

971 *
di•œy_±r
;

973 
video_num_cﬁumns
 = 
ORIG_VIDEO_COLS
;

974 
video_size_row
 = 
video_num_cﬁumns
 * 2;

975 
video_num_löes
 = 
ORIG_VIDEO_LINES
;

976 
video_∑ge
 = ()
ORIG_VIDEO_PAGE
;

977 
video_îa£_ch¨
 = 0x0720;

980 i‡(
ORIG_VIDEO_MODE
 == 7)

982 
video_mem_°¨t
 = 0xb0000;

983 
video_p‹t_ªg
 = 0x3b4;

984 
video_p‹t_vÆ
 = 0x3b5;

989 i‡((
ORIG_VIDEO_EGA_BX
 & 0xff) != 0x10)

991 
video_ty≥
 = 
VIDEO_TYPE_EGAM
;

992 
video_mem_íd
 = 0xb8000;

993 
di•œy_desc
 = "EGAm";

998 
video_ty≥
 = 
VIDEO_TYPE_MDA
;

999 
video_mem_íd
 = 0xb2000;

1000 
di•œy_desc
 = "*MDA";

1007 
video_mem_°¨t
 = 0xb8000;

1008 
video_p‹t_ªg
 = 0x3d4;

1009 
video_p‹t_vÆ
 = 0x3d5;

1011 i‡((
ORIG_VIDEO_EGA_BX
 & 0xff) != 0x10)

1013 
video_ty≥
 = 
VIDEO_TYPE_EGAC
;

1014 
video_mem_íd
 = 0xbc000;

1015 
di•œy_desc
 = "EGAc";

1020 
video_ty≥
 = 
VIDEO_TYPE_CGA
;

1021 
video_mem_íd
 = 0xba000;

1022 
di•œy_desc
 = "*CGA";

1031 
di•œy_±r
 = ((*Ë
video_mem_°¨t
Ë+ 
video_size_row
 - 8;

1033 *
di•œy_desc
)

1035 *
di•œy_±r
++ = *
di•œy_desc
++;

1036 
di•œy_±r
++;

1041 
‹igö
 = 
video_mem_°¨t
;

1042 
s¸_íd
 = 
video_mem_°¨t
 + 
video_num_löes
 * 
video_size_row
;

1043 
t›
 = 0;

1044 
bŸtom
 = 
video_num_löes
;

1046 
	`gŸoxy
 (
ORIG_X
, 
ORIG_Y
);

1047 
	`£t_å≠_g©e
 (0x21, &
keybﬂrd_öãºu±
);

1048 
	`outb_p
 (()(
	`öb_p
 (0x21) & 0xfd), 0x21);

1049 
a
 = 
	`öb_p
 (0x61);

1050 
	`outb_p
 (()(
a
 | 0x80), 0x61);

1051 
	`outb
 (
a
, 0x61);

1052 
	}
}

1059 
	$sysbìp°›
 ()

1062 
	`outb
 (()(
	`öb_p
 (0x61) & 0xFC), 0x61);

1063 
	}
}

1065 
	gbìpcou¡
 = 0;

1072 
	$sysbìp
 ()

1075 
	`outb_p
 (()(
	`öb_p
 (0x61) | 3), 0x61);

1077 
	`outb_p
 (0xB6, 0x43);

1079 
	`outb_p
 (0x37, 0x42);

1080 
	`outb
 (0x06, 0x42);

1082 
bìpcou¡
 = 
HZ
 / 8;

1083 
	}
}

	@kernel/chr_drv/keyboard.h

1 #i‚de‡
KEYBOARD_H


2 
	#KEYBOARD_H


	)

17 #i‡
deföed
(
KBD_FINNISH
)

19 
	gkey_m≠
[] = {

36 
	gshi·_m≠
[] = {

53 
	gÆt_m≠
[] = {

70 #ñi‡
deföed
(
KBD_US
)

73 
	gkey_m≠
[] = {

90 
	gshi·_m≠
[] = {

107 
	gÆt_m≠
[] = {

124 #ñi‡
deföed
(
KBD_GR
)

127 
	gkey_m≠
[] = {

144 
	gshi·_m≠
[] = {

161 
	gÆt_m≠
[] = {

178 #ñi‡
deföed
(
KBD_FR
)

181 
	gkey_m≠
[] = {

198 
	gshi·_m≠
[] = {

215 
	gÆt_m≠
[] = {

239 
n⁄e
();

240 
do_£lf
();

241 
˘æ
();

242 
Æt
();

243 
un˘æ
();

244 
u«…
();

245 
lshi·
();

246 
u∆shi·
();

247 
rshi·
();

248 
uƒshi·
();

249 
ˇps
();

250 
unˇps
();

251 
s¸ﬁl
();

252 
num
();

253 
curs‹
();

254 
func
();

255 
möus
();

265 (*
	gkf
)();

266 
kf
 
	gkey_èbÀ
[]={

267 
n⁄e
, 
do_£lf
,do_self,do_self,

268 
do_£lf
,do_self,do_self,do_self,

269 
do_£lf
,do_self,do_self,do_self,

270 
do_£lf
,do_self,do_self,do_self,

271 
do_£lf
,do_self,do_self,do_self,

272 
do_£lf
,do_self,do_self,do_self,

273 
do_£lf
,do_self,do_self,do_self,

274 
do_£lf
,
˘æ
, do_self,do_self,

275 
do_£lf
,do_self,do_self,do_self,

276 
do_£lf
,do_self,do_self,do_self,

277 
do_£lf
,do_£lf,
lshi·
, do_self,

278 
do_£lf
,do_self,do_self,do_self,

279 
do_£lf
,do_self,do_self,do_self,

280 
do_£lf
,
möus
, 
rshi·
, do_self,

281 
Æt
, 
do_£lf
,
ˇps
, 
func
,

282 
func
, func, func, func,

283 
func
, func, func, func,

284 
func
, 
num
, 
s¸ﬁl
, 
curs‹
,

285 
curs‹
, curs‹, 
do_£lf
,cursor,

286 
curs‹
, curs‹, 
do_£lf
,cursor,

287 
curs‹
, cursor, cursor, cursor,

288 
n⁄e
,Ç⁄e, 
do_£lf
,
func
,

289 
func
, 
n⁄e
,Çone,Çone,

290 
n⁄e
,none,none,none,

291 
n⁄e
,none,none,none,

292 
n⁄e
,none,none,none,

293 
n⁄e
,none,none,none,

294 
n⁄e
,none,none,none,

295 
n⁄e
,none,none,none,

296 
n⁄e
,none,none,none,

297 
n⁄e
,none,none,none,

298 
n⁄e
,none,none,none,

299 
n⁄e
,none,none,none,

300 
n⁄e
,none,none,none,

301 
n⁄e
,none,none,none,

302 
n⁄e
,none,none,none,

303 
n⁄e
,none,none,none,

304 
n⁄e
,none,none,none,

305 
n⁄e
,none,none,none,

306 
n⁄e
,
un˘æ
,none,none,

307 
n⁄e
,none,none,none,

308 
n⁄e
,none,none,none,

309 
n⁄e
,n⁄e,
u∆shi·
,none,

310 
n⁄e
,none,none,none,

311 
n⁄e
,none,none,none,

312 
n⁄e
,n⁄e,
uƒshi·
,none,

313 
u«…
,
n⁄e
,
unˇps
,none,

314 
n⁄e
,none,none,none,

315 
n⁄e
,none,none,none,

316 
n⁄e
,none,none,none,

317 
n⁄e
,none,none,none,

318 
n⁄e
,none,none,none,

319 
n⁄e
,none,none,none,

320 
n⁄e
,none,none,none,

321 
n⁄e
,none,none,none,

322 
n⁄e
,none,none,none,

323 
n⁄e
,none,none,none,

324 
n⁄e
,none,none,none,

325 
n⁄e
,none,none,none,

326 
n⁄e
,none,none,none,

327 
n⁄e
,none,none,none,

328 
n⁄e
,none,none,none,

329 
n⁄e
,none,none,none,

330 
n⁄e
,none,none,none

	@kernel/chr_drv/serial.c

6 
	~<£t_£g.h
>

24 
	~<löux/ây.h
>

25 
	~<löux/sched.h
>

27 
	~<asm/sy°em.h
>

28 
	~<asm/io.h
>

30 
	#WAKEUP_CHARS
 (
TTY_BUF_SIZE
/4)

31 

	)

32 
rs1_öãºu±
 ();

33 
rs2_öãºu±
 ();

37 
	$öô
 (
p‹t
)

39 
	`outb_p
 (0x80, 
p‹t
 + 3);

41 
	`outb_p
 (0x30, 
p‹t
);

43 
	`outb_p
 (0x00, 
p‹t
 + 1);

45 
	`outb_p
 (0x03, 
p‹t
 + 3);

47 
	`outb_p
 (0x0b, 
p‹t
 + 4);

49 
	`outb_p
 (0x0d, 
p‹t
 + 1);

51 (Ë
	`öb
 (
p‹t
);

53 
	}
}

57 
	$rs_öô
 ()

59 
	`£t_öå_g©e
 (0x24, 
rs1_öãºu±
);

60 
	`£t_öå_g©e
 (0x23, 
rs2_öãºu±
);

61 
	`öô
 (
ây_èbÀ
[1].
ªad_q
.
d©a
);

62 
	`öô
 (
ây_èbÀ
[2].
ªad_q
.
d©a
);

63 
	`outb
 (
	`öb_p
 (0x21) & 0xE7, 0x21);

64 
	}
}

72 
	$rs_wrôe
 (
ây_°ru˘
 *
ây
)

74 
	`˛i
 ();

77 i‡(!
	`EMPTY
 (
ây
->
wrôe_q
))

78 
	`outb
 (
	`öb_p
 (
ây
->
wrôe_q
.
d©a
 + 1) | 0x02,Åty->write_q.data + 1);

79 
	`°i
 ();

80 
	}
}

	@kernel/chr_drv/tty_io.c

6 
	~<£t_£g.h
>

14 
	~<˘y≥.h
>

15 
	~<î∫o.h
>

16 
	~<sig«l.h
>

19 
	#ALRMMASK
 (1<<(
SIGALRM
-1))

20 
	#KILLMASK
 (1<<(
SIGKILL
-1))

21 
	#INTMASK
 (1<<(
SIGINT
-1))

22 
	#QUITMASK
 (1<<(
SIGQUIT
-1))

23 
	#TSTPMASK
 (1<<(
SIGTSTP
-1))

24 

	)

25 
	~<löux/sched.h
>

27 
	~<löux/ây.h
>

28 
	~<asm/£gmít.h
>

29 
	~<asm/sy°em.h
>

31 
	#_L_FLAG
(
ây
,
f
Ë(—ty)->
ãrmios
.
c_lÊag
 & f)

32 
	#_I_FLAG
(
ây
,
f
Ë(—ty)->
ãrmios
.
c_iÊag
 & f)

33 
	#_O_FLAG
(
ây
,
f
Ë(—ty)->
ãrmios
.
c_oÊag
 & f)

34 

	)

36 
	#L_CANON
(
ây
Ë
	`_L_FLAG
(—ty),
ICANON
)

37 
	#L_ISIG
(
ây
Ë
	`_L_FLAG
(—ty),
ISIG
)

38 
	#L_ECHO
(
ây
Ë
	`_L_FLAG
(—ty),
ECHO
)

39 
	#L_ECHOE
(
ây
Ë
	`_L_FLAG
(—ty),
ECHOE
)

40 
	#L_ECHOK
(
ây
Ë
	`_L_FLAG
(—ty),
ECHOK
)

41 
	#L_ECHOCTL
(
ây
Ë
	`_L_FLAG
(—ty),
ECHOCTL
)

42 
	#L_ECHOKE
(
ây
Ë
	`_L_FLAG
(—ty),
ECHOKE
)

43 

	)

45 
	#I_UCLC
(
ây
Ë
	`_I_FLAG
(—ty),
IUCLC
)

46 
	#I_NLCR
(
ây
Ë
	`_I_FLAG
(—ty),
INLCR
)

47 
	#I_CRNL
(
ây
Ë
	`_I_FLAG
(—ty),
ICRNL
)

48 
	#I_NOCR
(
ây
Ë
	`_I_FLAG
(—ty),
IGNCR
)

49 

	)

51 
	#O_POST
(
ây
Ë
	`_O_FLAG
(—ty),
OPOST
)

52 
	#O_NLCR
(
ây
Ë
	`_O_FLAG
(—ty),
ONLCR
)

53 
	#O_CRNL
(
ây
Ë
	`_O_FLAG
(—ty),
OCRNL
)

54 
	#O_NLRET
(
ây
Ë
	`_O_FLAG
(—ty),
ONLRET
)

55 
	#O_LCUC
(
ây
Ë
	`_O_FLAG
(—ty),
OLCUC
)

56 

	)

59 
ây_°ru˘
 
	gây_èbÀ
[] = {

62 
ICRNL
,

63 
OPOST
 | 
ONLCR
,

65 
ISIG
 | 
ICANON
 | 
ECHO
 | 
ECHOCTL
 | 
ECHOKE
,

67 
INIT_C_CC


71 
c⁄_wrôe
,

79 
B2400
 | 
CS8
,

82 
INIT_C_CC


86 
rs_wrôe
,

94 
B2400
 | 
CS8
,

97 
INIT_C_CC


101 
rs_wrôe
,

113 
ây_queue
 *
	gèbÀ_li°
[] = {

114 &
ây_èbÀ
[0].
ªad_q
, &ây_èbÀ[0].
wrôe_q
,

115 &
ây_èbÀ
[1].
ªad_q
, &ây_èbÀ[1].
wrôe_q
,

116 &
ây_èbÀ
[2].
ªad_q
, &ây_èbÀ[2].
wrôe_q


121 
	$ây_öô
 ()

123 
	`rs_öô
 ();

124 
	`c⁄_öô
 ();

125 
	}
}

129 
	$ây_öå
 (
ây_°ru˘
 *
ây
, 
mask
)

131 
i
;

134 i‡(
ây
->
pgΩ
 <= 0)

137 
i
 = 0; i < 
NR_TASKS
; i++) {

139 i‡(
èsk
[
i
] &&Åask[i]->
pgΩ
 =
ây
->pgrp)

140 
èsk
[
i
]->
sig«l
 |
mask
;

142 
	}
}

148 
	$¶ìp_if_em±y
 (
ây_queue
 *
queue
)

150 
	`˛i
 ();

153 !
cuºít
->
sig«l
 && 
	`EMPTY
 (*
queue
))

154 
	`öãºu±ibÀ_¶ìp_⁄
 (&
queue
->
¥oc_li°
);

155 
	`°i
 ();

156 
	}
}

162 
	$¶ìp_if_fuŒ
 (
ây_queue
 *
queue
)

165 i‡(!
	`FULL
 (*
queue
))

167 
	`˛i
 ();

170 !
cuºít
->
sig«l
 && 
	`LEFT
 (*
queue
) < 128)

171 
	`öãºu±ibÀ_¶ìp_⁄
 (&
queue
->
¥oc_li°
);

172 
	`°i
 ();

173 
	}
}

177 
	$waô_f‹_key¥ess
 ()

179 
	`¶ìp_if_em±y
 (&
ây_èbÀ
[0].
£c⁄d¨y
);

180 
	}
}

185 
	$c›y_to_cooked
 (
ây_°ru˘
 *
ây
)

187 sig√d 
c
;

190 !
	`EMPTY
 (
ây
->
ªad_q
Ë&& !
	`FULL
 (ây->
£c⁄d¨y
))

193 
	`GETCH
 (
ây
->
ªad_q
, 
c
);

197 i‡(
c
 == 13) {

198 i‡(
	`I_CRNL
 (
ây
))

199 
c
 = 10;

200 i‡(
	`I_NOCR
 (
ây
))

204 } i‡(
c
 =10 && 
	`I_NLCR
 (
ây
))

205 
c
 = 13;

207 i‡(
	`I_UCLC
 (
ây
))

208 
c
 = 
	`tﬁowî
 (c);

210 i‡(
	`L_CANON
 (
ây
))

213 i‡(
c
 =
	`KILL_CHAR
 (
ây
))

218 !(
	`EMPTY
 (
ây
->
£c⁄d¨y
) ||

219 (
c
 = 
	`LAST
 (
ây
->
£c⁄d¨y
)) == 10 ||

220 
c
 =
	`EOF_CHAR
 (
ây
)))

224 i‡(
	`L_ECHO
 (
ây
))

226 i‡(
c
 < 32)

227 
	`PUTCH
 (127, 
ây
->
wrôe_q
);

228 
	`PUTCH
 (127, 
ây
->
wrôe_q
);

229 
ây
->
	`wrôe
 (tty);

232 
	`DEC
 (
ây
->
£c⁄d¨y
.
hód
);

237 i‡(
c
 =
	`ERASE_CHAR
 (
ây
))

241 i‡(
	`EMPTY
 (
ây
->
£c⁄d¨y
) ||

242 (
c
 = 
	`LAST
 (
ây
->
£c⁄d¨y
)Ë=10 || c =
	`EOF_CHAR
 (tty))

246 i‡(
	`L_ECHO
 (
ây
))

248 i‡(
c
 < 32)

249 
	`PUTCH
 (127, 
ây
->
wrôe_q
);

250 
	`PUTCH
 (127, 
ây
->
wrôe_q
);

251 
ây
->
	`wrôe
 (tty);

254 
	`DEC
 (
ây
->
£c⁄d¨y
.
hód
);

258 i‡(
c
 =
	`STOP_CHAR
 (
ây
))

260 
ây
->
°›≥d
 = 1;

264 i‡(
c
 =
	`START_CHAR
 (
ây
))

266 
ây
->
°›≥d
 = 0;

272 i‡(
	`L_ISIG
 (
ây
))

275 i‡(
c
 =
	`INTR_CHAR
 (
ây
))

277 
	`ây_öå
 (
ây
, 
INTMASK
);

281 i‡(
c
 =
	`QUIT_CHAR
 (
ây
))

283 
	`ây_öå
 (
ây
, 
QUITMASK
);

288 i‡(
c
 =10 || c =
	`EOF_CHAR
 (
ây
))

289 
ây
->
£c⁄d¨y
.
d©a
++;

294 i‡(
	`L_ECHO
 (
ây
))

296 i‡(
c
 == 10)

298 
	`PUTCH
 (10, 
ây
->
wrôe_q
);

299 
	`PUTCH
 (13, 
ây
->
wrôe_q
);

301 i‡(
c
 < 32)

303 i‡(
	`L_ECHOCTL
 (
ây
))

305 
	`PUTCH
 ('^', 
ây
->
wrôe_q
);

306 
	`PUTCH
 (
c
 + 64, 
ây
->
wrôe_q
);

310 
	`PUTCH
 (
c
, 
ây
->
wrôe_q
);

311 
ây
->
	`wrôe
 (tty);

314 
	`PUTCH
 (
c
, 
ây
->
£c⁄d¨y
);

317 
	`wake_up
 (&
ây
->
£c⁄d¨y
.
¥oc_li°
);

318 
	}
}

323 
	$ây_ªad
 (
ch™√l
, *
buf
, 
ƒ
)

325 
ây_°ru˘
 *
ây
;

326 
c
, *
b
 = 
buf
;

327 
möimum
, 
time
, 
Êag
 = 0;

328 
ﬁdÆ¨m
;

332 i‡(
ch™√l
 > 2 || 
ƒ
 < 0)

335 
ây
 = &
ây_èbÀ
[
ch™√l
];

340 
ﬁdÆ¨m
 = 
cuºít
->
Æ¨m
;

342 
time
 = 10L * 
ây
->
ãrmios
.
c_cc
[
VTIME
];

343 
möimum
 = 
ây
->
ãrmios
.
c_cc
[
VMIN
];

346 i‡(
time
 && !
möimum
)

348 
möimum
 = 1;

351 i‡(
Êag
 = (!
ﬁdÆ¨m
 || 
time
 + 
jiffõs
 < oldalarm))

352 
cuºít
->
Æ¨m
 = 
time
 + 
jiffõs
;

355 i‡(
möimum
 > 
ƒ
)

356 
möimum
 = 
ƒ
;

358 
ƒ
 > 0)

362 i‡(
Êag
 && (
cuºít
->
sig«l
 & 
ALRMMASK
))

364 
cuºít
->
sig«l
 &~
ALRMMASK
;

368 i‡(
cuºít
->
sig«l
)

372 i‡(
	`EMPTY
 (
ây
->
£c⁄d¨y
Ë|| (
	`L_CANON
 (tty) &&

373 !
ây
->
£c⁄d¨y
.
d©a


374 && 
	`LEFT
 (
ây
->
£c⁄d¨y
) > 20))

376 
	`¶ìp_if_em±y
 (&
ây
->
£c⁄d¨y
);

382 
	`GETCH
 (
ây
->
£c⁄d¨y
, 
c
);

384 i‡(
c
 =
	`EOF_CHAR
 (
ây
) || c == 10)

385 
ây
->
£c⁄d¨y
.
d©a
--;

387 i‡(
c
 =
	`EOF_CHAR
 (
ây
Ë&& 
	`L_CANON
 (tty))

388  (
b
 - 
buf
);

392 
	`put_fs_byã
 (
c
, 
b
++);

393 i‡(!--
ƒ
)

396 } 
ƒ
 > 0 && !
	`EMPTY
 (
ây
->
£c⁄d¨y
));

398 i‡(
time
 && !
	`L_CANON
 (
ây
))

401 i‡(
Êag
 = (!
ﬁdÆ¨m
 || 
time
 + 
jiffõs
 < oldalarm))

402 
cuºít
->
Æ¨m
 = 
time
 + 
jiffõs
;

404 
cuºít
->
Æ¨m
 = 
ﬁdÆ¨m
;

407 i‡(
	`L_CANON
 (
ây
))

409 i‡(
b
 - 
buf
)

412 i‡(
b
 - 
buf
 >
möimum
)

416 
cuºít
->
Æ¨m
 = 
ﬁdÆ¨m
;

418 i‡(
cuºít
->
sig«l
 && !(
b
 - 
buf
))

419  -
EINTR
;

420  (
b
 - 
buf
);

421 
	}
}

426 
	$ây_wrôe
 (
ch™√l
, *
buf
, 
ƒ
)

428 
¸_Êag
 = 0;

429 
ây_°ru˘
 *
ây
;

430 
c
, *
b
 = 
buf
;

434 i‡(
ch™√l
 > 2 || 
ƒ
 < 0)

437 
ây
 = 
ch™√l
 + 
ây_èbÀ
;

439 
ƒ
 > 0)

442 
	`¶ìp_if_fuŒ
 (&
ây
->
wrôe_q
);

444 i‡(
cuºít
->
sig«l
)

447 
ƒ
 > 0 && !
	`FULL
 (
ây
->
wrôe_q
))

450 
c
 = 
	`gë_fs_byã
 (
b
);

452 i‡(
	`O_POST
 (
ây
))

457 i‡(
c
 ='\r' && 
	`O_CRNL
 (
ây
))

458 
c
 = '\n';

459 i‡(
c
 ='\n' && 
	`O_NLRET
 (
ây
))

460 
c
 = '\r';

463 i‡(
c
 ='\n' && !
¸_Êag
 && 
	`O_NLCR
 (
ây
))

465 
¸_Êag
 = 1;

466 
	`PUTCH
 (13, 
ây
->
wrôe_q
);

470 i‡(
	`O_LCUC
 (
ây
))

471 
c
 = 
	`touµî
 (c);

475 
b
++;

476 
ƒ
--;

477 
¸_Êag
 = 0;

478 
	`PUTCH
 (
c
, 
ây
->
wrôe_q
);

482 
ây
->
	`wrôe
 (tty);

483 i‡(
ƒ
 > 0)

484 
	`scheduÀ
 ();

486  (
b
 - 
buf
);

487 
	}
}

501 
	$do_ây_öãºu±
 (
ây
)

503 
	`c›y_to_cooked
 (
ây_èbÀ
 + 
ây
);

504 
	}
}

507 
	$chr_dev_öô
 ()

509 
	}
}

	@kernel/chr_drv/tty_ioctl.c

6 
	~<£t_£g.h
>

8 
	~<î∫o.h
>

9 
	~<ãrmios.h
>

11 
	~<löux/sched.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/ây.h
>

16 
	~<asm/io.h
>

17 
	~<asm/£gmít.h
>

18 
	~<asm/sy°em.h
>

21 
	gquŸõ¡
[] = {

32 
	$ch™ge_•ìd
 (
ây_°ru˘
 *
ây
)

34 
p‹t
, 
quŸ
;

37 i‡(!(
p‹t
 = 
ây
->
ªad_q
.
d©a
))

41 
quŸ
 = 
quŸõ¡
[
ây
->
ãrmios
.
c_cÊag
 & 
CBAUD
];

42 
	`˛i
 ();

43 
	`outb_p
 (0x80, 
p‹t
 + 3);

44 
	`outb_p
 (
quŸ
 & 0xff, 
p‹t
);

45 
	`outb_p
 (
quŸ
 >> 8, 
p‹t
 + 1);

46 
	`outb
 (0x03, 
p‹t
 + 3);

47 
	`°i
 ();

48 
	}
}

54 
	$Êush
 (
ây_queue
 *
queue
)

56 
	`˛i
 ();

57 
queue
->
hód
 = queue->
èû
;

58 
	`°i
 ();

59 
	}
}

63 
	$waô_u¡û_£¡
 (
ây_°ru˘
 *
ây
)

66 
	}
}

70 
	$£nd_bªak
 (
ây_°ru˘
 *
ây
)

73 
	}
}

79 
	$gë_ãrmios
 (
ây_°ru˘
 *
ây
, 
ãrmios
 *termios)

81 
i
;

84 
	`vîify_¨ó
 (
ãrmios
,  (*termios));

86 
i
 = 0; i < ( (*
ãrmios
)); i++)

87 
	`put_fs_byã
 (((*Ë&
ây
->
ãrmios
)[
i
], i + (*)Åermios);

89 
	}
}

95 
	$£t_ãrmios
 (
ây_°ru˘
 *
ây
, 
ãrmios
 *termios)

97 
i
;

100 
i
 = 0; i < ( (*
ãrmios
)); i++)

101 ((*Ë&
ây
->
ãrmios
)[
i
] = 
	`gë_fs_byã
 (i + (*)Åermios);

104 
	`ch™ge_•ìd
 (
ây
);

106 
	}
}

112 
	$gë_ãrmio
 (
ây_°ru˘
 *
ây
, 
ãrmio
 *termio)

114 
i
;

115 
ãrmio
 
tmp_ãrmio
;

118 
	`vîify_¨ó
 (
ãrmio
,  (*termio));

121 
tmp_ãrmio
.
c_iÊag
 = 
ây
->
ãrmios
.c_iflag;

122 
tmp_ãrmio
.
c_oÊag
 = 
ây
->
ãrmios
.c_oflag;

123 
tmp_ãrmio
.
c_cÊag
 = 
ây
->
ãrmios
.c_cflag;

124 
tmp_ãrmio
.
c_lÊag
 = 
ây
->
ãrmios
.c_lflag;

126 
tmp_ãrmio
.
c_löe
 = 
ây
->
ãrmios
.c_line;

127 
i
 = 0; i < 
NCC
; i++)

128 
tmp_ãrmio
.
c_cc
[
i
] = 
ây
->
ãrmios
.c_cc[i];

130 
i
 = 0; i < ( (*
ãrmio
)); i++)

131 
	`put_fs_byã
 (((*Ë&
tmp_ãrmio
)[
i
], i + (*Ë
ãrmio
);

133 
	}
}

145 
	$£t_ãrmio
 (
ây_°ru˘
 *
ây
, 
ãrmio
 *termio)

147 
i
;

148 
ãrmio
 
tmp_ãrmio
;

151 
i
 = 0; i < ( (*
ãrmio
)); i++)

152 ((*Ë&
tmp_ãrmio
)[
i
] = 
	`gë_fs_byã
 (ò+ (*Ë
ãrmio
);

155 *(*Ë&
ây
->
ãrmios
.
c_iÊag
 = 
tmp_ãrmio
.c_iflag;

156 *(*Ë&
ây
->
ãrmios
.
c_oÊag
 = 
tmp_ãrmio
.c_oflag;

157 *(*Ë&
ây
->
ãrmios
.
c_cÊag
 = 
tmp_ãrmio
.c_cflag;

158 *(*Ë&
ây
->
ãrmios
.
c_lÊag
 = 
tmp_ãrmio
.c_lflag;

160 
ây
->
ãrmios
.
c_löe
 = 
tmp_ãrmio
.c_line;

161 
i
 = 0; i < 
NCC
; i++)

162 
ây
->
ãrmios
.
c_cc
[
i
] = 
tmp_ãrmio
.c_cc[i];

165 
	`ch™ge_•ìd
 (
ây
);

167 
	}
}

172 
	$ây_io˘l
 (
dev
, 
cmd
, 
¨g
)

174 
ây_°ru˘
 *
ây
;

177 i‡(
	`MAJOR
 (
dev
) == 5)

179 
dev
 = 
cuºít
->
ây
;

180 i‡(
dev
 < 0)

181 
	`∑nic
 ("tty_ioctl: dev<0");

185 
dev
 = 
	`MINOR
 (dev);

188 
ây
 = 
dev
 + 
ây_èbÀ
;

190 
cmd
)

192 
TCGETS
:

194  
	`gë_ãrmios
 (
ây
, (
ãrmios
 *Ë
¨g
);

195 
TCSETSF
:

198 
	`Êush
 (&
ây
->
ªad_q
);

199 
TCSETSW
:

202 
	`waô_u¡û_£¡
 (
ây
);

203 
TCSETS
:

205  
	`£t_ãrmios
 (
ây
, (
ãrmios
 *Ë
¨g
);

206 
TCGETA
:

208  
	`gë_ãrmio
 (
ây
, (
ãrmio
 *Ë
¨g
);

209 
TCSETAF
:

212 
	`Êush
 (&
ây
->
ªad_q
);

213 
TCSETAW
:

216 
	`waô_u¡û_£¡
 (
ây
);

217 
TCSETA
:

219  
	`£t_ãrmio
 (
ây
, (
ãrmio
 *Ë
¨g
);

220 
TCSBRK
:

222 i‡(!
¨g
)

224 
	`waô_u¡û_£¡
 (
ây
);

225 
	`£nd_bªak
 (
ây
);

228 
TCXONC
:

231  -
EINVAL
;

232 
TCFLSH
:

235 i‡(
¨g
 == 0)

236 
	`Êush
 (&
ây
->
ªad_q
);

237 i‡(
¨g
 == 1)

238 
	`Êush
 (&
ây
->
wrôe_q
);

239 i‡(
¨g
 == 2)

241 
	`Êush
 (&
ây
->
ªad_q
);

242 
	`Êush
 (&
ây
->
wrôe_q
);

245  -
EINVAL
;

247 
TIOCEXCL
:

249  -
EINVAL
;

250 
TIOCNXCL
:

252  -
EINVAL
;

253 
TIOCSCTTY
:

255  -
EINVAL
;

256 
TIOCGPGRP
:

258 
	`vîify_¨ó
 ((*Ë
¨g
, 4);

259 
	`put_fs_l⁄g
 (
ây
->
pgΩ
, (*Ë
¨g
);

261 
TIOCSPGRP
:

263 
ây
->
pgΩ
 = 
	`gë_fs_l⁄g
 ((*Ë
¨g
);

265 
TIOCOUTQ
:

267 
	`vîify_¨ó
 ((*Ë
¨g
, 4);

268 
	`put_fs_l⁄g
 (
	`CHARS
 (
ây
->
wrôe_q
), (*Ë
¨g
);

270 
TIOCINQ
:

272 
	`vîify_¨ó
 ((*Ë
¨g
, 4);

273 
	`put_fs_l⁄g
 (
	`CHARS
 (
ây
->
£c⁄d¨y
), (*Ë
¨g
);

275 
TIOCSTI
:

278  -
EINVAL
;

279 
TIOCGWINSZ
:

281  -
EINVAL
;

282 
TIOCSWINSZ
:

284  -
EINVAL
;

285 
TIOCMGET
:

287  -
EINVAL
;

288 
TIOCMBIS
:

290  -
EINVAL
;

291 
TIOCMBIC
:

293  -
EINVAL
;

294 
TIOCMSET
:

296  -
EINVAL
;

297 
TIOCGSOFTCAR
:

299  -
EINVAL
;

300 
TIOCSSOFTCAR
:

302  -
EINVAL
;

304  -
EINVAL
;

306 
	}
}

	@kernel/exit.c

6 
	~<£t_£g.h
>

8 
	~<î∫o.h
>

9 
	~<sig«l.h
>

10 
	~<sys/waô.h
>

12 
	~<löux/sched.h
>

14 
	~<löux/kî√l.h
>

15 
	~<löux/ây.h
>

16 
	~<asm/£gmít.h
>

18 
sys_∑u£
 ();

19 
sys_˛o£
 (
fd
);

22 
	$ªÀa£
 (
èsk_°ru˘
 *
p
)

24 
i
;

26 i‡(!
p
)

28 
i
 = 1; i < 
NR_TASKS
; i++)

29 i‡(
èsk
[
i
] =
p
)

31 
èsk
[
i
] = 
NULL
;

32 
	`‰ì_∑ge
 ((Ë
p
);

33 
	`scheduÀ
 ();

36 
	`∑nic
 ("tryingÅoÑeleaseÇon-existentÅask");

37 
	}
}

40 
_ölöe
 

41 
	$£nd_sig
 (
sig
, 
èsk_°ru˘
 *
p
, 
¥iv
)

44 i‡(!
p
 || 
sig
 < 1 || sig > 32)

45  -
EINVAL
;

48 i‡(
¥iv
 || (
cuºít
->
euid
 =
p
->euidË|| 
	`su£r
 ())

49 
p
->
sig«l
 |(1 << (
sig
 - 1));

51  -
EPERM
;

53 
	}
}

56 
	$kûl_£ssi⁄
 ()

58 
èsk_°ru˘
 **
p
 = 
NR_TASKS
 + 
èsk
;

61 --
p
 > &
FIRST_TASK
)

63 i‡(*
p
 && (*p)->
£ssi⁄
 =
cuºít
->session)

64 (*
p
)->
sig«l
 |1 << (
SIGHUP
 - 1);

66 
	}
}

77 
	$sys_kûl
 (
pid
, 
sig
)

79 
èsk_°ru˘
 **
p
 = 
NR_TASKS
 + 
èsk
;

80 
îr
, 
ªtvÆ
 = 0;

82 i‡(!
pid
)

83 --
p
 > &
FIRST_TASK
)

85 i‡(*
p
 && (*p)->
pgΩ
 =
cuºít
->
pid
)

86 i‡(
îr
 = 
	`£nd_sig
 (
sig
, *
p
, 1))

87 
ªtvÆ
 = 
îr
;

89 i‡(
pid
 > 0)

90 --
p
 > &
FIRST_TASK
)

92 i‡(*
p
 && (*p)->
pid
 ==Öid)

93 i‡(
îr
 = 
	`£nd_sig
 (
sig
, *
p
, 0))

94 
ªtvÆ
 = 
îr
;

96 i‡(
pid
 == -1)

97 --
p
 > &
FIRST_TASK
)

98 i‡(
îr
 = 
	`£nd_sig
 (
sig
, *
p
, 0))

99 
ªtvÆ
 = 
îr
;

101 --
p
 > &
FIRST_TASK
)

102 i‡(*
p
 && (*p)->
pgΩ
 =-
pid
)

103 i‡(
îr
 = 
	`£nd_sig
 (
sig
, *
p
, 0))

104 
ªtvÆ
 = 
îr
;

105  
ªtvÆ
;

106 
	}
}

110 
	$ãŒ_Áthî
 (
pid
)

112 
i
;

114 i‡(
pid
)

115 
i
 = 0; i < 
NR_TASKS
; i++)

117 i‡(!
èsk
[
i
])

119 i‡(
èsk
[
i
]->
pid
 !=Öid)

121 
èsk
[
i
]->
sig«l
 |(1 << (
SIGCHLD
 - 1));

126 
	`¥ötk
 ("BAD BAD -Ço father found\n\r");

127 
	`ªÀa£
 (
cuºít
);

128 
	}
}

131 
	$do_exô
 (
code
)

133 
i
;

136 
	`‰ì_∑ge_èbÀs
 (
	`gë_ba£
 (
cuºít
->
ldt
[1]), 
	`gë_limô
 (0x0f));

137 
	`‰ì_∑ge_èbÀs
 (
	`gë_ba£
 (
cuºít
->
ldt
[2]), 
	`gë_limô
 (0x17));

140 
i
 = 0; i < 
NR_TASKS
; i++)

141 i‡(
èsk
[
i
] &&Åask[i]->
Áthî
 =
cuºít
->
pid
)

143 
èsk
[
i
]->
Áthî
 = 1;

144 i‡(
èsk
[
i
]->
°©e
 =
TASK_ZOMBIE
)

146 (Ë
	`£nd_sig
 (
SIGCHLD
, 
èsk
[1], 1);

149 
i
 = 0; i < 
NR_OPEN
; i++)

150 i‡(
cuºít
->
fûp
[
i
])

151 
	`sys_˛o£
 (
i
);

153 
	`ùut
 (
cuºít
->
pwd
);

154 
cuºít
->
pwd
 = 
NULL
;

155 
	`ùut
 (
cuºít
->
roŸ
);

156 
cuºít
->
roŸ
 = 
NULL
;

157 
	`ùut
 (
cuºít
->
execuèbÀ
);

158 
cuºít
->
execuèbÀ
 = 
NULL
;

160 i‡(
cuºít
->
Àadî
 && cuºít->
ây
 >= 0)

161 
ây_èbÀ
[
cuºít
->
ây
].
pgΩ
 = 0;

163 i‡(
œ°_èsk_u£d_m©h
 =
cuºít
)

164 
œ°_èsk_u£d_m©h
 = 
NULL
;

166 i‡(
cuºít
->
Àadî
)

167 
	`kûl_£ssi⁄
 ();

169 
cuºít
->
°©e
 = 
TASK_ZOMBIE
;

170 
cuºít
->
exô_code
 = 
code
;

172 
	`ãŒ_Áthî
 (
cuºít
->
Áthî
);

173 
	`scheduÀ
 ();

175 
	}
}

178 
	$sys_exô
 (
îr‹_code
)

180  
	`do_exô
 ((
îr‹_code
 & 0xff) << 8);

181 
	}
}

193 
	$sys_waôpid
 (
pid_t
 
pid
, *
°©_addr
, 
›ti⁄s
)

195 
Êag
, 
code
;

196 
èsk_°ru˘
 **
p
;

198 
	`vîify_¨ó
 (
°©_addr
, 4);

199 
ª≥©
:

200 
Êag
 = 0;

201 
p
 = &
LAST_TASK
;Ö > &
FIRST_TASK
; --p)

203 i‡(!*
p
 || *∞=
cuºít
)

205 i‡((*
p
)->
Áthî
 !
cuºít
->
pid
)

207 i‡(
pid
 > 0)

209 i‡((*
p
)->
pid
 !=Öid)

212 i‡(!
pid
)

214 i‡((*
p
)->
pgΩ
 !
cuºít
->pgrp)

217 i‡(
pid
 != -1)

219 i‡((*
p
)->
pgΩ
 !-
pid
)

222 (*
p
)->
°©e
)

224 
TASK_STOPPED
:

225 i‡(!(
›ti⁄s
 & 
WUNTRACED
))

227 
	`put_fs_l⁄g
 (0x7f, 
°©_addr
);

228  (*
p
)->
pid
;

229 
TASK_ZOMBIE
:

230 
cuºít
->
cutime
 +(*
p
)->
utime
;

231 
cuºít
->
c°ime
 +(*
p
)->
°ime
;

232 
Êag
 = (*
p
)->
pid
;

233 
code
 = (*
p
)->
exô_code
;

234 
	`ªÀa£
 (*
p
);

235 
	`put_fs_l⁄g
 (
code
, 
°©_addr
);

236  
Êag
;

238 
Êag
 = 1;

242 i‡(
Êag
)

244 i‡(
›ti⁄s
 & 
WNOHANG
)

246 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

247 
	`scheduÀ
 ();

248 i‡(!(
cuºít
->
sig«l
 &~(1 << (
SIGCHLD
 - 1))))

249 
ª≥©
;

251  -
EINTR
;

253  -
ECHILD
;

254 
	}
}

	@kernel/fork.c

12 
	~<£t_£g.h
>

19 
	~<î∫o.h
>

21 
	~<löux/sched.h
>

23 
	~<löux/kî√l.h
>

24 
	~<asm/£gmít.h
>

25 
	~<asm/sy°em.h
>

27 
wrôe_vîify
 (
addªss
);

29 
	gœ°_pid
 = 0;

34 
	$vîify_¨ó
 (*
addr
, 
size
)

36 
°¨t
;

38 
°¨t
 = (Ë
addr
;

41 
size
 +
°¨t
 & 0xfff;

42 
°¨t
 &= 0xfffff000;

43 
°¨t
 +
	`gë_ba£
 (
cuºít
->
ldt
[2]);

44 
size
 > 0)

46 
size
 -= 4096;

48 
	`wrôe_vîify
 (
°¨t
);

49 
°¨t
 += 4096;

51 
	}
}

55 
	$c›y_mem
 (
ƒ
, 
èsk_°ru˘
 *
p
)

57 
ﬁd_d©a_ba£
, 
√w_d©a_ba£
, 
d©a_limô
;

58 
ﬁd_code_ba£
, 
√w_code_ba£
, 
code_limô
;

60 
code_limô
 = 
	`gë_limô
 (0x0f);

61 
d©a_limô
 = 
	`gë_limô
 (0x17);

62 
ﬁd_code_ba£
 = 
	`gë_ba£
 (
cuºít
->
ldt
[1]);

63 
ﬁd_d©a_ba£
 = 
	`gë_ba£
 (
cuºít
->
ldt
[2]);

64 i‡(
ﬁd_d©a_ba£
 !
ﬁd_code_ba£
)

65 
	`∑nic
 ("We don't support separate I&D");

66 i‡(
d©a_limô
 < 
code_limô
)

67 
	`∑nic
 ("Bad data_limit");

68 
√w_d©a_ba£
 = 
√w_code_ba£
 = 
ƒ
 * 0x4000000;

69 
p
->
°¨t_code
 = 
√w_code_ba£
;

70 
	`£t_ba£
 (
p
->
ldt
[1], 
√w_code_ba£
);

71 
	`£t_ba£
 (
p
->
ldt
[2], 
√w_d©a_ba£
);

72 i‡(
	`c›y_∑ge_èbÀs
 (
ﬁd_d©a_ba£
, 
√w_d©a_ba£
, 
d©a_limô
))

74 
	`‰ì_∑ge_èbÀs
 (
√w_d©a_ba£
, 
d©a_limô
);

75  -
ENOMEM
;

78 
	}
}

85 
	$c›y_¥o˚ss
 (
ƒ
, 
ebp
, 
edi
, 
esi
, 
gs
, 
n⁄e
,

86 
ebx
, 
ecx
, 
edx
,

87 
fs
, 
es
, 
ds
,

88 
eù
, 
cs
, 
eÊags
, 
e•
, 
ss
)

90 
èsk_°ru˘
 *
p
;

91 
i
;

92 
fûe
 *
f
;

93 
i387_°ru˘
 *
p_i387
;

95 
p
 = (
èsk_°ru˘
 *Ë
	`gë_‰ì_∑ge
 ();

96 i‡(!
p
)

97  -
EAGAIN
;

98 
èsk
[
ƒ
] = 
p
;

100 *
p
 = *
cuºít
;

102 
p
->
°©e
 = 
TASK_UNINTERRUPTIBLE
;

103 
p
->
pid
 = 
œ°_pid
;

104 
p
->
Áthî
 = 
cuºít
->
pid
;

105 
p
->
cou¡î
 =Ö->
¥i‹ôy
;

106 
p
->
sig«l
 = 0;

107 
p
->
Æ¨m
 = 0;

108 
p
->
Àadî
 = 0;

110 
p
->
utime
 =Ö->
°ime
 = 0;

111 
p
->
cutime
 =Ö->
c°ime
 = 0;

112 
p
->
°¨t_time
 = 
jiffõs
;

114 
p
->
tss
.
back_lök
 = 0;

115 
p
->
tss
.
e•0
 = 
PAGE_SIZE
 + ()Ö;

117 
p
->
tss
.
ss0
 = 0x10;

118 
p
->
tss
.
eù
 =Éip;

119 
p
->
tss
.
eÊags
 =Éflags;

120 
p
->
tss
.
óx
 = 0;

121 
p
->
tss
.
ecx
 =Écx;

122 
p
->
tss
.
edx
 =Édx;

123 
p
->
tss
.
ebx
 =Ébx;

124 
p
->
tss
.
e•
 =Ésp;

125 
p
->
tss
.
ebp
 =Ébp;

126 
p
->
tss
.
esi
 =Ési;

127 
p
->
tss
.
edi
 =Édi;

128 
p
->
tss
.
es
 =És & 0xffff;

129 
p
->
tss
.
cs
 = cs & 0xffff;

130 
p
->
tss
.
ss
 = ss & 0xffff;

131 
p
->
tss
.
ds
 = ds & 0xffff;

132 
p
->
tss
.
fs
 = fs & 0xffff;

133 
p
->
tss
.
gs
 = gs & 0xffff;

134 
p
->
tss
.
ldt
 = 
	`_LDT
 (
ƒ
);

135 
p
->
tss
.
åa˚_bôm≠
 = 0x80000000;

137 
p_i387
 = &
p
->
tss
.
i387
;

138 i‡(
œ°_èsk_u£d_m©h
 =
cuºít
)

139 
_asm
{

140 
mov
 
ebx
, 
p_i387


141 
˛ts


142 
‚ßve
 [
p_i387
]

147 i‡(
	`c›y_mem
 (
ƒ
, 
p
))

149 
èsk
[
ƒ
] = 
NULL
;

150 
	`‰ì_∑ge
 ((Ë
p
);

151  -
EAGAIN
;

154 
i
 = 0; i < 
NR_OPEN
; i++)

155 i‡(
f
 = 
p
->
fûp
[
i
])

156 
f
->
f_cou¡
++;

158 i‡(
cuºít
->
pwd
)

159 
cuºít
->
pwd
->
i_cou¡
++;

160 i‡(
cuºít
->
roŸ
)

161 
cuºít
->
roŸ
->
i_cou¡
++;

162 i‡(
cuºít
->
execuèbÀ
)

163 
cuºít
->
execuèbÀ
->
i_cou¡
++;

166 
	`£t_tss_desc
 (
gdt
 + (
ƒ
 << 1Ë+ 
FIRST_TSS_ENTRY
, &(
p
->
tss
));

167 
	`£t_ldt_desc
 (
gdt
 + (
ƒ
 << 1Ë+ 
FIRST_LDT_ENTRY
, &(
p
->
ldt
));

168 
p
->
°©e
 = 
TASK_RUNNING
;

170  
œ°_pid
;

171 
	}
}

174 
	$föd_em±y_¥o˚ss
 ()

176 
i
;

178 
ª≥©
:

179 i‡((++
œ°_pid
) < 0)

180 
œ°_pid
 = 1;

181 
i
 = 0; i < 
NR_TASKS
; i++)

182 i‡(
èsk
[
i
] &&Åask[i]->
pid
 =
œ°_pid
)

183 
ª≥©
;

184 
i
 = 1; i < 
NR_TASKS
; i++)

185 i‡(!
èsk
[
i
])

186  
i
;

187  -
EAGAIN
;

188 
	}
}

	@kernel/math/math_emulate.c

12 
	~<£t_£g.h
>

22 
	~<sig«l.h
>

24 
	~<löux/sched.h
>

26 
	~<löux/kî√l.h
>

27 
	~<asm/£gmít.h
>

32 
	$m©h_emuœã
 (
edi
, 
esi
, 
ebp
, 
sys_ˇŒ_ªt
,

33 
óx
, 
ebx
, 
ecx
, 
edx
,

34 
fs
, 
es
, 
ds
,

35 
eù
, 
cs
, 
eÊags
,

36 
ss
, 
e•
)

38 
fú°
, 
£c⁄d
;

45 i‡(
cs
 != 0x000F)

47 
	`¥ötk
 ("m©h_emuœã: %04x:%08x\n\r", 
cs
, 
eù
);

48 
	`∑nic
 ("MathÉmulationÇeeded in kernel");

51 
fú°
 = 
	`gë_fs_byã
 ((*Ë((*&
eù
)++));

52 
£c⁄d
 = 
	`gë_fs_byã
 ((*Ë((*&
eù
)++));

53 
	`¥ötk
 ("%04x:%08x %02x %02x\n\r", 
cs
, 
eù
 - 2, 
fú°
, 
£c⁄d
);

54 
cuºít
->
sig«l
 |1 << (
SIGFPE
 - 1);

55 
	}
}

60 
	$m©h_îr‹
 ()

64 
_asm
 
‚˛ex
;

66 i‡(
œ°_èsk_u£d_m©h
)

67 
œ°_èsk_u£d_m©h
->
sig«l
 |1 << (
SIGFPE
 - 1);

68 
	}
}

	@kernel/mktime.c

6 
	~<£t_£g.h
>

8 
	~<time.h
>

28 
	#MINUTE
 60

29 
	#HOUR
 (60*
MINUTE
)

30 
	#DAY
 (24*
HOUR
)

31 
	#YEAR
 (365*
DAY
)

32 

	)

36 
	gm⁄th
[12] = {

38 
DAY
 * (31),

39 
DAY
 * (31 + 29),

40 
DAY
 * (31 + 29 + 31),

41 
DAY
 * (31 + 29 + 31 + 30),

42 
DAY
 * (31 + 29 + 31 + 30 + 31),

43 
DAY
 * (31 + 29 + 31 + 30 + 31 + 30),

44 
DAY
 * (31 + 29 + 31 + 30 + 31 + 30 + 31),

45 
DAY
 * (31 + 29 + 31 + 30 + 31 + 30 + 31 + 31),

46 
DAY
 * (31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30),

47 
DAY
 * (31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31),

48 
DAY
 * (31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30)

53 
	$kî√l_mktime
 (
tm
 *tm)

55 
ªs
;

56 
yór
;

58 
yór
 = 
tm
->
tm_yór
 - 70;

62 
ªs
 = 
YEAR
 * 
yór
 + 
DAY
 * ((year + 1) / 4);

63 
ªs
 +
m⁄th
[
tm
->
tm_m⁄
];

66 i‡(
tm
->
tm_m⁄
 > 1 && ((
yór
 + 2) % 4))

67 
ªs
 -
DAY
;

68 
ªs
 +
DAY
 * (
tm
->
tm_mday
 - 1);

69 
ªs
 +
HOUR
 * 
tm
->
tm_hour
;

70 
ªs
 +
MINUTE
 * 
tm
->
tm_mö
;

71 
ªs
 +
tm
->
tm_£c
;

72  
ªs
;

73 
	}
}

	@kernel/panic.c

6 
	~<£t_£g.h
>

16 
	~<löux/kî√l.h
>

17 
	~<löux/sched.h
>

20 
sys_sync
 ();

24 
	$∑nic
 (c⁄° *
s
)

26 
	`¥ötk
 ("Kî√»∑nic: %s\n\r", 
s
);

27 i‡(
cuºít
 =
èsk
[0])

28 
	`¥ötk
 ("In swapperÅask -Çot syncing\n\r");

30 
	`sys_sync
 ();

32 
	}
}

	@kernel/printk.c

6 
	~<£t_£g.h
>

17 
	~<°d¨g.h
>

20 
	~<°ddef.h
>

22 
	~<löux/kî√l.h
>

24 
	gbuf
[1024];

27 
v•rötf
 (*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

30 
	$¥ötk
 (c⁄° *
fmt
, ...)

32 
va_li°
 
¨gs
;

33 
i
;

35 
	`va_°¨t
 (
¨gs
, 
fmt
);

36 
i
 = 
	`v•rötf
 (
buf
, 
fmt
, 
¨gs
);

38 
	`va_íd
 (
¨gs
);

39 
_asm
{

40 
push
 
fs


41 
push
 
ds


42 
p›
 
fs


43 
push
 
i


44 
push
 
off£t
 
buf


45 
push
 0

46 
ˇŒ
 
ây_wrôe


47 
add
 
e•
,8

48 
p›
 
i


49 
p›
 
fs


61  
i
;

62 
	}
}

	@kernel/sched.c

11 
	~<löux/sched.h
>

14 
	~<löux/kî√l.h
>

15 
	~<löux/sys.h
>

16 
	~<löux/fdªg.h
>

17 
	~<asm/sy°em.h
>

18 
	~<asm/io.h
>

19 
	~<asm/£gmít.h
>

21 
	~<sig«l.h
>

23 
	#_S
(
ƒ
) (1<<((nr)-1))

25 
	#_BLOCKABLE
 (~(
	`_S
(
SIGKILL
Ë| _S(
SIGSTOP
)))

27 

	)

29 
	$show_èsk
 (
ƒ
, 
èsk_°ru˘
 *
p
)

31 
i
, 
j
 = 4096 -  (
èsk_°ru˘
);

33 
	`¥ötk
 ("%d:Öid=%d, sèã=%d, ", 
ƒ
, 
p
->
pid
,Ö->
°©e
);

34 
i
 = 0;

35 
i
 < 
j
 && !((*Ë(
p
 + 1))[i])

36 
i
++;

37 
	`¥ötk
 ("%d (o‡%dËch¨†‰ì i¿kî√»°ack\n\r", 
i
, 
j
);

38 
	}
}

41 
	$show_°©
 ()

43 
i
;

45 
i
 = 0; i < 
NR_TASKS
; i++)

46 i‡(
èsk
[
i
])

47 
	`show_èsk
 (
i
, 
èsk
[i]);

48 
	}
}

51 
	#LATCH
 (1193180/
HZ
)

	)

53 
mem_u£
 ();

55 
timî_öãºu±
 ();

56 
sy°em_ˇŒ
 ();

58 
	uèsk_uni⁄


60 
èsk_°ru˘
 
	mèsk
;

61 
	m°ack
[
PAGE_SIZE
];

64 
èsk_uni⁄
 
	göô_èsk
 = { 
INIT_TASK
, };

66 vﬁ©ûê
	gjiffõs
;

69 
	g°¨tup_time
;

70 
èsk_°ru˘
 *
	gcuºít
 = &(
öô_èsk
.
èsk
);

71 
èsk_°ru˘
 *
	gœ°_èsk_u£d_m©h
 = 
NULL
;

73 
èsk_°ru˘
 *
	gèsk
[
NR_TASKS
] = { &(
öô_èsk
.
èsk
), };

75 
	gu£r_°ack
[
PAGE_SIZE
 >> 2];

80 *
	ma
;

81 
	mb
;

83 
	g°ack_°¨t
 = {&
u£r_°ack
[
PAGE_SIZE
 >> 2], 0x10};

91 
	$m©h_°©e_ª°‹e
 ()

93 
i387_°ru˘
 *
tmp
;

95 i‡(
œ°_èsk_u£d_m©h
 =
cuºít
)

98 
_asm
 
fwaô
;

99 i‡(
œ°_èsk_u£d_m©h
)

102 
tmp
 = &
œ°_èsk_u£d_m©h
->
tss
.
i387
;

103 
_asm
 
mov
 
ebx
,
tmp


104 
_asm
 
‚ßve
 [
ebx
];

106 
œ°_èsk_u£d_m©h
 = 
cuºít
;

108 i‡(
cuºít
->
u£d_m©h
)

111 
tmp
 = &
cuºít
->
tss
.
i387
;

112 
_asm
 
mov
 
ebx
,
tmp


113 
_asm
 
‰°‹
 [
ebx
];

118 
_asm
 
‚öô
;

119 
cuºít
->
u£d_m©h
 = 1;

121 
	}
}

130 
	$scheduÀ
 ()

132 
i
, 
√xt
, 
c
;

133 
èsk_°ru˘
 **
p
;

138 
p
 = &
LAST_TASK
;Ö > &
FIRST_TASK
; --p)

139 i‡(*
p
)

143 i‡((*
p
)->
Æ¨m
 && (*p)->Æ¨m < 
jiffõs
)

145 (*
p
)->
sig«l
 |(1 << (
SIGALRM
 - 1));

146 (*
p
)->
Æ¨m
 = 0;

150 i‡(((*
p
)->
sig«l
 & ~(
_BLOCKABLE
 & (*p)->
blocked
)) &&

151 (*
p
)->
°©e
 =
TASK_INTERRUPTIBLE
)

152 (*
p
)->
°©e
 = 
TASK_RUNNING
;

159 
c
 = -1;

160 
√xt
 = 0;

161 
i
 = 
NR_TASKS
;

162 
p
 = &
èsk
[
NR_TASKS
];

166 --
i
)

168 i‡(!*--
p
)

170 i‡((*
p
)->
°©e
 =
TASK_RUNNING
 && (*p)->
cou¡î
 > 
c
)

171 
c
 = (*
p
)->
cou¡î
, 
√xt
 = 
i
;

174 i‡(
c
)

178 
p
 = &
LAST_TASK
;Ö > &
FIRST_TASK
; --p)

179 i‡(*
p
)

180 (*
p
)->
cou¡î
 = ((*p)->cou¡î >> 1Ë+ (*p)->
¥i‹ôy
;

182 
	`swôch_to
 (
√xt
);

183 
	}
}

189 
	$sys_∑u£
 ()

191 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

192 
	`scheduÀ
 ();

194 
	}
}

199 
	$¶ìp_⁄
 (
èsk_°ru˘
 **
p
)

201 
èsk_°ru˘
 *
tmp
;

204 i‡(!
p
)

206 i‡(
cuºít
 =&(
öô_èsk
.
èsk
))

207 
	`∑nic
 ("task[0]ÅryingÅo sleep");

208 
tmp
 = *
p
;

209 *
p
 = 
cuºít
;

210 
cuºít
->
°©e
 = 
TASK_UNINTERRUPTIBLE
;

211 
	`scheduÀ
 ();

216 i‡(
tmp
)

217 
tmp
->
°©e
 = 0;

218 
	}
}

221 
	$öãºu±ibÀ_¶ìp_⁄
 (
èsk_°ru˘
 **
p
)

223 
èsk_°ru˘
 *
tmp
;

225 i‡(!
p
)

227 i‡(
cuºít
 =&(
öô_èsk
.
èsk
))

228 
	`∑nic
 ("task[0]ÅryingÅo sleep");

229 
tmp
 = *
p
;

230 *
p
 = 
cuºít
;

231 
ª≥©
:

232 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

233 
	`scheduÀ
 ();

238 i‡(*
p
 && *∞!
cuºít
)

240 (**
p
).
°©e
 = 0;

241 
ª≥©
;

245 *
p
 = 
NULL
;

246 i‡(
tmp
)

247 
tmp
->
°©e
 = 0;

248 
	}
}

251 
	$wake_up
 (
èsk_°ru˘
 **
p
)

253 i‡(
p
 && *p)

255 (**
p
).
°©e
 = 0;

256 *
p
 = 
NULL
;

258 
	}
}

264 
èsk_°ru˘
 *
	gwaô_mŸ‹
[4] = { 
NULL
, NULL, NULL, NULL };

265 
	gm⁄_timî
[4] = { 0, 0, 0, 0 };

266 
	gmoff_timî
[4] = { 0, 0, 0, 0 };

267 
	gcuºít_DOR
 = 0x0C;

271 
	$ticks_to_Ê›py_⁄
 (
ƒ
)

273 
£À˘ed
;

274 
mask
 = 0x10 << 
ƒ
;

276 i‡(
ƒ
 > 3)

277 
	`∑nic
 ("floppy_on:Çr>3");

278 
moff_timî
[
ƒ
] = 10000;

279 
	`˛i
 ();

280 
mask
 |
cuºít_DOR
;

282 i‡(!
£À˘ed
)

284 
mask
 &= 0xFC;

285 
mask
 |
ƒ
;

290 i‡(
mask
 !
cuºít_DOR
)

292 
	`outb
 (
mask
, 
FD_DOR
);

293 i‡((
mask
 ^ 
cuºít_DOR
) & 0xf0)

294 
m⁄_timî
[
ƒ
] = 
HZ
 / 2;

295 i‡(
m⁄_timî
[
ƒ
] < 2)

296 
m⁄_timî
[
ƒ
] = 2;

297 
cuºít_DOR
 = 
mask
;

299 
	`°i
 ();

300  
m⁄_timî
[
ƒ
];

301 
	}
}

304 
	$Ê›py_⁄
 (
ƒ
)

306 
	`˛i
 ();

307 
	`ticks_to_Ê›py_⁄
 (
ƒ
))

308 
	`¶ìp_⁄
 (
ƒ
 + 
waô_mŸ‹
);

309 
	`°i
 ();

310 
	}
}

313 
	$Ê›py_off
 (
ƒ
)

315 
moff_timî
[
ƒ
] = 3 * 
HZ
;

316 
	}
}

321 
	$do_Ê›py_timî
 ()

323 
i
;

324 
mask
 = 0x10;

326 
i
 = 0; i < 4; i++, 
mask
 <<= 1)

328 i‡(!(
mask
 & 
cuºít_DOR
))

330 i‡(
m⁄_timî
[
i
])

332 i‡(!--
m⁄_timî
[
i
])

333 
	`wake_up
 (
i
 + 
waô_mŸ‹
);

335 i‡(!
moff_timî
[
i
])

337 
cuºít_DOR
 &~
mask
;

338 
	`outb
 (
cuºít_DOR
, 
FD_DOR
);

341 
moff_timî
[
i
]--;

343 
	}
}

345 
	#TIME_REQUESTS
 64

346 

	)

348 
	stimî_li°


350 
	mjiffõs
;

351 (*
	m‚
) ();

352 
timî_li°
 *
	m√xt
;

354 
	gtimî_li°
[
TIME_REQUESTS
], *
	g√xt_timî
 = 
NULL
;

358 
add_timî
 (
jiffõs
, (*
‚
) ())

360 
timî_li°
 *
p
;

363 i‡(!
‚
)

365 
	`˛i
 ();

367 i‡(
jiffõs
 <= 0)

368 (
‚
) ();

372 
p
 = 
timî_li°
;Ö <Åimî_li° + 
TIME_REQUESTS
;Ö++)

373 i‡(!
p
->
‚
)

376 i‡(
p
 >
timî_li°
 + 
TIME_REQUESTS
)

377 
	`∑nic
 ("No moreÅimeÑequests free");

379 
p
->
‚
 = fn;

380 
p
->
jiffõs
 = jiffies;

381 
p
->
√xt
 = 
√xt_timî
;

382 
√xt_timî
 = 
p
;

386 
p
->
√xt
 &&Ö->√xt->
jiffõs
 <Ö->jiffies)

388 
p
->
jiffõs
 -p->
√xt
->jiffies;

389 
‚
 = 
p
->fn;

390 
p
->
‚
 =Ö->
√xt
->fn;

391 
p
->
√xt
->
‚
 = fn;

392 
jiffõs
 = 
p
->jiffies;

393 
p
->
jiffõs
 =Ö->
√xt
->jiffies;

394 
p
->
√xt
->
jiffõs
 = jiffies;

395 
p
 =Ö->
√xt
;

398 
	`°i
 ();

399 
	}
}

404 
	$do_timî
 (
˝l
)

406 
bìpcou¡
;

407 
	`sysbìp°›
 ();

411 i‡(
bìpcou¡
)

412 i‡(!--
bìpcou¡
)

413 
	`sysbìp°›
 ();

417 i‡(
˝l
)

418 
cuºít
->
utime
++;

420 
cuºít
->
°ime
++;

424 i‡(
√xt_timî
)

426 
√xt_timî
->
jiffõs
--;

427 
√xt_timî
 &&Çext_timî->
jiffõs
 <= 0)

429 (*
‚
) ();

431 
‚
 = 
√xt_timî
->fn;

432 
√xt_timî
->
‚
 = 
NULL
;

433 
√xt_timî
 =Çext_timî->
√xt
;

434 (
‚
) ();

438 i‡(
cuºít_DOR
 & 0xf0)

439 
	`do_Ê›py_timî
 ();

440 i‡((--
cuºít
->
cou¡î
) > 0)

442 
cuºít
->
cou¡î
 = 0;

443 i‡(!
˝l
)

445 
	`scheduÀ
 ();

446 
	}
}

450 
	$sys_Æ¨m
 (
£c⁄ds
)

452 
ﬁd
 = 
cuºít
->
Æ¨m
;

454 i‡(
ﬁd
)

455 
ﬁd
 = (ﬁd - 
jiffõs
Ë/ 
HZ
;

456 
cuºít
->
Æ¨m
 = (
£c⁄ds
 > 0Ë? (
jiffõs
 + 
HZ
 * seconds) : 0;

457  (
ﬁd
);

458 
	}
}

461 
	$sys_gëpid
 ()

463  
cuºít
->
pid
;

464 
	}
}

467 
	$sys_gëµid
 ()

469  
cuºít
->
Áthî
;

470 
	}
}

473 
	$sys_gëuid
 ()

475  
cuºít
->
uid
;

476 
	}
}

479 
	$sys_gëeuid
 ()

481  
cuºít
->
euid
;

482 
	}
}

485 
	$sys_gëgid
 ()

487  
cuºít
->
gid
;

488 
	}
}

491 
	$sys_gëegid
 ()

493  
cuºít
->
egid
;

494 
	}
}

498 
	$sys_ni˚
 (
ö¸emít
)

500 i‡(
cuºít
->
¥i‹ôy
 - 
ö¸emít
 > 0)

501 
cuºít
->
¥i‹ôy
 -
ö¸emít
;

503 
	}
}

506 
	$sched_öô
 ()

508 
i
;

509 
desc_°ru˘
 *
p
;

511 i‡( (
siga˘i⁄
) != 16)

512 
	`∑nic
 ("Struct sigaction MUST be 16 bytes");

514 
	`£t_tss_desc
 (
gdt
 + 
FIRST_TSS_ENTRY
, &(
öô_èsk
.
èsk
.
tss
));

515 
	`£t_ldt_desc
 (
gdt
 + 
FIRST_LDT_ENTRY
, &(
öô_èsk
.
èsk
.
ldt
));

517 
p
 = 
gdt
 + 2 + 
FIRST_TSS_ENTRY
;

518 
i
 = 1; i < 
NR_TASKS
; i++)

520 
èsk
[
i
] = 
NULL
;

521 
p
->
a
 =Ö->
b
 = 0;

522 
p
++;

523 
p
->
a
 =Ö->
b
 = 0;

524 
p
++;

530 
_asm
 
pushfd
; _asm 
™d
 
dw‹d
 
±r
 
ss
:[
e•
],0xffffbfff; _asm 
p›fd
;

531 
	`…r
 (0);

532 
	`Œdt
 (0);

536 
	`outb_p
 (0x36, 0x43);

537 
	`outb_p
 (
LATCH
 & 0xff, 0x40);

538 
	`outb
 (
LATCH
 >> 8, 0x40);

540 
	`£t_öå_g©e
 (0x20, &
timî_öãºu±
);

542 
	`outb
 (
	`öb_p
 (0x21) & ~0x01, 0x21);

544 
	`£t_sy°em_g©e
 (0x80, &
sy°em_ˇŒ
);

545 
	}
}

	@kernel/signal.c

12 
	~<£t_£g.h
>

14 
	~<löux/sched.h
>

16 
	~<löux/kî√l.h
>

17 
	~<asm/£gmít.h
>

19 
	~<sig«l.h
>

21 vﬁ©ûê
do_exô
 (
îr‹_code
);

24 
	$sys_sgëmask
 ()

26  
cuºít
->
blocked
;

27 
	}
}

30 
	$sys_s£tmask
 (
√wmask
)

32 
ﬁd
 = 
cuºít
->
blocked
;

34 
cuºít
->
blocked
 = 
√wmask
 & ~(1 << (
SIGKILL
 - 1));

35  
ﬁd
;

36 
	}
}

39 
_ölöe
 
	$ßve_ﬁd
 (*
‰om
, *
to
)

41 
i
;

43 
	`vîify_¨ó
 (
to
,  (
siga˘i⁄
));

44 
i
 = 0; i <  (
siga˘i⁄
); i++)

46 
	`put_fs_byã
 (*
‰om
, 
to
);

47 
‰om
++;

48 
to
++;

50 
	}
}

53 
_ölöe
 
	$gë_√w
 (*
‰om
, *
to
)

55 
i
;

57 
i
 = 0; i <  (
siga˘i⁄
); i++)

58 *(
to
++Ë
	`gë_fs_byã
 (
‰om
++);

59 
	}
}

65 
	$sys_sig«l
 (
signum
, 
h™dÀr
, 
ª°‹î
)

67 
siga˘i⁄
 
tmp
;

69 i‡(
signum
 < 1 || signum > 32 || signum =
SIGKILL
)

71 
tmp
.
ß_h™dÀr
 = ((*)()Ë
h™dÀr
;

72 
tmp
.
ß_mask
 = 0;

73 
tmp
.
ß_Êags
 = 
SA_ONESHOT
 | 
SA_NOMASK
;

75 
tmp
.
ß_ª°‹î
 = ((*)()Ë
ª°‹î
;

76 
h™dÀr
 = (Ë
cuºít
->
siga˘i⁄
[
signum
 - 1].
ß_h™dÀr
;

77 
cuºít
->
siga˘i⁄
[
signum
 - 1] = 
tmp
;

78  
h™dÀr
;

79 
	}
}

84 
	$sys_siga˘i⁄
 (
signum
, c⁄° 
siga˘i⁄
 *
a˘i⁄
,

85 
siga˘i⁄
 *
ﬁda˘i⁄
)

87 
siga˘i⁄
 
tmp
;

90 i‡(
signum
 < 1 || signum > 32 || signum =
SIGKILL
)

93 
tmp
 = 
cuºít
->
siga˘i⁄
[
signum
 - 1];

94 
	`gë_√w
 ((*Ë
a˘i⁄
, (*Ë(
signum
 - 1 + 
cuºít
->
siga˘i⁄
));

96 i‡(
ﬁda˘i⁄
)

97 
	`ßve_ﬁd
 ((*Ë&
tmp
, (*Ë
ﬁda˘i⁄
);

99 i‡(
cuºít
->
siga˘i⁄
[
signum
 - 1].
ß_Êags
 & 
SA_NOMASK
)

100 
cuºít
->
siga˘i⁄
[
signum
 - 1].
ß_mask
 = 0;

102 
cuºít
->
siga˘i⁄
[
signum
 - 1].
ß_mask
 |= (1 << (signum - 1));

104 
	}
}

109 
	$do_sig«l
 (
sigƒ
, 
óx
, 
ebx
, 
ecx
, 
edx
,

110 
fs
, 
es
, 
ds
,

111 
eù
, 
cs
, 
eÊags
, *
e•
, 
ss
)

113 
ß_h™dÀr
;

114 
ﬁd_eù
 = 
eù
;

115 
siga˘i⁄
 *
ß
 = 
cuºít
->siga˘i⁄ + 
sigƒ
 - 1;

116 
l⁄gs
;

117 *
tmp_e•
;

119 
ß_h™dÀr
 = (Ë
ß
->sa_handler;

122 i‡(
ß_h™dÀr
 == 1)

124 i‡(!
ß_h™dÀr
)

126 i‡(
sigƒ
 =
SIGCHLD
)

130 
	`do_exô
 (1 << (
sigƒ
 - 1));

133 i‡(
ß
->
ß_Êags
 & 
SA_ONESHOT
)

134 
ß
->
ß_h™dÀr
 = 
NULL
;

140 *(&
eù
Ë
ß_h™dÀr
;

142 
l⁄gs
 = (
ß
->
ß_Êags
 & 
SA_NOMASK
) ? 7 : 8;

145 *(&
e•
Ë-
l⁄gs
;

146 
	`vîify_¨ó
 (
e•
, 
l⁄gs
 * 4);

149 
tmp_e•
 = 
e•
;

150 
	`put_fs_l⁄g
 ((Ë
ß
->
ß_ª°‹î
, 
tmp_e•
++);

151 
	`put_fs_l⁄g
 (
sigƒ
, 
tmp_e•
++);

152 i‡(!(
ß
->
ß_Êags
 & 
SA_NOMASK
))

153 
	`put_fs_l⁄g
 (
cuºít
->
blocked
, 
tmp_e•
++);

154 
	`put_fs_l⁄g
 (
óx
, 
tmp_e•
++);

155 
	`put_fs_l⁄g
 (
ecx
, 
tmp_e•
++);

156 
	`put_fs_l⁄g
 (
edx
, 
tmp_e•
++);

157 
	`put_fs_l⁄g
 (
eÊags
, 
tmp_e•
++);

158 
	`put_fs_l⁄g
 (
ﬁd_eù
, 
tmp_e•
++);

159 
cuºít
->
blocked
 |
ß
->
ß_mask
;

160 
	}
}

	@kernel/sys.c

6 
	~<£t_£g.h
>

8 
	~<î∫o.h
>

10 
	~<löux/sched.h
>

12 
	~<löux/ây.h
>

13 
	~<löux/kî√l.h
>

14 
	~<asm/£gmít.h
>

15 
	~<sys/times.h
>

16 
	~<sys/ut¢ame.h
>

19 
	$sys_·ime
 ()

21  -
ENOSYS
;

22 
	}
}

25 
	$sys_bªak
 ()

27  -
ENOSYS
;

28 
	}
}

31 
	$sys_±ø˚
 ()

33  -
ENOSYS
;

34 
	}
}

37 
	$sys_°ty
 ()

39  -
ENOSYS
;

40 
	}
}

43 
	$sys_gây
 ()

45  -
ENOSYS
;

46 
	}
}

49 
	$sys_ª«me
 ()

51  -
ENOSYS
;

52 
	}
}

55 
	$sys_¥of
 ()

57  -
ENOSYS
;

58 
	}
}

63 
	$sys_£åegid
 (
rgid
, 
egid
)

65 i‡(
rgid
 > 0)

67 i‡((
cuºít
->
gid
 =
rgid
Ë|| 
	`su£r
 ())

68 
cuºít
->
gid
 = 
rgid
;

70  (-
EPERM
);

72 i‡(
egid
 > 0)

74 i‡((
cuºít
->
gid
 =
egid
) || (current->egid ==Égid) ||

75 (
cuºít
->
sgid
 =
egid
Ë|| 
	`su£r
 ())

76 
cuºít
->
egid
 =Égid;

78  (-
EPERM
);

81 
	}
}

86 
	$sys_£tgid
 (
gid
)

88  (
	`sys_£åegid
 (
gid
, gid));

89 
	}
}

92 
	$sys_ac˘
 ()

94  -
ENOSYS
;

95 
	}
}

98 
	$sys_phys
 ()

100  -
ENOSYS
;

101 
	}
}

103 
	$sys_lock
 ()

105  -
ENOSYS
;

106 
	}
}

108 
	$sys_mpx
 ()

110  -
ENOSYS
;

111 
	}
}

113 
	$sys_ulimô
 ()

115  -
ENOSYS
;

116 
	}
}

120 
	$sys_time
 (*
éoc
)

122 
i
;

124 
i
 = 
CURRENT_TIME
;

125 i‡(
éoc
)

127 
	`vîify_¨ó
 (
éoc
, 4);

128 
	`put_fs_l⁄g
 (
i
, (*Ë
éoc
);

130  
i
;

131 
	}
}

143 
	$sys_£åeuid
 (
ruid
, 
euid
)

145 
ﬁd_ruid
 = 
cuºít
->
uid
;

147 i‡(
ruid
 > 0)

149 i‡((
cuºít
->
euid
 =
ruid
Ë|| (
ﬁd_ruid
 =ruidË|| 
	`su£r
 ())

150 
cuºít
->
uid
 = 
ruid
;

152  (-
EPERM
);

154 i‡(
euid
 > 0)

156 i‡((
ﬁd_ruid
 =
euid
Ë|| (
cuºít
->euid =euidË|| 
	`su£r
 ())

157 
cuºít
->
euid
 =Éuid;

160 
cuºít
->
uid
 = 
ﬁd_ruid
;

161  (-
EPERM
);

165 
	}
}

170 
	$sys_£tuid
 (
uid
)

172  (
	`sys_£åeuid
 (
uid
, uid));

173 
	}
}

177 
	$sys_°ime
 (*
çå
)

179 i‡(!
	`su£r
 ())

180  -
EPERM
;

181 
°¨tup_time
 = 
	`gë_fs_l⁄g
 ((*Ë
çå
Ë- 
jiffõs
 / 
HZ
;

183 
	}
}

186 
	$sys_times
 (
tms
 *
tbuf
)

188 i‡(
tbuf
)

190 
	`vîify_¨ó
 (
tbuf
,  *tbuf);

191 
	`put_fs_l⁄g
 (
cuºít
->
utime
, (*Ë&
tbuf
->
tms_utime
);

192 
	`put_fs_l⁄g
 (
cuºít
->
°ime
, (*Ë&
tbuf
->
tms_°ime
);

193 
	`put_fs_l⁄g
 (
cuºít
->
cutime
, (*Ë&
tbuf
->
tms_cutime
);

194 
	`put_fs_l⁄g
 (
cuºít
->
c°ime
, (*Ë&
tbuf
->
tms_c°ime
);

196  
jiffõs
;

197 
	}
}

203 
	$sys_brk
 (
íd_d©a_£g
)

205 i‡(
íd_d©a_£g
 >
cuºít
->
íd_code
 &&

206 
íd_d©a_£g
 < 
cuºít
->
°¨t_°ack
 - 16384)

207 
cuºít
->
brk
 = 
íd_d©a_£g
;

208  
cuºít
->
brk
;

209 
	}
}

224 
	$sys_£çgid
 (
pid
, 
pgid
)

226 
i
;

228 i‡(!
pid
)

229 
pid
 = 
cuºít
->pid;

230 i‡(!
pgid
)

231 
pgid
 = 
cuºít
->
pid
;

232 
i
 = 0; i < 
NR_TASKS
; i++)

233 i‡(
èsk
[
i
] &&Åask[i]->
pid
 ==Öid)

235 i‡(
èsk
[
i
]->
Àadî
)

236  -
EPERM
;

237 i‡(
èsk
[
i
]->
£ssi⁄
 !
cuºít
->session)

238  -
EPERM
;

239 
èsk
[
i
]->
pgΩ
 = 
pgid
;

242  -
ESRCH
;

243 
	}
}

246 
	$sys_gëpgΩ
 ()

248  
cuºít
->
pgΩ
;

249 
	}
}

252 
	$sys_£tsid
 ()

254 i‡(
cuºít
->
Àadî
 && !
	`su£r
 ())

255  -
EPERM
;

256 
cuºít
->
Àadî
 = 1;

257 
cuºít
->
£ssi⁄
 = cuºít->
pgΩ
 = cuºít->
pid
;

258 
cuºít
->
ây
 = -1;

259  
cuºít
->
pgΩ
;

260 
	}
}

264 
	$sys_u«me
 (
ut¢ame
 *
«me
)

266 
ut¢ame
 
thi¢ame
 = {

269 
i
;

271 i‡(!
«me
)

272  -
ERROR
;

273 
	`vîify_¨ó
 (
«me
,  *name);

274 
i
 = 0; i <  *
«me
; i++)

275 
	`put_fs_byã
 (((*Ë&
thi¢ame
)[
i
], i + (*Ë
«me
);

277 
	}
}

280 
	$sys_umask
 (
mask
)

282 
ﬁd
 = 
cuºít
->
umask
;

284 
cuºít
->
umask
 = 
mask
 & 0777;

285  (
ﬁd
);

286 
	}
}

	@kernel/traps.c

6 
	~<£t_£g.h
>

13 
	~<°rög.h
>

16 
	~<löux/hód.h
>

19 
	~<löux/sched.h
>

21 
	~<löux/kî√l.h
>

23 
	~<asm/sy°em.h
>

25 
	~<asm/£gmít.h
>

27 
	~<asm/io.h
>

36 
_ölöe
 
	$gë_£g_byã
(
£gm
, *
addr
)

38 
__ªs
;

39 
_asm
{

40 
push
 
fs


41 
mov
 
ax
,
£gm


42 
mov
 
fs
,
ax


43 
mov
 
ebx
,
addr


44 
mov
 
Æ
,
byã
 
±r
 
fs
:[
ebx
]

45 
mov
 
__ªs
,
Æ


46 
p›
 
fs


48  
__ªs
;

49 
	}
}

52 
_ölöe
 

53 
	$gë_£g_l⁄g
(
£gm
,*
addr
) {

54 
__ªs
;

55 
_asm
{

56 
push
 
fs


57 
mov
 
ax
,
£gm


58 
mov
 
fs
,
ax


59 
mov
 
ebx
,
addr


60 
mov
 
óx
,
fs
:[
ebx
]

61 
mov
 
__ªs
,
óx


62 
p›
 
fs


64  
__ªs
;

65 
	}
}

73 
_ölöe
 
	$_fs
() {

74 
__ªs
;

75 
_asm
 
mov
 
ax
,
fs


76 
_asm
 
mov
 
__ªs
,
ax


77  
__ªs
;

78 
	}
}

85 
do_exô
(
code
);

87 
∑ge_ex˚±i⁄
();

90 
divide_îr‹
();

91 
debug
();

92 
nmi
();

93 
öt3
();

94 
ovîÊow
();

95 
bounds
();

96 
övÆid_›
();

97 
devi˚_nŸ_avaûabÀ
();

98 
doubÀ_Áu…
();

99 
c›ro˚ss‹_£gmít_ovîrun
();

100 
övÆid_TSS
();

101 
£gmít_nŸ_¥e£¡
();

102 
°ack_£gmít
();

103 
gíîÆ_¥Ÿe˘i⁄
();

104 
∑ge_Áu…
();

105 
ª£rved
();

106 
c›ro˚ss‹_îr‹
();

107 
∑øŒñ_öãºu±
();

108 
úq13
();

113 
	$dõ
(* 
°r
,
e•_±r
,
ƒ
)

115 * 
e•
 = (*Ë
e•_±r
;

116 
i
;

118 
	`¥ötk
("%s: %04x\n\r",
°r
,
ƒ
&0xffff);

119 
	`¥ötk
("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",

120 
e•
[1],esp[0],esp[2],esp[4],esp[3]);

121 
	`¥ötk
("fs: %04x\n",
	`_fs
());

122 
	`¥ötk
("ba£: %p,Üimô: %p\n",
	`gë_ba£
(
cuºít
->
ldt
[1]),
	`gë_limô
(0x17));

123 i‡(
e•
[4] == 0x17) {

124 
	`¥ötk
("Stack: ");

125 
i
=0;i<4;i++)

126 
	`¥ötk
("%∞",
	`gë_£g_l⁄g
(0x17,
i
+(*)
e•
[3]));

127 
	`¥ötk
("\n");

129 
	`°r
(
i
);

130 
	`¥ötk
("Pid: %d,Öro˚s†ƒ: %d\n\r",
cuºít
->
pid
,0xfff‡& 
i
);

131 
i
=0;i<10;i++)

132 
	`¥ötk
("%02x ",0xf‡& 
	`gë_£g_byã
(
e•
[1],(
i
+(*)esp[0])));

133 
	`¥ötk
("\n\r");

134 
	`do_exô
(11);

135 
	}
}

138 
	$do_doubÀ_Áu…
(
e•
, 
îr‹_code
)

140 
	`dõ
("doubÀ fau…",
e•
,
îr‹_code
);

141 
	}
}

143 
	$do_gíîÆ_¥Ÿe˘i⁄
(
e•
, 
îr‹_code
)

145 
	`dõ
("gíîÆÖrŸe˘i⁄",
e•
,
îr‹_code
);

146 
	}
}

148 
	$do_divide_îr‹
(
e•
, 
îr‹_code
)

150 
	`dõ
("dividêîr‹",
e•
,
îr‹_code
);

151 
	}
}

153 
	$do_öt3
(* 
e•
, 
îr‹_code
,

154 
fs
,
es
,
ds
,

155 
ebp
,
esi
,
edi
,

156 
edx
,
ecx
,
ebx
,
óx
)

158 
å
;

161 
_asm
 
x‹
 
óx
,eax

162 
_asm
 
°r
 
ax


163 
_asm
 
mov
 
å
,
óx


164 
	`¥ötk
("eax\t\tebx\t\tecx\t\tedx\n\r%8x\t%8x\t%8x\t%8x\n\r",

165 
óx
,
ebx
,
ecx
,
edx
);

166 
	`¥ötk
("esi\t\tedi\t\tebp\t\tesp\n\r%8x\t%8x\t%8x\t%8x\n\r",

167 
esi
,
edi
,
ebp
,(Ë
e•
);

168 
	`¥ötk
("\n\rds\tes\tfs\ttr\n\r%4x\t%4x\t%4x\t%4x\n\r",

169 
ds
,
es
,
fs
,
å
);

170 
	`¥ötk
("EIP: %8x CS: %4x EFLAGS: %8x\n\r",
e•
[0],esp[1],esp[2]);

171 
	}
}

173 
	$do_nmi
(
e•
, 
îr‹_code
)

175 
	`dõ
("nmi",
e•
,
îr‹_code
);

176 
	}
}

178 
	$do_debug
(
e•
, 
îr‹_code
)

180 
	`dõ
("debug",
e•
,
îr‹_code
);

181 
	}
}

183 
	$do_ovîÊow
(
e•
, 
îr‹_code
)

185 
	`dõ
("ovîÊow",
e•
,
îr‹_code
);

186 
	}
}

188 
	$do_bounds
(
e•
, 
îr‹_code
)

190 
	`dõ
("bounds",
e•
,
îr‹_code
);

191 
	}
}

193 
	$do_övÆid_›
(
e•
, 
îr‹_code
)

195 
	`dõ
("övÆid o≥ønd",
e•
,
îr‹_code
);

196 
	}
}

198 
	$do_devi˚_nŸ_avaûabÀ
(
e•
, 
îr‹_code
)

200 
	`dõ
("devi˚ÇŸávaûabÀ",
e•
,
îr‹_code
);

201 
	}
}

203 
	$do_c›ro˚ss‹_£gmít_ovîrun
(
e•
, 
îr‹_code
)

205 
	`dõ
("c›ro˚ss‹ segmíàovîrun",
e•
,
îr‹_code
);

206 
	}
}

208 
	$do_övÆid_TSS
(
e•
,
îr‹_code
)

210 
	`dõ
("övÆid TSS",
e•
,
îr‹_code
);

211 
	}
}

213 
	$do_£gmít_nŸ_¥e£¡
(
e•
,
îr‹_code
)

215 
	`dõ
("£gmíànŸÖª£¡",
e•
,
îr‹_code
);

216 
	}
}

218 
	$do_°ack_£gmít
(
e•
,
îr‹_code
)

220 
	`dõ
("°ack segmít",
e•
,
îr‹_code
);

221 
	}
}

223 
	$do_c›ro˚ss‹_îr‹
(
e•
, 
îr‹_code
)

225 i‡(
œ°_èsk_u£d_m©h
 !
cuºít
)

227 
	`dõ
("c›ro˚ss‹Éº‹",
e•
,
îr‹_code
);

228 
	}
}

230 
	$do_ª£rved
(
e•
, 
îr‹_code
)

232 
	`dõ
("ª£rved (15,17-47Ëîr‹",
e•
,
îr‹_code
);

233 
	}
}

239 
	$å≠_öô
()

241 
i
;

243 
	`£t_å≠_g©e
(0,&
divide_îr‹
);

244 
	`£t_å≠_g©e
(1,&
debug
);

245 
	`£t_å≠_g©e
(2,&
nmi
);

246 
	`£t_sy°em_g©e
(3,&
öt3
);

247 
	`£t_sy°em_g©e
(4,&
ovîÊow
);

248 
	`£t_sy°em_g©e
(5,&
bounds
);

249 
	`£t_å≠_g©e
(6,&
övÆid_›
);

250 
	`£t_å≠_g©e
(7,&
devi˚_nŸ_avaûabÀ
);

251 
	`£t_å≠_g©e
(8,&
doubÀ_Áu…
);

252 
	`£t_å≠_g©e
(9,&
c›ro˚ss‹_£gmít_ovîrun
);

253 
	`£t_å≠_g©e
(10,&
övÆid_TSS
);

254 
	`£t_å≠_g©e
(11,&
£gmít_nŸ_¥e£¡
);

255 
	`£t_å≠_g©e
(12,&
°ack_£gmít
);

256 
	`£t_å≠_g©e
(13,&
gíîÆ_¥Ÿe˘i⁄
);

257 
	`£t_å≠_g©e
(14,&
∑ge_Áu…
);

258 
	`£t_å≠_g©e
(15,&
ª£rved
);

259 
	`£t_å≠_g©e
(16,&
c›ro˚ss‹_îr‹
);

261 
i
=17;i<48;i++)

262 
	`£t_å≠_g©e
(
i
,&
ª£rved
);

263 
	`£t_å≠_g©e
(45,&
úq13
);

264 
	`outb_p
(
	`öb_p
(0x21)&0xfb,0x21);

265 
	`outb
(
	`öb_p
(0xA1)&0xdf,0xA1);

266 
	`£t_å≠_g©e
(39,&
∑øŒñ_öãºu±
);

267 
	}
}

	@kernel/vsprintf.c

6 
	~<£t_£g.h
>

13 
	~<°d¨g.h
>

16 
	~<°rög.h
>

20 
	#is_digô
(
c
) ((c) >= '0' && (c) <= '9')

21 

	)

23 
	$skù_©oi
 (c⁄° **
s
)

25 
i
 = 0;

27 
	`is_digô
 (**
s
))

28 
i
 = i * 10 + *((*
s
)++) - '0';

29  
i
;

30 
	}
}

33 
	#ZEROPAD
 1

	)

34 
	#SIGN
 2

	)

35 
	#PLUS
 4

	)

36 
	#SPACE
 8

	)

37 
	#LEFT
 16

	)

38 
	#SPECIAL
 32

	)

39 
	#SMALL
 64

	)

43 
	#do_div
(
n
,
ba£
Ë
	`_do_div
(&“),ba£)

	)

44 
_ölöe
 
	$_do_div
(*
n
,
ba£
)

46 
__ªs
;

47 
_asm
 
mov
 
ecx
,
n


48 
_asm
 
mov
 
óx
,[
ecx
]

49 
_asm
 
x‹
 
edx
,edx

50 
_asm
 
mov
 
ebx
,
ba£


51 
_asm
 
div
 
ebx


52 
_asm
 
mov
 [
ecx
],
óx


53 
_asm
 
mov
 
__ªs
,
edx


54  
__ªs
;

55 
	}
}

65 
	$numbî
 (*
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
, 
ty≥
)

67 
c
, 
sign
, 
tmp
[36];

68 c⁄° *
digôs
 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

69 
i
;

74 i‡(
ty≥
 & 
SMALL
)

75 
digôs
 = "0123456789abcdefghijklmnopqrstuvwxyz";

76 i‡(
ty≥
 & 
LEFT
)

77 
ty≥
 &~
ZEROPAD
;

78 i‡(
ba£
 < 2 || base > 36)

83 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ';

84 i‡(
ty≥
 & 
SIGN
 && 
num
 < 0)

86 
sign
 = '-';

87 
num
 = -num;

90 
sign
 = (
ty≥
 & 
PLUS
Ë? '+' : (—y≥ & 
SPACE
) ? ' ' : 0);

93 i‡(
sign
)

94 
size
--;

95 i‡(
ty≥
 & 
SPECIAL
)

96 i‡(
ba£
 == 16)

97 
size
 -= 2;

98 i‡(
ba£
 == 8)

99 
size
--;

101 
i
 = 0;

102 i‡(
num
 == 0)

103 
tmp
[
i
++] = '0';

105 
num
 != 0)

106 
tmp
[
i
++] = 
digôs
[
	`do_div
 (
num
, 
ba£
)];

109 i‡(
i
 > 
¥ecisi⁄
)

110 
¥ecisi⁄
 = 
i
;

111 
size
 -
¥ecisi⁄
;

115 i‡(!(
ty≥
 & (
ZEROPAD
 + 
LEFT
)))

116 
size
-- > 0)

117 *
°r
++ = ' ';

118 i‡(
sign
)

119 *
°r
++ = 
sign
;

121 i‡(
ty≥
 & 
SPECIAL
)

122 i‡(
ba£
 == 8)

123 *
°r
++ = '0';

124 i‡(
ba£
 == 16)

126 *
°r
++ = '0';

127 *
°r
++ = 
digôs
[33];

130 i‡(!(
ty≥
 & 
LEFT
))

131 
size
-- > 0)

132 *
°r
++ = 
c
;

134 
i
 < 
¥ecisi⁄
--)

135 *
°r
++ = '0';

137 
i
-- > 0)

138 *
°r
++ = 
tmp
[
i
];

140 
size
-- > 0)

141 *
°r
++ = ' ';

142  
°r
;

143 
	}
}

150 
	$v•rötf
 (*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

152 
Àn
;

153 
i
;

154 *
°r
;

155 *
s
;

156 *
ù
;

158 
Êags
;

160 
fõld_width
;

162 
¥ecisi⁄
;

165 
quÆifõr
;

168 
°r
 = 
buf
; *
fmt
; ++fmt)

172 i‡(*
fmt
 != '%')

174 *
°r
++ = *
fmt
;

180 
Êags
 = 0;

181 
ª≥©
:

182 ++
fmt
;

183 *
fmt
)

186 
Êags
 |
LEFT
;

187 
ª≥©
;

189 
Êags
 |
PLUS
;

190 
ª≥©
;

192 
Êags
 |
SPACE
;

193 
ª≥©
;

195 
Êags
 |
SPECIAL
;

196 
ª≥©
;

198 
Êags
 |
ZEROPAD
;

199 
ª≥©
;

207 
fõld_width
 = -1;

208 i‡(
	`is_digô
 (*
fmt
))

209 
fõld_width
 = 
	`skù_©oi
 (&
fmt
);

210 i‡(*
fmt
 == '*')

213 
fõld_width
 = 
	`va_¨g
 (
¨gs
, );

214 i‡(
fõld_width
 < 0)

216 
fõld_width
 = -field_width;

217 
Êags
 |
LEFT
;

226 
¥ecisi⁄
 = -1;

227 i‡(*
fmt
 == '.')

229 ++
fmt
;

230 i‡(
	`is_digô
 (*
fmt
))

231 
¥ecisi⁄
 = 
	`skù_©oi
 (&
fmt
);

232 i‡(*
fmt
 == '*')

235 
¥ecisi⁄
 = 
	`va_¨g
 (
¨gs
, );

237 i‡(
¥ecisi⁄
 < 0)

238 
¥ecisi⁄
 = 0;

243 
quÆifõr
 = -1;

244 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L')

246 
quÆifõr
 = *
fmt
;

247 ++
fmt
;

251 *
fmt
)

257 i‡(!(
Êags
 & 
LEFT
))

258 --
fõld_width
 > 0)

259 *
°r
++ = ' ';

260 *
°r
++ = (Ë
	`va_¨g
 (
¨gs
, );

261 --
fõld_width
 > 0)

262 *
°r
++ = ' ';

270 
s
 = 
	`va_¨g
 (
¨gs
, *);

271 
Àn
 = 
	`°æí
 (
s
);

272 i‡(
¥ecisi⁄
 < 0)

273 
¥ecisi⁄
 = 
Àn
;

274 i‡(
Àn
 > 
¥ecisi⁄
)

275 
Àn
 = 
¥ecisi⁄
;

277 i‡(!(
Êags
 & 
LEFT
))

278 
Àn
 < 
fõld_width
--)

279 *
°r
++ = ' ';

280 
i
 = 0; i < 
Àn
; ++i)

281 *
°r
++ = *
s
++;

282 
Àn
 < 
fõld_width
--)

283 *
°r
++ = ' ';

288 
°r
 = 
	`numbî
 (°r, 
	`va_¨g
 (
¨gs
, ), 8,

289 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

295 i‡(
fõld_width
 == -1)

297 
fõld_width
 = 8;

298 
Êags
 |
ZEROPAD
;

300 
°r
 = 
	`numbî
 (°r, (Ë
	`va_¨g
 (
¨gs
, *), 16,

301 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

306 
Êags
 |
SMALL
;

308 
°r
 = 
	`numbî
 (°r, 
	`va_¨g
 (
¨gs
, ), 16,

309 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

316 
Êags
 |
SIGN
;

318 
°r
 = 
	`numbî
 (°r, 
	`va_¨g
 (
¨gs
, ), 10,

319 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

325 
ù
 = 
	`va_¨g
 (
¨gs
, *);

326 *
ù
 = (
°r
 - 
buf
);

333 i‡(*
fmt
 != '%')

334 *
°r
++ = '%';

335 i‡(*
fmt
)

336 *
°r
++ = *
fmt
;

338 --
fmt
;

342 *
°r
 = '\0';

343  
°r
 - 
buf
;

344 
	}
}

	@lib/_exit.c

6 
	~<£t_£g.h
>

8 
	#__LIBRARY__


9 

	)

12 
	~<uni°d.h
>

18 
	$_exô
(
exô_code
)

22 
_asm
 
mov
 
óx
,
__NR_exô


23 
_asm
 
mov
 
ebx
,
exô_code


24 
_asm
 0x80

25 
	}
}

	@lib/close.c

6 
	~<£t_£g.h
>

8 
	#__LIBRARY__


	)

11 
	~<uni°d.h
>

16 
_sysˇŒ1
(,
˛o£
,,
fd
)

	@lib/ctype.c

6 
	~<£t_£g.h
>

8 
	~<˘y≥.h
>

10 
	g_˘mp
 = 0;

14 
	g_˘y≥
[] = {0x00,

15 
_C
,_C,_C,_C,_C,_C,_C,_C,

16 
_C
,_C|
_S
,_C|_S,_C|_S,_C|_S,_C|_S,_C,_C,

17 
_C
,_C,_C,_C,_C,_C,_C,_C,

18 
_C
,_C,_C,_C,_C,_C,_C,_C,

19 
_S
|
_SP
,
_P
,_P,_P,_P,_P,_P,_P,

20 
_P
,_P,_P,_P,_P,_P,_P,_P,

21 
_D
,_D,_D,_D,_D,_D,_D,_D,

22 
_D
,_D,
_P
,_P,_P,_P,_P,_P,

23 
_P
,
_U
|
_X
,_U|_X,_U|_X,_U|_X,_U|_X,_U|_X,_U,

24 
_U
,_U,_U,_U,_U,_U,_U,_U,

25 
_U
,_U,_U,_U,_U,_U,_U,_U,

26 
_U
,_U,_U,
_P
,_P,_P,_P,_P,

27 
_P
,
_L
|
_X
,_L|_X,_L|_X,_L|_X,_L|_X,_L|_X,_L,

28 
_L
,_L,_L,_L,_L,_L,_L,_L,

29 
_L
,_L,_L,_L,_L,_L,_L,_L,

30 
_L
,_L,_L,
_P
,_P,_P,_P,
_C
,

	@lib/dup.c

6 
	~<£t_£g.h
>

8 
	#__LIBRARY__


	)

11 
	~<uni°d.h
>

16 
_sysˇŒ1
(,
dup
,,
fd
)

	@lib/errno.c

6 
	~<£t_£g.h
>

9 
	gî∫o
 = 0;

	@lib/execve.c

6 
	~<£t_£g.h
>

8 
	#__LIBRARY__


	)

11 
	~<uni°d.h
>

17 
_sysˇŒ3
(,
execve
,c⁄° *,
fûe
,**,
¨gv
,**,
ívp
)

	@lib/malloc.c

34 
	~<£t_£g.h
>

36 
	~<löux/kî√l.h
>

37 
	~<löux/mm.h
>

38 
	~<asm/sy°em.h
>

41 
	sbuckë_desc
 {

42 *
	m∑ge
;

43 
buckë_desc
 *
	m√xt
;

44 *
	m‰ì±r
;

45 
	mªf˙t
;

46 
	mbuckë_size
;

50 
	s_buckë_dú
 {

51 
	msize
;

52 
buckë_desc
 *
	mchaö
;

63 
_buckë_dú
 
	gbuckë_dú
[] = {

64 { 16, (
buckë_desc
 *) 0},

65 { 32, (
buckë_desc
 *) 0},

66 { 64, (
buckë_desc
 *) 0},

67 { 128, (
buckë_desc
 *) 0},

68 { 256, (
buckë_desc
 *) 0},

69 { 512, (
buckë_desc
 *) 0},

70 { 1024, (
buckë_desc
 *) 0},

71 { 2048, (
buckë_desc
 *) 0},

72 { 4096, (
buckë_desc
 *) 0},

73 { 0, (
buckë_desc
 *) 0}};

78 
buckë_desc
 *
	g‰ì_buckë_desc
 = (bucket_desc *) 0;

85 
_ölöe
 
	$öô_buckë_desc
()

87 
buckë_desc
 *
bdesc
, *
fú°
;

88 
i
;

91 
fú°
 = 
bdesc
 = (
buckë_desc
 *Ë
	`gë_‰ì_∑ge
();

92 i‡(!
bdesc
)

93 
	`∑nic
("Out of memory in init_bucket_desc()");

95 
i
 = 
PAGE_SIZE
/(
buckë_desc
); i > 1; i--) {

96 
bdesc
->
√xt
 = bdesc+1;

97 
bdesc
++;

104 
bdesc
->
√xt
 = 
‰ì_buckë_desc
;

105 
‰ì_buckë_desc
 = 
fú°
;

106 
	}
}

111 *
	$mÆloc
(
Àn
)

113 
_buckë_dú
 *
bdú
;

114 
buckë_desc
 *
bdesc
;

115 *
ªtvÆ
;

122 
bdú
 = 
buckë_dú
; bdú->
size
; bdir++)

123 i‡(
bdú
->
size
 >
Àn
)

127 i‡(!
bdú
->
size
) {

128 
	`¥ötk
("malloc called with impossiblyÜargeárgument (%d)\n",

129 
Àn
);

130 
	`∑nic
("malloc: badárg");

135 
	`˛i
();

138 
bdesc
 = 
bdú
->
chaö
; bdesc; bdes¯bdesc->
√xt
)

139 i‡(
bdesc
->
‰ì±r
)

144 i‡(!
bdesc
) {

145 *
˝
;

146 
i
;

150 i‡(!
‰ì_buckë_desc
)

151 
	`öô_buckë_desc
();

153 
bdesc
 = 
‰ì_buckë_desc
;

154 
‰ì_buckë_desc
 = 
bdesc
->
√xt
;

157 
bdesc
->
ªf˙t
 = 0;

158 
bdesc
->
buckë_size
 = 
bdú
->
size
;

159 
bdesc
->
∑ge
 = bdesc->
‰ì±r
 = (*Ë
˝
 = (*)
	`gë_‰ì_∑ge
();

161 i‡(!
˝
)

162 
	`∑nic
("Out of memory in kernel malloc()");

166 
i
=
PAGE_SIZE
/
bdú
->
size
; i > 1; i--) {

167 *((**Ë
˝
Ë˝ + 
bdú
->
size
;

168 
˝
 +
bdú
->
size
;

173 *((**Ë
˝
) = 0;

174 
bdesc
->
√xt
 = 
bdú
->
chaö
;

175 
bdú
->
chaö
 = 
bdesc
;

179 
ªtvÆ
 = (*Ë
bdesc
->
‰ì±r
;

180 
bdesc
->
‰ì±r
 = *((**Ë
ªtvÆ
);

181 
bdesc
->
ªf˙t
++;

183 
	`°i
();

184 (
ªtvÆ
);

185 
	}
}

195 
	$‰ì_s
(*
obj
, 
size
)

197 *
∑ge
;

198 
_buckë_dú
 *
bdú
;

199 
buckë_desc
 *
bdesc
, *
¥ev
;

202 
∑ge
 = (*Ë((Ë
obj
 & 0xfffff000);

204 
bdú
 = 
buckë_dú
; bdú->
size
; bdir++) {

205 
¥ev
 = 0;

207 i‡(
bdú
->
size
 < size)

211 
bdesc
 = 
bdú
->
chaö
; bdesc; bdes¯bdesc->
√xt
) {

212 i‡(
bdesc
->
∑ge
 ==Öage)

213 
found
;

214 
¥ev
 = 
bdesc
;

218 
	`∑nic
("BadáddressÖassedÅo kernel free_s()");

219 
found
:

222 
	`˛i
();

223 *((**)
obj
Ë
bdesc
->
‰ì±r
;

224 
bdesc
->
‰ì±r
 = 
obj
;

225 
bdesc
->
ªf˙t
--;

227 i‡(
bdesc
->
ªf˙t
 == 0) {

233 i‡((
¥ev
 && (¥ev->
√xt
 !
bdesc
)) ||

234 (!
¥ev
 && (
bdú
->
chaö
 !
bdesc
)))

235 
¥ev
 = 
bdú
->
chaö
;Öªv;Öªv =Öªv->
√xt
)

236 i‡(
¥ev
->
√xt
 =
bdesc
)

239 i‡(
¥ev
)

240 
¥ev
->
√xt
 = 
bdesc
->next;

245 i‡(
bdú
->
chaö
 !
bdesc
)

246 
	`∑nic
("malloc bucket chains corrupted");

247 
bdú
->
chaö
 = 
bdesc
->
√xt
;

250 
	`‰ì_∑ge
((Ë
bdesc
->
∑ge
);

251 
bdesc
->
√xt
 = 
‰ì_buckë_desc
;

252 
‰ì_buckë_desc
 = 
bdesc
;

255 
	`°i
();

257 
	}
}

	@lib/open.c

10 
	~<£t_£g.h
>

12 
	#__LIBRARY__


	)

13 
	~<uni°d.h
>

15 
	~<°d¨g.h
>

23 
	$›í
(c⁄° * 
fûíame
, 
Êag
, ...)

25 
ªs
;

26 
va_li°
 
¨g
;

32 
	`va_°¨t
(
¨g
,
Êag
);

33 
ªs
 = 
	`va_¨g
(
¨g
,);

34 
_asm
{

35 
mov
 
óx
,
__NR_›í


36 
mov
 
ebx
,
fûíame


37 
mov
 
ecx
,
Êag


38 
mov
 
edx
,
ªs


40 
mov
 
ªs
,
óx


47 i‡(
ªs
>=0)

48  
ªs
;

50 
î∫o
 = -
ªs
;

52 
	}
}

	@lib/setsid.c

9 
	~<£t_£g.h
>

11 
	#__LIBRARY__


	)

14 
	~<uni°d.h
>

19 
_sysˇŒ0
(
pid_t
,
£tsid
)

	@lib/string.c

12 
	~<£t_£g.h
>

14 

	)

15 
	#ölöe


	)

16 
	#__LIBRARY__


	)

17 
	~<°rög.h
>

	@lib/wait.c

16 
	~<£t_£g.h
>

18 
	#__LIBRARY__


	)

21 
	~<uni°d.h
>

23 
	~<sys/waô.h
>

30 
	$_sysˇŒ3
(
pid_t
,
waôpid
,pid_t,
pid
,*,
waô_°©
,,
›ti⁄s
)

33 
pid_t
 
	$waô
(* 
waô_°©
)

35  
	`waôpid
(-1,
waô_°©
,0);

36 
	}
}

	@lib/write.c

9 
	~<£t_£g.h
>

11 
	#__LIBRARY__


	)

14 
	~<uni°d.h
>

20 
_sysˇŒ3
(,
wrôe
,,
fd
,c⁄° *,
buf
,
off_t
,
cou¡
)

	@mm/memory.c

6 
	~<£t_£g.h
>

24 
	~<sig«l.h
>

27 
	~<asm/sy°em.h
>

31 
	~<löux/sched.h
>

33 
	~<löux/hód.h
>

35 
	~<löux/kî√l.h
>

37 
do_exô
(
code
);

40 
_ölöe
 
	$oom
()

42 
	`¥ötk
("out of memory\n\r");

43 
	`do_exô
(
SIGSEGV
);

45 
	}
}

53 
	#övÆid©e
() \

54 
_asm
{_asm 
x‹
 
óx
,óx _asm 
mov
 
¸3
,óx}

	)

58 
	#LOW_MEM
 0x100000

59 
	#PAGING_MEMORY
 (15*1024*1024)

60 
	#PAGING_PAGES
 (
PAGING_MEMORY
>>12)

61 
	#MAP_NR
(
addr
Ë((◊ddr)-
LOW_MEM
)>>12)

62 
	#USED
 100

63 

	)

65 
	#CODE_SPACE
(
addr
) \

66 ((((
addr
)+4095)&~4095Ë< 
cuºít
->
°¨t_code
 + cuºít->
íd_code
)

	)

68 
	gHIGH_MEMORY
 = 0;

73 
	#c›y_∑ge
(
‰om
,
to
Ë
	`_c›y_∑ge
((*)(‰om),(*)—o))

	)

74 
_ölöe
 
	$_c›y_∑ge
(*
‰om
, *
to
)

75 {
_asm
{

76 
pushf


77 
mov
 
ecx
,1024

78 
mov
 
esi
,
‰om


79 
mov
 
edi
,
to


80 
˛d


81 
ªp
 
movsd


82 
p›f


83 }
	}
}

87 
	gmem_m≠
 [ 
PAGING_PAGES
 ] = {0,};

100 
	$gë_‰ì_∑ge
()

103 
__asm
 {

104 
pushf


105 
x‹
 
óx
,Éax

106 
mov
 
ecx
,
PAGING_PAGES


108 
mov
 
edi
,
off£t
 
mem_m≠
 + 
PAGING_PAGES
 - 1

109 
°d


110 
ª≤e
 
sˇsb


111 
j√
 
l1


112 
mov
 
byã
 
±r
 [
edi
+1],1

113 
ßl
 
ecx
,12

114 
add
 
ecx
,
LOW_MEM


115 
mov
 
edx
,
ecx


116 
mov
 
ecx
,1024

117 
Àa
 
edi
,[
edx
+4092]

118 
ªp
 
°osd


120 
mov
 
óx
,
edx


121 
l1
: 
p›f


124 
	}
}

152 
	$‰ì_∑ge
(
addr
)

154 i‡(
addr
 < 
LOW_MEM
) ;

155 i‡(
addr
 >
HIGH_MEMORY
)

156 
	`∑nic
("tryingÅo freeÇonexistentÖage");

157 
addr
 -
LOW_MEM
;

158 
addr
 >>= 12;

159 i‡(
mem_m≠
[
addr
]--) ;

160 
mem_m≠
[
addr
]=0;

161 
	`∑nic
("tryingÅo free freeÖage");

162 
	}
}

173 
	$‰ì_∑ge_èbÀs
(
‰om
,
size
)

175 *
pg_èbÀ
;

176 * 
dú
, 
ƒ
;

178 i‡(
‰om
 & 0x3fffff)

179 
	`∑nic
("free_page_tables called with wrongálignment");

180 i‡(!
‰om
)

181 
	`∑nic
("TryingÅo free up swapper memory space");

183 
size
 = (size + 0x3fffff) >> 22;

187 
dú
 = (*Ë((
‰om
>>20) & 0xffc);

188  ; 
size
-->0 ; 
dú
++) {

189 i‡(!(1 & *
dú
))

191 
pg_èbÀ
 = (*Ë(0xfffff000 & *
dú
);

192 
ƒ
=0 ;Çr<1024 ;Çr++) {

193 i‡(1 & *
pg_èbÀ
)

194 
	`‰ì_∑ge
(0xfffff000 & *
pg_èbÀ
);

195 *
pg_èbÀ
 = 0;

196 
pg_èbÀ
++;

198 
	`‰ì_∑ge
(0xfffff000 & *
dú
);

200 *
dú
 = 0;

202 
	`övÆid©e
();

204 
	}
}

225 
	$c›y_∑ge_èbÀs
(
‰om
,
to
,
size
)

227 * 
‰om_∑ge_èbÀ
;

228 * 
to_∑ge_èbÀ
;

229 
this_∑ge
;

230 * 
‰om_dú
, * 
to_dú
;

231 
ƒ
;

234 i‡((
‰om
&0x3fffffË|| (
to
&0x3fffff))

235 
	`∑nic
("copy_page_tables called with wrongálignment");

237 
‰om_dú
 = (*Ë((
‰om
>>20) & 0xffc);

238 
to_dú
 = (*Ë((
to
>>20) & 0xffc);

240 
size
 = (() (size+0x3fffff)) >> 22;

242  ; 
size
-->0 ; 
‰om_dú
++,
to_dú
++) {

243 i‡(1 & *
to_dú
)

244 
	`∑nic
("copy_page_tables:álreadyÉxist");

245 i‡(!(1 & *
‰om_dú
))

248 
‰om_∑ge_èbÀ
 = (*Ë(0xfffff000 & *
‰om_dú
);

250 i‡(!(
to_∑ge_èbÀ
 = (*Ë
	`gë_‰ì_∑ge
()))

253 *
to_dú
 = ((Ë
to_∑ge_èbÀ
) | 7;

256 
ƒ
 = (
‰om
==0)?0xA0:1024;

258  ; 
ƒ
-- > 0 ; 
‰om_∑ge_èbÀ
++,
to_∑ge_èbÀ
++) {

259 
this_∑ge
 = *
‰om_∑ge_èbÀ
;

260 i‡(!(1 & 
this_∑ge
))

264 
this_∑ge
 &= ~2;

265 *
to_∑ge_èbÀ
 = 
this_∑ge
;

268 i‡(
this_∑ge
 > 
LOW_MEM
) {

272 *
‰om_∑ge_èbÀ
 = 
this_∑ge
;

273 
this_∑ge
 -
LOW_MEM
;

274 
this_∑ge
 >>= 12;

275 
mem_m≠
[
this_∑ge
]++;

279 
	`övÆid©e
();

281 
	}
}

289 
	$put_∑ge
(
∑ge
,
addªss
)

291 
tmp
, *
∑ge_èbÀ
;

296 i‡(
∑ge
 < 
LOW_MEM
 ||Öagê>
HIGH_MEMORY
)

297 
	`¥ötk
("TryögÅÿpuà∑gê%∞© %p\n",
∑ge
,
addªss
);

299 i‡(
mem_m≠
[(
∑ge
-
LOW_MEM
)>>12] != 1)

300 
	`¥ötk
("mem_m≠ dißgªe†wôh %∞© %p\n",
∑ge
,
addªss
);

302 
∑ge_èbÀ
 = (*Ë((
addªss
>>20) & 0xffc);

304 i‡((*
∑ge_èbÀ
)&1)

305 
∑ge_èbÀ
 = (*) (0xfffff000 & *page_table);

309 i‡(!(
tmp
=
	`gë_‰ì_∑ge
()))

311 *
∑ge_èbÀ
 = 
tmp
|7;

312 
∑ge_èbÀ
 = (*Ë
tmp
;

315 
∑ge_èbÀ
[(
addªss
>>12Ë& 0x3ff] = 
∑ge
 | 7;

317  
∑ge
;

318 
	}
}

323 
	$un_wp_∑ge
(* 
èbÀ_íåy
)

325 
ﬁd_∑ge
,
√w_∑ge
;

327 
ﬁd_∑ge
 = 0xfffff000 & *
èbÀ_íåy
;

331 i‡(
ﬁd_∑ge
 >
LOW_MEM
 && 
mem_m≠
[
	`MAP_NR
(old_page)]==1) {

332 *
èbÀ_íåy
 |= 2;

333 
	`övÆid©e
();

337 i‡(!(
√w_∑ge
=
	`gë_‰ì_∑ge
()))

338 
	`oom
();

342 i‡(
ﬁd_∑ge
 >
LOW_MEM
)

343 
mem_m≠
[
	`MAP_NR
(
ﬁd_∑ge
)]--;

344 *
èbÀ_íåy
 = 
√w_∑ge
 | 7;

345 
	`övÆid©e
();

346 
	`c›y_∑ge
(
ﬁd_∑ge
,
√w_∑ge
);

347 
	}
}

358 
	$do_wp_∑ge
(
îr‹_code
,
addªss
)

363 i‡(
	`CODE_SPACE
(
addªss
))

364 
	`do_exô
(
SIGSEGV
);

371 
	`un_wp_∑ge
(

372 (*)(((
addªss
>>10) & 0xffc) +

373 (0xfffff000 & *((*Ë((
addªss
>>20) &0xffc))))

376 
	}
}

380 
	$wrôe_vîify
(
addªss
)

382 
∑ge
;

385 i‡(!–(
∑ge
 = *((*Ë((
addªss
>>20) & 0xffc)) )&1))

388 
∑ge
 &= 0xfffff000;

389 
∑ge
 +((
addªss
>>10) & 0xffc);

391 i‡((3 & *(*Ë
∑ge
) == 1)

392 
	`un_wp_∑ge
((*Ë
∑ge
);

394 
	}
}

400 
	$gë_em±y_∑ge
(
addªss
)

402 
tmp
;

407 i‡(!(
tmp
=
	`gë_‰ì_∑ge
()Ë|| !
	`put_∑ge
—mp,
addªss
)) {

408 
	`‰ì_∑ge
(
tmp
);

409 
	`oom
();

411 
	}
}

422 
	$åy_to_sh¨e
(
addªss
, 
èsk_°ru˘
 * 
p
)

424 
‰om
;

425 
to
;

426 
‰om_∑ge
;

427 
to_∑ge
;

428 
phys_addr
;

431 
‰om_∑ge
 = 
to_∑ge
 = ((
addªss
>>20) & 0xffc);

433 
‰om_∑ge
 +((
p
->
°¨t_code
>>20) & 0xffc);

435 
to_∑ge
 +((
cuºít
->
°¨t_code
>>20) & 0xffc);

439 
‰om
 = *(*Ë
‰om_∑ge
;

440 i‡(!(
‰om
 & 1))

442 
‰om
 &= 0xfffff000;

444 
‰om_∑ge
 = 
‰om
 + ((
addªss
>>10) & 0xffc);

445 
phys_addr
 = *(*Ë
‰om_∑ge
;

448 i‡((
phys_addr
 & 0x41) != 0x01)

451 
phys_addr
 &= 0xfffff000;

452 i‡(
phys_addr
 >
HIGH_MEMORY
 ||Öhys_add∏< 
LOW_MEM
)

456 
to
 = *(*Ë
to_∑ge
;

457 i‡(!(
to
 & 1))

458 i‡(
to
 = 
	`gë_‰ì_∑ge
())

459 *(*Ë
to_∑ge
 = 
to
 | 7;

461 
	`oom
();

463 
to
 &= 0xfffff000;

464 
to_∑ge
 = 
to
 + ((
addªss
>>10) & 0xffc);

465 i‡(1 & *(*Ë
to_∑ge
)

466 
	`∑nic
("try_to_share:Åo_pageálreadyÉxists");

469 *(*Ë
‰om_∑ge
 &= ~2;

470 *(*Ë
to_∑ge
 = *(*Ë
‰om_∑ge
;

472 
	`övÆid©e
();

474 
phys_addr
 -
LOW_MEM
;

475 
phys_addr
 >>= 12;

476 
mem_m≠
[
phys_addr
]++;

478 
	}
}

489 
	$sh¨e_∑ge
(
addªss
)

491 
èsk_°ru˘
 ** 
p
;

494 i‡(!
cuºít
->
execuèbÀ
)

497 i‡(
cuºít
->
execuèbÀ
->
i_cou¡
 < 2)

501 
p
 = &
LAST_TASK
 ;Ö > &
FIRST_TASK
 ; --p) {

502 i‡(!*
p
)

504 i‡(
cuºít
 =*
p
)

506 i‡((*
p
)->
execuèbÀ
 !
cuºít
->executable)

508 i‡(
	`åy_to_sh¨e
(
addªss
,*
p
))

512 
	}
}

516 
	$do_no_∑ge
(
îr‹_code
,
addªss
)

518 
ƒ
[4];

519 
tmp
;

520 
∑ge
;

521 
block
,
i
;

523 
addªss
 &= 0xfffff000;

525 
tmp
 = 
addªss
 - 
cuºít
->
°¨t_code
;

532 i‡(!
cuºít
->
execuèbÀ
 || 
tmp
 >cuºít->
íd_d©a
) {

533 
	`gë_em±y_∑ge
(
addªss
);

537 i‡(
	`sh¨e_∑ge
(
tmp
))

540 i‡(!(
∑ge
 = 
	`gë_‰ì_∑ge
()))

541 
	`oom
();

544 
block
 = 1 + 
tmp
/
BLOCK_SIZE
;

546 
i
=0 ; i<4 ; 
block
++,i++)

547 
ƒ
[
i
] = 
	`bm≠
(
cuºít
->
execuèbÀ
,
block
);

549 
	`bªad_∑ge
(
∑ge
,
cuºít
->
execuèbÀ
->
i_dev
,
ƒ
);

552 
i
 = 
tmp
 + 4096 - 
cuºít
->
íd_d©a
;

553 
tmp
 = 
∑ge
 + 4096;

554 
i
-- > 0) {

555 
tmp
--;

556 *(*)
tmp
 = 0;

559 i‡(
	`put_∑ge
(
∑ge
,
addªss
))

561 
	`‰ì_∑ge
(
∑ge
);

562 
	`oom
();

563 
	}
}

570 
	$mem_öô
(
°¨t_mem
, 
íd_mem
)

572 
i
;

574 
HIGH_MEMORY
 = 
íd_mem
;

575 
i
=0 ; i<
PAGING_PAGES
 ; i++)

576 
mem_m≠
[
i
] = 
USED
;

577 
i
 = 
	`MAP_NR
(
°¨t_mem
);

578 
íd_mem
 -
°¨t_mem
;

579 
íd_mem
 >>= 12;

580 
íd_mem
-->0)

581 
mem_m≠
[
i
++]=0;

582 
	}
}

585 
	$ˇlc_mem
()

587 
i
,
j
,
k
,
‰ì
=0;

588 * 
pg_tbl
;

591 
i
=0 ; i<
PAGING_PAGES
 ; i++)

592 i‡(!
mem_m≠
[
i
]Ë
‰ì
++;

593 
	`¥ötk
("%dÖage†‰ì (o‡%d)\n\r",
‰ì
,
PAGING_PAGES
);

595 
i
=2 ; i<1024 ; i++) {

596 i‡(1&
pg_dú
[
i
]) {

597 
pg_tbl
=(*Ë(0xfffff000 & 
pg_dú
[
i
]);

598 
j
=
k
=0 ; j<1024 ; j++)

599 i‡(
pg_tbl
[
j
]&1)

600 
k
++;

601 
	`¥ötk
("Pg-dú[%d] u£†%dÖages\n",
i
,
k
);

604 
	}
}

	@
1
.
0
89
1515
VC/Documents/ÂæÆÊú∫‰∏≠Êñ≠ÁöÑËµÑÊñô.cpp
VC/keyboard.i
build/build.cpp
fs/bitmap.c
fs/block_dev.c
fs/buffer.c
fs/char_dev.c
fs/exec.c
fs/fcntl.c
fs/file_dev.c
fs/file_table.c
fs/inode.c
fs/ioctl.c
fs/namei.c
fs/open.c
fs/pipe.c
fs/read_write.c
fs/stat.c
fs/super.c
fs/truncate.c
include/a.out.h
include/asm/io.h
include/asm/memory.h
include/asm/segment.h
include/asm/system.h
include/asm/y_segment.h
include/const.h
include/ctype.h
include/errno.h
include/fcntl.h
include/linux/config.h
include/linux/fdreg.h
include/linux/fs.h
include/linux/hdreg.h
include/linux/head.h
include/linux/kernel.h
include/linux/mm.h
include/linux/sched.h
include/linux/sys.h
include/linux/tty.h
include/set_seg.h
include/signal.h
include/stdarg.h
include/stddef.h
include/string.h
include/sys/stat.h
include/sys/times.h
include/sys/types.h
include/sys/utsname.h
include/sys/wait.h
include/termios.h
include/time.h
include/unistd.h
include/utime.h
init/main.c
kernel/blk_drv/blk.h
kernel/blk_drv/floppy.c
kernel/blk_drv/hd.c
kernel/blk_drv/ll_rw_blk.c
kernel/blk_drv/ramdisk.c
kernel/chr_drv/console.c
kernel/chr_drv/keyboard.h
kernel/chr_drv/serial.c
kernel/chr_drv/tty_io.c
kernel/chr_drv/tty_ioctl.c
kernel/exit.c
kernel/fork.c
kernel/math/math_emulate.c
kernel/mktime.c
kernel/panic.c
kernel/printk.c
kernel/sched.c
kernel/signal.c
kernel/sys.c
kernel/traps.c
kernel/vsprintf.c
lib/_exit.c
lib/close.c
lib/ctype.c
lib/dup.c
lib/errno.c
lib/execve.c
lib/malloc.c
lib/open.c
lib/setsid.c
lib/string.c
lib/wait.c
lib/write.c
mm/memory.c
